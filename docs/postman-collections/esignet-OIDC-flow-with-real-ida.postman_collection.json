{
	"info": {
		"_postman_id": "1a83d431-bc52-4c0d-bf25-4158e7a96e75",
		"name": "MOSIP e-Signet Collection RealIDA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6039892"
	},
	"item": [
		{
			"name": "Auth API - Userid Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var data = jsonData.response.token;",
							"console.log(data);",
							"pm.environment.set(\"authorizationToken\",data);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"string\",\n  \"version\": \"string\",\n  \"requesttime\": \"{{$isoTimestamp}}\",\n  \"metadata\": {},\n  \"request\": {\n    \"userName\": \"balaji\",\n    \"password\": \"mosip123\",\n    \"appId\": \"partner\",\n    \"clientId\": \"mosip-pms-client\",\n    \"clientSecret\": \"Tkx3jw9INusggEDW\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{internalUrl}}/authmanager/authenticate/internal/useridPwd",
					"host": [
						"{{internalUrl}}"
					],
					"path": [
						"authmanager",
						"authenticate",
						"internal",
						"useridPwd"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create OIDC client - Client Management",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var uuid = require('uuid')",
							"var clientId = uuid.v4();",
							"pm.environment.set(\"clientId\", clientId);",
							"eval(pm.globals.get('pmlib_code'))",
							"keyPair = pmlib.rs.KEYUTIL.generateKeypair(\"RSA\", 2048);",
							"jwkPrivateKey = pmlib.rs.KEYUTIL.getJWK(keyPair.prvKeyObj);",
							"jwkPublicKey  = pmlib.rs.KEYUTIL.getJWK(keyPair.pubKeyObj);",
							"jwkPublicKey[\"alg\"] = \"RS256\";",
							"jwkPublicKey[\"use\"] = \"sig\";",
							"",
							"pm.environment.set(\"client_public_key\", JSON.stringify(jwkPublicKey))",
							"pm.environment.set(\"client_private_key\", JSON.stringify(jwkPrivateKey));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate clientId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.clientId).to.eql(pm.collectionVariables.get(\"clientId\"));",
							"});",
							"",
							"pm.test(\"Validate status\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.status).to.eql(\"ACTIVE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authorizationToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authorizationToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{    \n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"clientId\": \"{{clientId}}\",\n        \"clientName\": \"Postman Test Client\",\n        \"publicKey\": {{client_public_key}},\n        \"relyingPartyId\": \"{{relayingPartyId}}\",\n        \"userClaims\": [\n            \"name\",\n            \"email\",\n            \"gender\",\n            \"phone_number\",\n            \"picture\",\n            \"birthdate\"\n        ],\n        \"authContextRefs\": [\n            \"mosip:idp:acr:generated-code\",\n            \"mosip:idp:acr:biometrics\",\n            \"mosip:idp:acr:linked-wallet\"\n        ],\n    \"logoUri\": \"https://healthservices.dev3.mosip.net/logo.png\",\n    \"redirectUris\": [\n      \"{{redirectionUrl}}\"\n    ],\n    \"grantTypes\": [\n      \"authorization_code\"\n    ],\n    \"clientAuthMethods\": [\n      \"private_key_jwt\"\n    ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/client-mgmt/oidc-client",
					"host": [
						"{{url}}"
					],
					"path": [
						"client-mgmt",
						"oidc-client"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update OIDC - Client Management",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate clientId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.clientId).to.eql(pm.collectionVariables.get(\"clientId\"));",
							"});",
							"",
							"pm.test(\"Validate status\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.status).to.eql(\"ACTIVE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authorizationToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "841f2428-cfc1-4bb0-a1bb-68d08b2730f4",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"logoUri\": \"https://lh3.googleusercontent.com/u/0/drive-viewer/AAOQEOSwH3hZ45YAluKCnXcl3gzt1l19KzZy3Hh8lA-WoLCsQtk1WbIBm6ESwPPK16n8d2r2J3wu1nL78FbsF2dz1jNprXN_=w1862-h369\",\n        \"redirectUris\": [\n            \"http://spmis.mosip-accessh.net:65530/spmis/ekyclogindetail.html\",\n            \"http://localhost:65530/spmis/ekyclogindetail.html\"\n        ],\n        \"userClaims\": [\n            \"name\",\n            \"email\",\n            \"gender\",\n            \"phone_number\",\n            \"birthdate\",\n            \"picture\",\n            \"address\"\n        ],\n        \"authContextRefs\": [\n            \"mosip:idp:acr:generated-code\",\n            \"mosip:idp:acr:biometrics\",\n             \"mosip:idp:acr:linked-wallet\"\n        ],\n        \"status\": \"ACTIVE\",\n        \"grantTypes\": [\n            \"authorization_code\"\n        ],\n        \"clientName\": \"Pension Scheme\",\n        \"clientAuthMethods\": [\n            \"private_key_jwt\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/client-mgmt/oidc-client/OAjPQymFHSO50IKxlWDKzjvDHJpzLNIOq92Svhard8s",
					"host": [
						"{{url}}"
					],
					"path": [
						"client-mgmt",
						"oidc-client",
						"OAjPQymFHSO50IKxlWDKzjvDHJpzLNIOq92Svhard8s"
					]
				}
			},
			"response": []
		},
		{
			"name": "PMS Authentication - ClienID Secret",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"2022-06-10T06:38:13.334Z\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"clientId\": \"mosip-pms-client\",\r\n    \"secretKey\": \"Ap9z87pRXFBDIVqb\",\r\n    \"appId\": \"partner\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{internalUrl}}/authmanager/authenticate/clientidsecretkey",
					"host": [
						"{{internalUrl}}"
					],
					"path": [
						"authmanager",
						"authenticate",
						"clientidsecretkey"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create OIDC Client PMS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"eval(pm.globals.get('pmlib_code'))",
							"keyPair = pmlib.rs.KEYUTIL.generateKeypair(\"RSA\", 2048);",
							"jwkPrivateKey = pmlib.rs.KEYUTIL.getJWK(keyPair.prvKeyObj);",
							"jwkPublicKey  = pmlib.rs.KEYUTIL.getJWK(keyPair.pubKeyObj);",
							"jwkPublicKey[\"alg\"] = \"RS256\";",
							"jwkPublicKey[\"use\"] = \"sig\";",
							"",
							"pm.environment.set(\"client_public_key\", JSON.stringify(jwkPublicKey))",
							"pm.environment.set(\"client_private_key\", JSON.stringify(jwkPrivateKey));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var clientId = jsonData.response.clientId;",
							"console.log(clientId);",
							"pm.environment.set(\"clientId\",clientId);",
							"pm.environment.set(\"partner_api_key\",clientId);",
							"",
							"pm.test(\"Validate status\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.status).to.eql(\"ACTIVE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"2022-12-28T12:23:24.448Z\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"name\": \"casia\",\r\n    \"policyId\": \"26123\",\r\n    \"publicKey\": {{client_public_key}},\r\n    \"authPartnerId\": {{relayingPartyId}},\r\n    \"logoUri\": \"https://casia.qa-triad.mosip.net/images/doctor_logo.png\",\r\n    \"redirectUris\": [\r\n      \"{{redirectionUrl}}\"\r\n    ],\r\n    \"grantTypes\": [\r\n      \"authorization_code\"\r\n    ],\r\n    \"clientAuthMethods\": [\r\n      \"private_key_jwt\"\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{internalUrl}}/partnermanager/oidc/client",
					"host": [
						"{{internalUrl}}"
					],
					"path": [
						"partnermanager",
						"oidc",
						"client"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get CSRF token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.cookies.get(\"XSRF-TOKEN\")",
							"pm.environment.set(\"csrf_token\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/csrf/token",
					"host": [
						"{{url}}"
					],
					"path": [
						"csrf",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorize / OAuthdetails request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var btoa = require('btoa');",
							"",
							"var token = pm.cookies.get(\"XSRF-TOKEN\")",
							"pm.environment.set(\"csrf_token\", token);",
							"",
							"pm.test(\"Validate transactionId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.transactionId).not.equals(null);",
							"    pm.environment.set(\"transaction_id\", jsonData.response.transactionId);",
							"});",
							"",
							"pm.test(\"Validate auth factors\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.authFactors[0].name).to.eql(pm.environment.get(\"expected_amr\"));",
							"});",
							"",
							"pm.test(\"set oauth-details-hash\", function () {",
							"    var jsonData = pm.response.json();",
							"    var sha256Hash = CryptoJS.SHA256(JSON.stringify(jsonData.response));",
							"    var base64Encoded = sha256Hash.toString(CryptoJS.enc.Base64);",
							"    // Remove padding characters",
							"    base64Encoded = base64Encoded.replace(/=+$/, '');",
							"    // Replace '+' with '-' and '/' with '_' to convert to base64 URL encoding",
							"    base64Encoded = base64Encoded.replace(/\\+/g, '-').replace(/\\//g, '_');",
							"    console.log(\"base64Encoded : \" + base64Encoded);",
							"    pm.environment.set(\"oauth_details_key\", jsonData.response.transactionId);",
							"    pm.environment.set(\"oauth_details_hash\", base64Encoded);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"clientId\": \"{{clientId}}\",\n        \"scope\": \"{{scope}}\",\n        \"responseType\": \"code\",\n        \"redirectUri\": \"{{redirectionUrl}}\",\n        \"display\": \"popup\",\n        \"prompt\": \"login\",\n        \"acrValues\": \"mosip:idp:acr:generated-code mosip:idp:acr:linked-wallet mosip:idp:acr:biometrics\",\n        \"claims\": {{claims}},\n        \"nonce\" : \"{{nonce}}\",\n        \"state\" : \"{{state}}\",\n        \"claimsLocales\" : \"en\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authorization/oauth-details",
					"host": [
						"{{url}}"
					],
					"path": [
						"authorization",
						"oauth-details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.cookies.get(\"XSRF-TOKEN\")",
							"pm.environment.set(\"csrf_token\", token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					},
					{
						"key": "oauth-details-key",
						"value": "{{oauth_details_key}}",
						"type": "text"
					},
					{
						"key": "oauth-details-hash",
						"value": "{{oauth_details_hash}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"individualId\": \"{{individual_id}}\",\n        \"challengeList\" : [\n            {\n                \"authFactorType\" : \"OTP\",\n                \"challenge\" : \"111111\",\n                \"format\" : \"alpha-numeric\"\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authorization/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"authorization",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate User V2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.cookies.get(\"XSRF-TOKEN\")",
							"pm.environment.set(\"csrf_token\", token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					},
					{
						"key": "oauth-details-key",
						"value": "{{oauth_details_key}}",
						"type": "text"
					},
					{
						"key": "oauth-details-hash",
						"value": "{{oauth_details_hash}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"individualId\": \"{{individual_id}}\",\n        \"challengeList\" : [\n            {\n                \"authFactorType\" : \"OTP\",\n                \"challenge\" : \"111111\",\n                \"format\" : \"alpha-numeric\"\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authorization/v2/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"authorization",
						"v2",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.cookies.get(\"XSRF-TOKEN\")",
							"pm.environment.set(\"csrf_token\", token);",
							"",
							"pm.test(\"Validate code\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.code).not.equals(null);",
							"    pm.collectionVariables.set(\"code\", jsonData.response.code);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					},
					{
						"key": "oauth-details-key",
						"value": "{{oauth_details_key}}",
						"type": "text"
					},
					{
						"key": "oauth-details-hash",
						"value": "{{oauth_details_hash}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"acceptedClaims\": [],\n        \"permittedAuthorizeScopes\" : []\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authorization/auth-code",
					"host": [
						"{{url}}"
					],
					"path": [
						"authorization",
						"auth-code"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Link code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate linkCode\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.linkCode).not.equals(null);",
							"    pm.environment.set(\"link_code\", jsonData.response.linkCode);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					},
					{
						"key": "oauth_details_key",
						"value": "{{oauth_details_key}}",
						"type": "text"
					},
					{
						"key": "oauth_details_hash",
						"value": "{{oauth_details_hash}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/link-code",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"link-code"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tokens",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"// Set headers for JWT",
							"var header = {\t",
							"\t\"alg\": \"RS256\"",
							"};",
							"",
							"const private_key_jwk = JSON.parse(pm.environment.get(\"client_private_key\"));",
							"",
							"const signed_jwt = pmlib.clientAssertPrivateKey(private_key_jwk, pm.environment.get('clientId'), pm.environment.get('aud'), exp = 60,  \"RS256\");",
							"",
							"pm.collectionVariables.set(\"client_assertion\",signed_jwt);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Id-token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id_token).not.equals(null);",
							"});",
							"",
							"pm.test(\"Validate access-token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.access_token).not.equals(null);",
							"    pm.environment.set(\"access_token\", jsonData.access_token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "code",
							"value": "{{code}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{clientId}}",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "{{redirectionUrl}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{client_assertion}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/oauth/token",
					"host": [
						"{{url}}"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link transaction (wallet)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate linkTransactionId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.linkTransactionId).not.equals(null);",
							"    pm.environment.set(\"linkTransactionId\", jsonData.response.linkTransactionId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"linkCode\": \"{{link_code}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/link-transaction",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"link-transaction"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link status",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"linkCode\": \"{{link_code}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/link-status",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"link-status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link Authenticate User (wallet)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"//sign token",
							"const private_key_jwk = JSON.parse(pm.environment.get(\"binding_private_key\"));",
							"var certificate = eval(pm.environment.get('bind_certificate'));",
							"var public_key_jwk = pmlib.rs.KEYUTIL.getJWK(certificate);",
							"",
							"// Set headers for JWT",
							"var header = {",
							"    \"x5t#S256\" : public_key_jwk['x5t#S256'],",
							"\t\"alg\": \"RS256\"",
							"};",
							"",
							"const signed_jwt = pmlib.jwtSign(private_key_jwk, {",
							"    \"aud\" : pm.environment.get('wla_aud'),",
							"\t\"sub\": pm.environment.get('individual_id'),",
							"    \"iss\" : \"postman-inji\"",
							"}, header, exp=600, alg = \"RS256\")",
							"",
							"pm.collectionVariables.set(\"wla_challenge\",signed_jwt);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"linkedTransactionId\": \"{{linkTransactionId}}\",\n        \"individualId\": \"{{individual_id}}\",\n        \"challengeList\" : [\n            {\n                \"authFactorType\" : \"WLA\",\n                \"challenge\" : \"{{wla_challenge}}\",\n                \"format\" : \"jwt\"\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link Authenticate User (wallet) -V2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"//sign token",
							"const private_key_jwk = JSON.parse(pm.environment.get(\"binding_private_key\"));",
							"var certificate = eval(pm.environment.get('bind_certificate'));",
							"var public_key_jwk = pmlib.rs.KEYUTIL.getJWK(certificate);",
							"",
							"// Set headers for JWT",
							"var header = {",
							"    \"x5t#S256\" : public_key_jwk['x5t#S256'],",
							"\t\"alg\": \"RS256\"",
							"};",
							"",
							"const signed_jwt = pmlib.jwtSign(private_key_jwk, {",
							"    \"aud\" : pm.environment.get('wla_aud'),",
							"\t\"sub\": pm.environment.get('individual_id'),",
							"    \"iss\" : \"postman-inji\"",
							"}, header, exp=600, alg = \"RS256\")",
							"",
							"pm.collectionVariables.set(\"wla_challenge\",signed_jwt);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"linkedTransactionId\": \"{{linkTransactionId}}\",\n        \"individualId\": \"{{individual_id}}\",\n        \"challengeList\" : [\n            {\n                \"authFactorType\" : \"WLA\",\n                \"challenge\" : \"{{wla_challenge}}\",\n                \"format\" : \"jwt\"\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/v2/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"v2",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link Consent Request (wallet)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate code\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.code).not.equals(null);",
							"    pm.collectionVariables.set(\"code\", jsonData.response.code);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"linkedTransactionId\": \"{{linkTransactionId}}\",\n        \"acceptedClaims\": [ \"name\", \"gender\", \"email\" ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/consent",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"consent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link Consent Request (wallet) - V2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'));",
							"",
							"const private_key_jwk = JSON.parse(pm.environment.get(\"binding_private_key\"));",
							"var certificate = eval(pm.environment.get('bind_certificate'));",
							"var public_key_jwk = pmlib.rs.KEYUTIL.getJWK(certificate);",
							"",
							"// Set headers for JWT",
							"var header = {",
							"    \"x5t#S256\" : public_key_jwk['x5t#S256'],",
							"\t\"alg\": \"RS256\"",
							"};",
							"var payload = {}",
							"var acceptedClaims = pm.environment.get('acceptedClaims');",
							"if(acceptedClaims != undefined && Array.isArray(acceptedClaims)){",
							"    payload[\"acceptedClaims\"] = acceptedClaims.sort()",
							"}",
							"var permittedAuthorizedScopes = eval(pm.environment.get('permittedAuthorizedScopes'));",
							"if(permittedAuthorizedScopes != undefined && Array.isArray(permittedAuthorizedScopes)){",
							"    payload[\"permittedAuthorizedScopes\"] = permittedAuthorizedScopes.sort()",
							"}",
							"const signedPayload = pmlib.rs.jws.JWS.sign(",
							"    null, header, payload, private_key_jwk",
							");",
							"var parts = signedPayload.split(\".\");",
							"var detachedSignature = parts[0] + \".\" + parts[2];",
							"pm.environment.set(\"detachedSignature\",  detachedSignature);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate code\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.code).not.equals(null);",
							"    pm.collectionVariables.set(\"code\", jsonData.response.code);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"linkedTransactionId\": \"{{linkTransactionId}}\",\n        \"acceptedClaims\": {{acceptedClaims}},\n        \"signature\": \"{{detachedSignature}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/v2/consent",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"v2",
						"consent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link auth code request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate code\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.code).not.equals(null);",
							"    pm.collectionVariables.set(\"code\", jsonData.response.code);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"linkedCode\": \"{{link_code}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/linked-authorization/link-auth-code",
					"host": [
						"{{url}}"
					],
					"path": [
						"linked-authorization",
						"link-auth-code"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get UserInfo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.environment.get(\"access_token\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"const private_key_jwk = {",
							"\t\"p\": \"0-40ISxXDmC8SVrudg1e7vQskyWlohadm83RAkUyH6S4h1aTPrNwLVn9WANnyRTqupD1Fr8mYZ7f9nZ2MkMj45UV8uiIjQZr3crMq0YGkzt_LvwhLduWOJ_z9_9zZNHckXei4G8QQFJQYb3TNdGsVVSwff68SSoen8oqvkbkAJs\",",
							"\t\"kty\": \"RSA\",",
							"\t\"q\": \"6as88odcbP2MDT9lkahK2z4QIH25zsa_UdLgAtLwDVpekXfJNOQvuqNY1Gw3Jws6uPDLGcEK42MyeOdCFqklFTvDJlJXMFvgWrmGbCUMvJL-rFyO-kCTGnFBX60ozdJbjfBt3E3QYx3G907Ziuu9o0azey1DJtq_zKwearE-xTs\",",
							"\t\"d\": \"BgdeiCZbr5qZ4haShg9uQinZRYPSUTYc_58YgvQ0WkPKm5fINOgOJPvimdKYBt8OtIWbhojTyn0TKrGPPAqFZCnGY16HkCUN31MbluD2wxYz6SPpZ1zsmP8PbQUVozjEFeLpiTN6nubw_skS_9GGrl1CPb25wTPlZtI3uQ5IiPL_YD5j_w5_J7tejAaRbhlJj48ZDa4CR8BkaUi2QaQmLoyiO_1O-U-Nf17-t1C6zFFKKHQx2lNltE1xFQoHB4WuBA2GnP5LgNFJSLv0p95gQK37nP0TTcuiZVlvFcmbGI_ilWlxRKJUD3mZR6nz25X4SapUWswnrnm7JtUA_UGVGw\",",
							"\t\"e\": \"AQAB\",",
							"\t\"use\": \"sig\",",
							"\t\"kid\": \"1bbdc9de-c24f-4801-b6b3-691ac07641af\",",
							"\t\"qi\": \"pmL_G7T4OF_pr2RCzkkupi1dCbwRX39bMEIs3uirvkoPR5CENvuvsXQ0Oias3taxzLa4nG5JVXHkyOIX8UsK1NFrzZPRKbfNX3h5EAnl3I7cZMtoYJLnawUqaNTukOmDChPlKx1fVjUwsyNn5HSAnmBiaOmm_RHo36tPhgaPUtE\",",
							"\t\"dp\": \"e3b2X60ZOoMYrhOPgK7hc4xEu6TfDcLnJvGMpinxvYWVCyNgvNKEs6cNdMznFbpd1TrFze6mSZDpIQh6a2W57sfX9Z-Kjb4D8T5IZi9xfSzYN2MjYTfgGDT3SK9FZqLsQMLV3LJXYWGS-p5AAcaZA01HVN-miWlEVgrNQ_TAt6k\",",
							"\t\"dq\": \"Yg-BqUoTCI4y6xBS4JieqXlXLTt18YfInF8BsU2yffgRvbxmTPMB8LJCQgsT7iexQhGTOkCgACMN-F0ciAP90vZchEWD34B_G7PF7LZzrOOHSvAg9HaLBUrII424lP-VenCOuihRrna9m-WUN8-MquutwKCTEMg2O39z2FR_wic\",",
							"\t\"n\": \"wXGQA574CU-WTWPILd4S3_1sJf0Yof0kwMeNctXc1thQo70Ljfn9f4igpRe7f8qNs_W6dLuLWemFhGJBQBQ7vvickECKNJfo_EzSD_yyPCg7k_AGbTWTkuoObHrpilwJGyKVSkOIujH_FqHIVkwkVXjWc25Lsb8Gq4nAHNQEqqgaYPLEi5evCR6S0FzcXTPuRh9zH-cM0Onjv4orrfYpEr61HcRp5MXL55b7yBoIYlXD8NfalcgdrWzp4VZHvQ8yT9G5eaf27XUn6ZBeBf7VnELcKFTyw1pK2wqoOxRBc8Y1wO6rEy8PlCU6wD-mbIzcjG1wUfnbgvJOM4A5G41quQ\"",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/oidc/userinfo",
					"host": [
						"{{url}}"
					],
					"path": [
						"oidc",
						"userinfo"
					]
				}
			},
			"response": []
		},
		{
			"name": "JWKS",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/oauth/.well-known/jwks.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"oauth",
						".well-known",
						"jwks.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send OTP",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{csrf_token}}",
						"type": "text"
					},
					{
						"key": "oauth-details-key",
						"value": "{{oauth_details_key}}",
						"type": "text"
					},
					{
						"key": "oauth-details-hash",
						"value": "{{oauth_details_hash}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"individualId\": \"{{individual_id}}\",\n        \"otpChannels\" : [\"email\", \"phone\"],\n        \"captchaToken\" : \"dummy\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authorization/send-otp",
					"host": [
						"{{url}}"
					],
					"path": [
						"authorization",
						"send-otp"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Mock Identity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"// Set headers for JWT",
							"var header = {\t",
							"\t\"alg\": \"RS256\"",
							"};",
							"",
							"",
							"//sign token",
							"const private_key_jwk = pm.environment.get(\"client_private_key\");",
							"",
							"",
							"const signed_jwt = pmlib.clientAssertPrivateKey(private_key_jwk, pm.environment.get('clientId'), pm.environment.get('aud'), exp = 60,  \"RS256\");",
							"",
							"pm.collectionVariables.set(\"client_assertion\",signed_jwt);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Id-token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id_token).not.equals(null);",
							"});",
							"",
							"pm.test(\"Validate access-token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.access_token).not.equals(null);",
							"    pm.environment.set(\"access_token\", jsonData.access_token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"virtualId\": \"8267411573\",\n        \"pin\": \"55555\",\n        \"gender\": [\n            {\n                \"language\": \"eng\",\n                \"value\": \"Female\"\n            },\n            {\n                \"language\": \"fra\",\n                \"value\": \"Femâle\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"ذكر\"\n            }\n        ],\n        \"city\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"CMâttye\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"دسييسيكدك\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"Cmattey\"\n            }\n        ],\n        \"postalCode\": \"45009\",\n        \"fullName\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"Himaja Dhanya R\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"تتگلدكنسَزقهِقِفل دسييسيكدكنوڤو\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"Himaja Dhanya R\"\n            }\n        ],\n        \"dateOfBirth\": \"1995/07/02\",\n        \"individualBiometrics\": null,\n        \"province\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"Kénitra\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"كِ́نِترَ\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"Kénitra\"\n            }\n        ],\n        \"zone\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"Ben Mansour\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"بِن مَنسُُر\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"Ben Mansour\"\n            }\n        ],\n        \"phone\": \"+919427357935\",\n        \"addressLine1\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"yuān⥍\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"$لُنگᆑ\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"Slung\"\n            }\n        ],\n        \"addressLine2\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"yuān 2\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"يَُانꉛ⥍\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"yuan wee\"\n            }\n        ],\n        \"addressLine3\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"yuān 3\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"$لُنگᆑ\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"yuan wee 3\"\n            }\n        ],\n        \"region\": [\n            {\n                \"language\": \"fra\",\n                \"value\": \"melh$pèng\"\n            },\n            {\n                \"language\": \"ara\",\n                \"value\": \"مِله$پِ̀نگ\"\n            },\n            {\n                \"language\": \"eng\",\n                \"value\": \"melhspeng\"\n            }\n        ],\n        \"email\": \"dhanya.himaja123@gmail.com\",\n        \"encodedPhoto\": \"dhdfhdhhdhdfhfdh==\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/mock-identity",
					"host": [
						"{{url}}"
					],
					"path": [
						"mock-identity"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Mock Identity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.environment.get(\"access_token\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'))",
							"",
							"const private_key_jwk = {",
							"\t\"p\": \"0-40ISxXDmC8SVrudg1e7vQskyWlohadm83RAkUyH6S4h1aTPrNwLVn9WANnyRTqupD1Fr8mYZ7f9nZ2MkMj45UV8uiIjQZr3crMq0YGkzt_LvwhLduWOJ_z9_9zZNHckXei4G8QQFJQYb3TNdGsVVSwff68SSoen8oqvkbkAJs\",",
							"\t\"kty\": \"RSA\",",
							"\t\"q\": \"6as88odcbP2MDT9lkahK2z4QIH25zsa_UdLgAtLwDVpekXfJNOQvuqNY1Gw3Jws6uPDLGcEK42MyeOdCFqklFTvDJlJXMFvgWrmGbCUMvJL-rFyO-kCTGnFBX60ozdJbjfBt3E3QYx3G907Ziuu9o0azey1DJtq_zKwearE-xTs\",",
							"\t\"d\": \"BgdeiCZbr5qZ4haShg9uQinZRYPSUTYc_58YgvQ0WkPKm5fINOgOJPvimdKYBt8OtIWbhojTyn0TKrGPPAqFZCnGY16HkCUN31MbluD2wxYz6SPpZ1zsmP8PbQUVozjEFeLpiTN6nubw_skS_9GGrl1CPb25wTPlZtI3uQ5IiPL_YD5j_w5_J7tejAaRbhlJj48ZDa4CR8BkaUi2QaQmLoyiO_1O-U-Nf17-t1C6zFFKKHQx2lNltE1xFQoHB4WuBA2GnP5LgNFJSLv0p95gQK37nP0TTcuiZVlvFcmbGI_ilWlxRKJUD3mZR6nz25X4SapUWswnrnm7JtUA_UGVGw\",",
							"\t\"e\": \"AQAB\",",
							"\t\"use\": \"sig\",",
							"\t\"kid\": \"1bbdc9de-c24f-4801-b6b3-691ac07641af\",",
							"\t\"qi\": \"pmL_G7T4OF_pr2RCzkkupi1dCbwRX39bMEIs3uirvkoPR5CENvuvsXQ0Oias3taxzLa4nG5JVXHkyOIX8UsK1NFrzZPRKbfNX3h5EAnl3I7cZMtoYJLnawUqaNTukOmDChPlKx1fVjUwsyNn5HSAnmBiaOmm_RHo36tPhgaPUtE\",",
							"\t\"dp\": \"e3b2X60ZOoMYrhOPgK7hc4xEu6TfDcLnJvGMpinxvYWVCyNgvNKEs6cNdMznFbpd1TrFze6mSZDpIQh6a2W57sfX9Z-Kjb4D8T5IZi9xfSzYN2MjYTfgGDT3SK9FZqLsQMLV3LJXYWGS-p5AAcaZA01HVN-miWlEVgrNQ_TAt6k\",",
							"\t\"dq\": \"Yg-BqUoTCI4y6xBS4JieqXlXLTt18YfInF8BsU2yffgRvbxmTPMB8LJCQgsT7iexQhGTOkCgACMN-F0ciAP90vZchEWD34B_G7PF7LZzrOOHSvAg9HaLBUrII424lP-VenCOuihRrna9m-WUN8-MquutwKCTEMg2O39z2FR_wic\",",
							"\t\"n\": \"wXGQA574CU-WTWPILd4S3_1sJf0Yof0kwMeNctXc1thQo70Ljfn9f4igpRe7f8qNs_W6dLuLWemFhGJBQBQ7vvickECKNJfo_EzSD_yyPCg7k_AGbTWTkuoObHrpilwJGyKVSkOIujH_FqHIVkwkVXjWc25Lsb8Gq4nAHNQEqqgaYPLEi5evCR6S0FzcXTPuRh9zH-cM0Onjv4orrfYpEr61HcRp5MXL55b7yBoIYlXD8NfalcgdrWzp4VZHvQ8yT9G5eaf27XUn6ZBeBf7VnELcKFTyw1pK2wqoOxRBc8Y1wO6rEy8PlCU6wD-mbIzcjG1wUfnbgvJOM4A5G41quQ\"",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/mock-identity/1234",
					"host": [
						"{{url}}"
					],
					"path": [
						"mock-identity",
						"1234"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Binding OTP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate transactionId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.response.transactionId).not.equals(null);",
							"    pm.environment.set(\"binding_transaction_id\", jsonData.response.transactionId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "42843ec0-df92-4129-aa83-c7441533d090",
						"type": "text"
					},
					{
						"key": "PARTNER-ID",
						"value": "{{relayingPartyId}}",
						"type": "text"
					},
					{
						"key": "PARTNER-API-KEY",
						"value": "{{partner_api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"individualId\" : \"{{individual_id}}\",\n        \"otpChannels\" : [\"email\"]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/binding/binding-otp",
					"host": [
						"{{url}}"
					],
					"path": [
						"binding",
						"binding-otp"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wallet binding",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var cert = JSON.stringify(jsonData.response.certificate);",
							"console.log(cert);",
							"pm.environment.set(\"bind_certificate\",cert);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmlib_code'))",
							"keyPair = pmlib.rs.KEYUTIL.generateKeypair(\"RSA\", 2048);",
							"jwkPrivateKey = pmlib.rs.KEYUTIL.getJWK(keyPair.prvKeyObj);",
							"jwkPublicKey  = pmlib.rs.KEYUTIL.getJWK(keyPair.pubKeyObj, nokid = true);",
							"jwkPublicKey[\"alg\"] = \"RS256\";",
							"jwkPublicKey[\"use\"] = \"sig\";",
							"",
							"pm.environment.set(\"binding_public_key\", JSON.stringify(jwkPublicKey))",
							"pm.environment.set(\"binding_private_key\", JSON.stringify(jwkPrivateKey));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "PARTNER-ID",
						"value": "{{relayingPartyId}}",
						"type": "text"
					},
					{
						"key": "PARTNER-API-KEY",
						"value": "{{partner_api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"individualId\": \"{{individual_id}}\",\n        \"challengeList\": [\n            {\n                \"authFactorType\": \"OTP\",\n                \"challenge\": \"111111\",\n                \"format\": \"alpha-numeric\"\n            }\n        ],\n        \"publicKey\": {{binding_public_key}},\n        \"authFactorType\": \"WLA\",\n        \"format\": \"jwt\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/binding/wallet-binding",
					"host": [
						"{{url}}"
					],
					"path": [
						"binding",
						"wallet-binding"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "clientId",
			"value": "mock-oidc-client"
		},
		{
			"key": "redirectionUrl",
			"value": "https://mosip.io/index.php"
		},
		{
			"key": "relayingPartyId",
			"value": "mock-relaying-party-id"
		},
		{
			"key": "status",
			"value": "\"ACTIVE\""
		},
		{
			"key": "acr_values",
			"value": "level0 level1"
		},
		{
			"key": "scope",
			"value": "openid profile"
		},
		{
			"key": "claims_request_param",
			"value": "{\n            \"userinfo\": {\n                \"email\": {\n                    \"value\": null,\n                    \"values\": null,\n           ..."
		},
		{
			"key": "nonce",
			"value": "2erwER34WW"
		},
		{
			"key": "state",
			"value": "ptOO76SD"
		},
		{
			"key": "expected_amr",
			"value": "\"pin\""
		},
		{
			"key": "transaction_id",
			"value": "ece56bfa-d0c2-46ce-a5a2-8500dfb393a7"
		},
		{
			"key": "individual_id",
			"value": "8267411571"
		},
		{
			"key": "auth_pin",
			"value": "34789"
		},
		{
			"key": "url",
			"value": "http://localhost:8088/v1/idp"
		},
		{
			"key": "url",
			"value": "",
			"disabled": true
		},
		{
			"key": "code",
			"value": ""
		},
		{
			"key": "client_assertion",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "linkTransactionId",
			"value": ""
		},
		{
			"key": "wla_challenge",
			"value": ""
		},
		{
			"key": "client_secret",
			"value": "JfoG3eLWLW7iSZDt"
		},
		{
			"key": "client_secret",
			"value": ""
		},
		{
			"key": "csrf_token",
			"value": "08a17840-da3c-4b93-9ab3-83d9b297ac68",
			"type": "string"
		}
	]
}