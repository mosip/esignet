openapi: 3.1.0
x-stoplight:
  id: 2c0p77qzs8cwq
info:
  title: e-Signet
  version: '1.2.0'
  contact:
    name: MOSIP Team
    email: info@mosip.io
    url: 'https://www.mosip.io/'
  description: |-
    This API document details on the below categories of endpoints
    <ul>
    <li> Management - Endpoints for creation and updation of OIDC client details </li>
    <li> OIDC - All OIDC compliant endpoints for performing the Open ID Connect flows</li>
    <li> UI - All endpoints used by the UI application </li>
    <li> Wallet - All endpoints used by the Wallet application </li>
    <li> binding-service - All endpoints used by the UI application </li>
    <li> VCI Service - All endpoints used by VC Issuance flow</li>
    </ul>

    <b>Abbreviations:</b></br></br>
    OIDC - Open ID Connect</br>
    IdP - Identity provider</br>
    PMP - Partner Management portal</br>
    KYC - Know Your Customer</br>
    IDA - Authentication server</br>
    UIN - Unique Identification Number</br>
    VID - Virtual Identifier</br>
    PSUT - Partner(Relying Party) Specific User Token</br>
    VC - Verifiable Credential</br>
    VCI - Verifiable Credential Issuance      
  

  license:
    name: MPL-2.0
    url: 'https://www.mozilla.org/en-US/MPL/2.0/'
  summary: Open ID Connect based identity provider for large scale authentication
servers:
  - url: 'https://esignet.collab.mosip.net/v1/esignet'
paths:
  /client-mgmt/oidc-client:
    post:
      summary: Create OIDC Client Endpoint
      operationId: post-client
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: OIDC client details
              properties:
                requestTime:
                  type: string
                  format: date-time
                  pattern: ''
                  description: Current date and time when the request is sent
                request:
                  type: object
                  required:
                    - clientId
                    - clientName
                    - relyingPartyId
                    - logoUri
                    - authContextRefs
                    - publicKey
                    - userClaims
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientId:
                      type: string
                      description: 'Unique OIDC client id (Case-Sensitive). If duplicates found, request will be rejected.'
                      example: 785b806d0e594657b05aabdb30fff8a4
                      maxLength: 50
                      minLength: 1
                    clientName:
                      type: string
                      minLength: 1
                      maxLength: 256
                      description: Name of OIDC client.
                      example: ABC Health Care
                    relyingPartyId:
                      type: string
                      description: |-
                        Relying Party ID of the client. This will be passed on to authentications servers when KYC is fetched.

                        Note: Use the client Id as relyingPartyId if there is no separate concept of relying party in the ID authentication system.
                      example: bharathi-inc
                      minLength: 1
                      maxLength: 50
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in OIDC login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: |-
                        Valid list of callback Uris of the relying party. 
                        When OIDC authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.
                      items:
                        type: string
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                    publicKey:
                      type: object
                      description: |-
                        OIDC client's public key used to verify the client's private_key_jwt when OIDC token endpoint is invoked. 
                        This field will not be allowed to udpate later, if the private key is compromised, then new OIDC client to be created.
                        Format : Json Web Key (JWK).
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    clientName: Fastlane e-Sim Service
                    relyingPartyId: Fastlane
                    logoUri: 'https://fastlane.com/fastline-esim.png'
                    redirectUris:
                      - 'https://fastlane.com/homepage'
                    publicKey:
                      kty: RSA
                      e: AQAB
                      use: sig
                      alg: RS256
                      'n': g7KPXZdZ18H2JoW9FhYz8WrSbLeKA5mO8ROW5YQVyzYDfjbRA9sy0FwpF7pa7mBmU1_G0RvD0xbEhSaFtCL5hyNVVZCfgVqNl41C7-F2yUWhfVQPhT5YnT3eH3gV9ZczhP1trNjIzGuH-8D7EDJcoxuwdGaaY-wTmEtHykHRyab08qr62hfwLuSjHAGN6VgV-Na81XIdXmR7Dwnd1U4MxWJxzRvnVlHFCBaZIG6jNJ21vbzM-DBMq1d8tvtrGQx4w3niK_sctUZ5NP1BLkQhYSEGLr-e_mbmHFCnGtuKfnfIm-PVD-6ihfEwX3j_YQT3LhphBZj7AdXg6iyyQn9EJQ
                    authContextRefs:
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:biometrics'
                      - 'mosip:idp:acr:linked-wallet'
                    userClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
        description: ''
      description: |-
        API to add new open ID connect (OIDC) clients, it can be invoked by other modules which manages the relying parties / partners.

        Each relying party can associate to one or multiple OIDC client ids.

        On create, OIDC client status will be by default set to "**active**".
      x-internal: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client id as provided in the request.
                      status:
                        x-stoplight:
                          id: 0c9663wceaxdz
                        enum:
                          - ACTIVE
                          - INACTIVE
                  errors:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - duplicate_client_id
                            - invalid_public_key
                            - invalid_input
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_rp_id
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: string
                    response:
                      clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                      status: ACTIVE
        '401':
          description: Unauthorized
      tags:
        - Management
      parameters: []
      security:
        - Authorization-add_oidc_client: []
      x-stoplight:
        id: s6blkzlwa8f1x
      deprecated: true
    parameters: []
  /client-mgmt/oauth-client:
    post:
      summary: Create OAuth/OIDC Client Endpoint
      operationId: post-oauth-client
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: OIDC client details
              properties:
                requestTime:
                  type: string
                  format: date-time
                  pattern: ''
                  description: Current date and time when the request is sent
                request:
                  type: object
                  required:
                    - clientId
                    - clientName
                    - clientNameLangMap
                    - relyingPartyId
                    - logoUri
                    - authContextRefs
                    - publicKey
                    - userClaims
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientId:
                      type: string
                      description: 'Unique client id (Case-Sensitive). If duplicates found, request will be rejected.'
                      example: 785b806d0e594657b05aabdb30fff8a4
                      maxLength: 50
                      minLength: 1
                    clientName:
                      type: string
                      minLength: 1
                      maxLength: 256
                      description: Name of OAuth/OIDC client.
                      example: ABC Health Care
                    clientNameLangMap:
                      type: object
                      description: |-
                        Client name in different languages. The language code needs to be passed as key and 
                        client name in the desired language needs to be passed as value
                    relyingPartyId:
                      type: string
                      description: |-
                        Relying Party ID of the client. This will be passed on to authentications servers when KYC is fetched.

                        Note: Use the client Id as relyingPartyId if there is no separate concept of relying party in the ID authentication system.
                      example: bharathi-inc
                      minLength: 1
                      maxLength: 50
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in the login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: |-
                        Valid list of callback Uris of the relying party. 
                        When the authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.
                      items:
                        type: string
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                    publicKey:
                      type: object
                      description: |-
                        OAuth/OIDC client's public key used to verify the client's private_key_jwt when token endpoint is invoked. 
                        This field will not be allowed to udpate later, if the private key is compromised, then new OAuth/OIDC client to be created.
                        Format : Json Web Key (JWK).
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    clientName: Fastlane e-Sim Service
                    clientNameLangMap:
                      fra: Service e-Sim de Fastlane
                      ara: خدمة فاست لين e-SIM
                    relyingPartyId: Fastlane
                    logoUri: 'https://fastlane.com/fastlane-esim.png'
                    redirectUris:
                      - 'https://fastlane.com/homepage'
                    publicKey:
                      kty: RSA
                      e: AQAB
                      use: sig
                      alg: RS256
                      'n': g7KPXZdZ18H2JoW9FhYz8WrSbLeKA5mO8ROW5YQVyzYDfjbRA9sy0FwpF7pa7mBmU1_G0RvD0xbEhSaFtCL5hyNVVZCfgVqNl41C7-F2yUWhfVQPhT5YnT3eH3gV9ZczhP1trNjIzGuH-8D7EDJcoxuwdGaaY-wTmEtHykHRyab08qr62hfwLuSjHAGN6VgV-Na81XIdXmR7Dwnd1U4MxWJxzRvnVlHFCBaZIG6jNJ21vbzM-DBMq1d8tvtrGQx4w3niK_sctUZ5NP1BLkQhYSEGLr-e_mbmHFCnGtuKfnfIm-PVD-6ihfEwX3j_YQT3LhphBZj7AdXg6iyyQn9EJQ
                    authContextRefs:
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:biometrics'
                      - 'mosip:idp:acr:linked-wallet'
                    userClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
        description: ''
      description: |-
        API to add new OAuth or open ID connect (OIDC) clients. This API should be used to create client in esignet by the partner management modules in the integrated ID system.

        Each relying party can associate with one or more client ids.

        On create, client status will be by default set to "**active**".
      x-internal: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client id as provided in the request.
                      status:
                        x-stoplight:
                          id: 9iseixjanmh02
                        enum:
                          - ACTIVE
                          - INACTIVE
                  errors:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - duplicate_client_id
                            - invalid_public_key
                            - invalid_input
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_rp_id
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                            - invalid_language_code
                            - invalid_client_name_value
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: string
                    response:
                      clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                      status: ACTIVE
                    errors: []
        '401':
          description: Unauthorized
      tags:
        - Management
      parameters: []
      security:
        - Authorization-add_oidc_client: []
      x-stoplight:
        id: 7uu3h6i9idiic
    parameters: []
  '/client-mgmt/oidc-client/{client_id}':
    parameters:
      - schema:
          type: string
          example: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
        name: client_id
        in: path
        required: true
        description: Client Identifier
    put:
      summary: Update OIDC Client Endpoint
      operationId: put-oidc-client-client_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: OIDC client identifier.
                      status:
                        x-stoplight:
                          id: mg42gkw74lymy
                        enum:
                          - ACTIVE
                          - INACTIVE
                    required:
                      - clientId
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. When request processing is fully successful, this array will be empty.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    value:
                      responseTime: string
                      response:
                        clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                        status: ACTIVE
                      errors: []
      description: |-
        API to update existing Open ID Connect (OIDC) client, it can be invoked by other modules which manages the relying parties / partners when there any updates on the fields accepted in this API.

        **Authentication and authorization** is based on a valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: ''
                  description: Current date and time when the request is sent
                request:
                  type: object
                  required:
                    - clientName
                    - status
                    - logoUri
                    - redirectUris
                    - userClaims
                    - authContextRefs
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientName:
                      type: string
                      description: Name of the OIDC client.
                      minLength: 1
                      maxLength: 256
                      example: ABC Health Care
                    status:
                      type: string
                      enum:
                        - active
                        - inactive
                      description: Status of OIDC client.
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in OIDC login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: 'Valid list of callback Uris of the relying party. When OIDC authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.'
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        format: uri
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientName: Fastlane e-Sim Service
                    relyingPartyId: Fastlane
                    logoUri: 'https://fastline.com/logo.png'
                    redirectUris:
                      - 'https://fastlane.com/homepage'
                      - 'https://fastlane-dev.com/*'
                      - 'fastlaneapp://oauth/*'
                    authContextRefs:
                      - 'mosip:idp:acr:biometrics'
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:linked-wallet'
                    userClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
        description: ''
      tags:
        - Management
      security:
        - Authorization-update_oidc_client: []
      x-stoplight:
        id: tb7ue7javd2f1
      deprecated: true
  '/client-mgmt/oauth-client/{client_id}':
    put:
      summary: Update OAuth/OIDC Client Endpoint
      operationId: put-oauth-client-client_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client identifier.
                      status:
                        x-stoplight:
                          id: 4dbx7y3pexzlf
                        enum:
                          - ACTIVE
                          - INACTIVE
                    required:
                      - clientId
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. When request processing is fully successful, this array will be empty.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                            - invalid_client_name_value
                            - invalid_language_code
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    value:
                      value:
                        responseTime: string
                        response:
                          clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                          status: ACTIVE
                        errors: []
      description: |-
        API to update existing OAuth/Open ID Connect (OIDC) client, it can be invoked by other modules which manages the relying parties / partners when there any updates on the fields accepted in this API.

        **Authentication and authorization** is based on a valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: ''
                  description: Current date and time when the request is sent
                request:
                  type: object
                  required:
                    - clientName
                    - clientNameLangMap
                    - status
                    - logoUri
                    - redirectUris
                    - userClaims
                    - authContextRefs
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientName:
                      type: string
                      description: Name of the OAuth/OIDC client.
                      minLength: 1
                      maxLength: 256
                      example: ABC Health Care
                    clientNameLangMap:
                      type: object
                      description: |-
                        Client name in different languages. The 3 letter language code needs to be passed as key and 
                        client name in the desired language needs to be passed as value
                    status:
                      type: string
                      enum:
                        - active
                        - inactive
                      description: Status of the Client.
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in the login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: 'Valid list of callback Uris of the relying party. When the authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.'
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        format: uri
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  value:
                    requestTime: '2011-10-05T14:48:00.000Z'
                    request:
                      clientName: Fastlane e-Sim Service
                      clientNameLangMap:
                        fra: Service e-Sim de Fastlane
                        ara: خدمة فاست لين e-SIM
                      relyingPartyId: Fastlane
                      logoUri: 'https://fastlane.com/logo.png'
                      redirectUris:
                        - 'https://fastlane.com/homepage'
                        - 'http://fastlane-dev.com/*'
                        - 'fastlaneapp://oauth/*'
                      authContextRefs:
                        - 'mosip:idp:acr:biometrics'
                        - 'mosip:idp:acr:generated-code'
                        - 'mosip:idp:acr:linked-wallet'
                      userClaims:
                        - name
                        - email
                        - phone_number
                        - address
                      grantTypes:
                        - authorization_code
                      clientAuthMethods:
                        - private_key_jwt
        description: ''
      tags:
        - Management
      security:
        - Authorization-update_oidc_client: []
      x-stoplight:
        id: 06urgrccsldii
    parameters:
      - schema:
          type: string
          example: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
        name: client_id
        in: path
        required: true
        description: Client Identifier
  /authorize:
    get:
      summary: Authorization Endpoint
      operationId: get-authorize
      description: |-
        This is the authorize endpoint of Open ID Connect (OIDC). The relying party applications will do a browser redirect to this endpoint with all required details passed as query parameters.

        This endpoint will respond with a basic HTML page to load a JS application in the browser. UI JS application will then echo all the query parameters received in this endpoint to the "/authorization/oauth-details" endpoint as the request body.

        All the validations on the query parameter values will be performed in the "/authorization/oauth-details" endpoint.

        **Authentication & Authroization**: None
      parameters:
        - schema:
            type: string
            default: openid profile
            enum:
              - openid profile
              - openid
              - profile
              - email
              - address
              - phone
              - offline_access
          in: query
          name: scope
          description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
          required: true
        - schema:
            type: string
            enum:
              - code
          in: query
          name: response_type
          description: 'The value set here determines the authorization processing flow. To use the Authorization Code Flow, the value should be configured to "code".'
          required: true
        - schema:
            type: string
            maxLength: 256
          in: query
          name: client_id
          required: true
          description: Valid OAuth 2.0 Client Identifier in the Authorization Server.
        - schema:
            type: string
            format: uri
          in: query
          name: redirect_uri
          description: Redirection URI to which the response would be sent. This URI must match one of the redirection URI values during the client ID creation.
          required: true
        - schema:
            type: string
            maxLength: 256
          in: query
          description: 'Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.'
          name: state
        - schema:
            type: string
          in: query
          description: 'String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token.'
          name: nonce
        - schema:
            type: string
            enum:
              - page
              - popup
              - touch
              - wap
          in: query
          name: display
          description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end user.
        - schema:
            type: string
            enum:
              - none
              - login
              - consent
              - select_account
            example: consent
          in: query
          name: prompt
          description: Space delimited case-sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.
        - schema:
            type: number
          in: query
          name: max_age
          description: 'Maximum Authentication Age. This specifies the allowable elapsed time in seconds since the last time the end user was actively authenticated by the OP. If the elapsed time is greater than this value, then the OP MUST attempt to actively re-authenticate the end user. The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter. When max_age is used, the ID Token returned MUST include an auth_time claim value.'
        - schema:
            type: string
          in: query
          name: ui_locales
          description: 'End user''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
        - schema:
            type: string
          in: query
          name: acr_values
          description: 'Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.'
        - schema:
            type: string
          in: query
          name: claims_locales
          description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
        - schema:
            type: string
          in: query
          name: claims
          description: This parameter is used to request specific claims to be returned. The value is a JSON object listing the requested claims. The claims parameter value is represented in an OAuth 2.0 request as UTF-8 encoded JSON.
        - schema:
            type: string
          in: query
          name: code_challenge
          description: 'A challenge derived from the code_verifier, This is required if its a VC scoped request.'
        - schema:
            type: string
          in: query
          name: code_challenge_method
          description: 'A method that was used to derive code challenge, This will be required if code_challenge is provided.'
      responses:
        '200':
          description: |-
            OK

            Loads JS application, and validates the provided query parameters using oauth-details endpoint.
      tags:
        - OIDC
      x-stoplight:
        id: w26ni0qt5mduu
    parameters: []
  /authorization/oauth-details:
    post:
      summary: OAuth Details Endpoint
      operationId: post-oauth-details
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This value is passed through unmodified from the /oauth-details request to the /auth-code request.
                      authFactors:
                        description: |-
                          Auth factors defines the authentication screens displayed in IDP frontend.
                          More than one authFactor may be resolved or combination of auth factors.
                          Precedence of authFactors is based on its order
                        type: array
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      essentialClaims:
                        type: array
                        description: Array holds all the requested essential claims.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: Array holds all the requested optional claims.
                        items:
                          type: string
                      authorizeScopes:
                        type: array
                        description: Scopes to be permitted by the end user.
                        items:
                          type: string
                      configs:
                        type: object
                        description: UI configuration key-value pairs.
                      clientName:
                        type: string
                        description: OIDC client name as registered.
                      logoUrl:
                        type: string
                        description: Registered OIDC client logo URL.
                    required:
                      - transactionId
                      - authFactors
                      - essentialClaims
                  errors:
                    type:
                      - array
                      - 'null'
                    description: List of errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_redirect_uri
                            - invalid_scope
                            - no_acr_registered
                            - invalid_response_type
                            - invalid_display
                            - invalid_prompt
                        errorMessage:
                          type: string
              examples:
                example-1:
                  value:
                    responseTime: '2022-09-22T08:03:45.287Z'
                    response:
                      transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      clientName: Fastlane e-Sim Service
                      logoUrl: 'https://fastlane.com/logo.png'
                      authFactors:
                        - - type: OTP
                            count: 0
                            subTypes: null
                      authorizeScopes: []
                      essentialClaims:
                        - name
                        - address
                      voluntaryClaims:
                        - email
                        - phone_number
                      configs:
                        sbi.env: Staging
                        sbi.threshold.face: 40
                        sbi.threshold.finger: 40
                        sbi.threshold.iris: 40
                    errors: null
      description: |
        OAuth details request is raised from the UI JS application on page load.

        OAuth details endpoint validates the provided request parameters and resolves the required authentication factors. Combination of resolved authentication factors and the consent details are sent back as response with a unique transactionId.

        The transcationId in the response is used to identify/maintain the end user pre-auth session. This pre-auth session has timeout (configurable in Idp service).

        All the query params passed to /authorize API MUST be sent to /oauth-details endpoint. All these parameters will be validated in IdP before returning success response.

        1. Validates the clientId.
        2. validates redirectUri is one of the redirectUri during client create/update.
        3. validates display,responseType,prompts values are part of supported values in Idp properties.
        4. scope / acrValues / claims / locales / claim_locales - unknown values are ignored. Only valid values are considered.
        5. scopes like profile, email and phone are allowed only if "openid" is also part of the requested scope.
        6. Claims request parameter is allowed, only if 'openid' is part of the scope request parameter
        7. claims considered only if part of registered claims.
        8. ACR in claims request parameter is given the first priority over acr_values query parameter. if none of them are part of the registered acrs, registered ACRs are only considered to derive the auth factors.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: ''
                request:
                  type: object
                  required:
                    - scope
                    - responseType
                    - clientId
                    - redirectUri
                  properties:
                    scope:
                      type: string
                      description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
                    responseType:
                      type: string
                      description: 'Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.'
                    clientId:
                      type: string
                      description: OAuth 2.0 Client Identifier valid at the Authorization Server
                    redirectUri:
                      type: string
                      description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
                    state:
                      type: string
                      description: client state value echoed.
                    nonce:
                      type: string
                      description: Client's nonce value echoed.
                    display:
                      type: string
                      description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
                    prompt:
                      type: string
                      description: 'Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.'
                    acrValues:
                      type: string
                      description: |-
                        Space separated ACR values, Unknown ACR are ignored. Only registered ACR values will be considered.
                        if none of the provided acr value is among the registered values, Error response is returned with error code "invalid_acr".
                    claims:
                      $ref: '#/components/schemas/Claim'
                    maxAge:
                      type: number
                      description: 'Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.'
                    claimsLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    uiLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2022-09-22T08:01:10.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    scope: openid profile
                    responseType: code
                    redirectUri: 'https://fastlane.com/homepage'
                    display: popup
                    prompt: login
                    acrValues: 'mosip:idp:acr:generated-code'
                    claims:
                      userinfo:
                        name:
                          essential: true
                        phone_number: null
                        email:
                          essential: false
                        address:
                          essential: true
                      id_token: {}
                    nonce: 973eieljzng
                    state: eree2311
                    claimsLocales: en
      parameters:
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - UI
      x-stoplight:
        id: c1911yceexshx
      deprecated: true
    parameters: []
  /authorization/v2/oauth-details:
    post:
      summary: OAuth Details Endpoint V2
      operationId: post-oauth-details-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This value is passed through unmodified from the /oauth-details request to the /auth-code request.
                      authFactors:
                        description: |-
                          Auth factors defines the authentication screens displayed in IDP frontend.
                          More than one authFactor may be resolved or combination of auth factors.
                          Precedence of authFactors is based on its order
                        type: array
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      essentialClaims:
                        type: array
                        description: Array holds all the requested essential claims.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: Array holds all the requested optional claims.
                        items:
                          type: string
                      authorizeScopes:
                        type: array
                        description: Scopes to be permitted by the end user.
                        items:
                          type: string
                      configs:
                        type: object
                        description: UI configuration key-value pairs.
                      clientName:
                        type: object
                        description: |-
                          OIDC client name in different languages where language is the key and client name
                          is the value. Default name is passed in @none key.
                      logoUrl:
                        type: string
                        description: Registered OIDC client logo URL.
                      credentialScopes:
                        type:
                          - array
                        x-stoplight:
                          id: kq80bz2ts91vz
                        description: List of valid credential scopes requested
                        items:
                          x-stoplight:
                            id: ulpnul1d1uude
                          type: string
                    required:
                      - transactionId
                      - authFactors
                      - essentialClaims
                  errors:
                    type:
                      - array
                      - 'null'
                    description: List of errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_redirect_uri
                            - invalid_scope
                            - no_acr_registered
                            - invalid_response_type
                            - invalid_display
                            - invalid_prompt
                            - unsupported_pkce_challenge_method
                            - invalid_pkce_challenge
                        errorMessage:
                          type: string
              examples:
                example-1:
                  value:
                    value:
                      responseTime: '2022-09-22T08:03:45.287Z'
                      response:
                        transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                        clientName:
                          eng: Fastlane e-Sim Service
                          fra: Service e-Sim de Fastlane
                          ara: خدمة فاست لين e-SIM
                        logoUrl: 'https://fastlane.com/logo.png'
                        authFactors:
                          - - type: OTP
                              count: 0
                              subTypes: null
                        authorizeScopes: []
                        credentialScopes: []
                        essentialClaims:
                          - name
                          - address
                        voluntaryClaims:
                          - email
                          - phone_number
                        configs:
                          sbi.env: Staging
                          sbi.threshold.face: 40
                          sbi.threshold.finger: 40
                          sbi.threshold.iris: 40
                      errors: null
      description: |
        OAuth details request is raised from the UI JS application on page load.

        OAuth details endpoint validates the provided request parameters and resolves the required authentication factors. Combination of resolved authentication factors and the consent details are sent back as response with a unique transactionId.

        The transcationId in the response is used to identify/maintain the end user pre-auth session. This pre-auth session has timeout (configurable in Idp service).

        All the query params passed to /authorize API MUST be sent to /oauth-details endpoint. All these parameters will be validated in IdP before returning success response.

        1. Validates the clientId.
        2. validates redirectUri is one of the redirectUri during client create/update.
        3. validates display,responseType,prompts values are part of supported values in Idp properties.
        4. scope / acrValues / claims / locales / claim_locales - unknown values are ignored. Only valid values are considered.
        5. scopes like profile, email and phone are allowed only if "openid" is also part of the requested scope.
        6. Claims request parameter is allowed, only if 'openid' is part of the scope request parameter
        7. claims considered only if part of registered claims.
        8. ACR in claims request parameter is given the first priority over acr_values query parameter. if none of them are part of the registered acrs, registered ACRs are only considered to derive the auth factors.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: ''
                request:
                  type: object
                  required:
                    - scope
                    - responseType
                    - clientId
                    - redirectUri
                  properties:
                    scope:
                      type: string
                      description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
                    responseType:
                      type: string
                      description: 'Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.'
                    clientId:
                      type: string
                      description: OAuth 2.0 Client Identifier valid at the Authorization Server
                    redirectUri:
                      type: string
                      description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
                    state:
                      type: string
                      description: client state value echoed.
                    nonce:
                      type: string
                      description: Client's nonce value echoed.
                    display:
                      type: string
                      description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
                    prompt:
                      type: string
                      description: 'Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.'
                    acrValues:
                      type: string
                      description: |-
                        Space separated ACR values, Unknown ACR are ignored. Only registered ACR values will be considered.
                        if none of the provided acr value is among the registered values, Error response is returned with error code "invalid_acr".
                    claims:
                      $ref: '#/components/schemas/Claim'
                    maxAge:
                      type: number
                      description: 'Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.'
                    claimsLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    uiLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    codeChallenge:
                      type: string
                      x-stoplight:
                        id: g7ivgv145ptme
                      description: 'A challenge derived from the code verifier, to be verified against later.'
                    codeChallengeMethod:
                      x-stoplight:
                        id: ux20l8om4zxgq
                      description: A method that was used to derive code challenge.
                      enum:
                        - S256
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  value:
                    requestTime: '2022-09-22T08:01:10.000Z'
                    request:
                      clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                      scope: openid profile
                      responseType: code
                      redirectUri: 'https://fastlane.com/homepage'
                      display: popup
                      prompt: login
                      acrValues: 'mosip:idp:acr:generated-code'
                      claims:
                        userinfo:
                          name:
                            essential: true
                          phone_number: null
                          email:
                            essential: false
                          address:
                            essential: true
                        id_token: {}
                      nonce: 973eieljzng
                      state: eree2311
                      claimsLocales: en
                      codeChallenge: UK95aVX_y3R44DF3hssd3wATvtZmO_WejE0P33-pwTs
                      codeChallengeMethod: S256
      parameters:
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - UI
      x-stoplight:
        id: 3s6yumwe9nw1x
    parameters: []
  /authorization/send-otp:
    post:
      summary: Send OTP Endpoint
      operationId: post-send-otp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    description: 'Successful message, or null if failed to deliver OTP.'
                    properties:
                      transactionId:
                        type: string
                        description: oauth-details transactionId is used until the /token call.
                      maskedEmail:
                        type: string
                        description: Masked email id to which generated OTP was mailed.
                      maskedMobile:
                        type: string
                        description: Masked phone number to which generated OTP was messaged.
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. if failure from IDA, the same error is relayed in this response.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - invalid_identifier
                            - invalid_otp_channel
                            - invalid_captcha
                            - send_otp_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      maskedEmail: sun****@gmail.com
                      maskedMobile: 3*****12
                    errors: []
      description: |-
        When end user want to authenticate using OTP auth factor, he/she will enter their individual id (UIN/VID) and click on the "Generate OTP" button on the UI application. Then this endpoint will be invoked by the JS UI application.

        Since the OTP generation and delivery to end user is to be handled by the integrated authentication system, the request will be relayed to the same.

        1. Validates the transactionId.
        2. Validates null / empty individualId.
        3. Validates captchaToken, if enabled.
        3. Delegates the call to integrated authentication system.
        4. Relays error from authentication system to UI on failure.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - otpChannels
                  properties:
                    transactionId:
                      type: string
                      description: oauth-details transactionId is used until the /token call.
                    individualId:
                      type: string
                      description: Actual UIN or VID value of the authenticating the end user.
                    otpChannels:
                      type: array
                      description: Channel to be used to deliver request OTP.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - sms
                          - email
                    captchaToken:
                      type: string
                      description: 'Captcha token, if enabled.'
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    otpChannels:
                      - sms
                      - email
                    captchaToken: ALSKDJFURIEOQPZMKFURHFVBH
        description: ''
      parameters:
        - schema:
            type: string
          in: header
          name: oauth-details-hash
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction Id
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - UI
      x-stoplight:
        id: fcqk6ou9l595u
    parameters: []
  /linked-authorization/send-otp:
    post:
      summary: Link authorization Send OTP Endpoint
      operationId: post-send-linked-otp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    description: 'Successful message, or null if failed to deliver OTP.'
                    properties:
                      transactionId:
                        type: string
                        description: oauth-details transactionId is used until the /token call.
                      maskedEmail:
                        type: string
                        description: Masked email id to which generated OTP was mailed.
                      maskedMobile:
                        type: string
                        description: Masked phone number to which generated OTP was messaged.
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. if failure from IDA, the same error is relayed in this response.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - invalid_identifier
                            - invalid_otp_channel
                            - send_otp_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:11.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      maskedEmail: sun****@gmail.com
                      maskedMobile: 3*****12
                    errors: []
      description: |-
        When end user want to authenticate using OTP auth factor, he/she will enter their individual id (UIN/VID) and click on the "Generate OTP" button on the UI application. Then this endpoint will be invoked by wallet app with linked transactionId.

        Since the OTP generation and delivery to end user is to be handled by the integrated authentication system, the request will be relayed to the same.

        1. Validates the linked transactionId.
        2. Validates null / empty individualId.
        3. Delegates the call to integrated authentication system.
        4. Relays error from authentication system to UI on failure.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - otpChannels
                  properties:
                    transactionId:
                      type: string
                      description: oauth-details transactionId is used until the /token call.
                    individualId:
                      type: string
                      description: Actual UIN or VID value of the authenticating the end user.
                    otpChannels:
                      type: array
                      description: Channel to be used to deliver request OTP.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - sms
                          - email
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    otpChannels:
                      - sms
                      - email
        description: ''
      parameters: []
      tags:
        - UI
      x-stoplight:
        id: vra4t7y3yvqeg
    parameters: []
  /authorization/authenticate:
    post:
      summary: Authentication Endpoint
      operationId: post-authenticate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    errors: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - challengeList
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    individualId:
                      type: string
                      description: ' User identifier (UIN/VID).'
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
        description: ''
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the UI application, this endpoint will be invoked.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates transactionId/linkTransactionId.
        2. Validates null / empty individualId.
        3. Invokes kyc-auth call to integrated authentication server (IDA).
        4. Relays error from integrated authentication server to UI on failure.

        On Authentication Success: Only transaction Id is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      parameters:
        - schema:
            type: string
          in: header
          name: oauth-details-hash
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction ID
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - UI
        - WALLET
      x-stoplight:
        id: 3439343ywm7yy
      deprecated: true
    parameters: []
  /authorization/v2/authenticate:
    post:
      summary: Authentication Endpoint V2
      operationId: post-authenticate-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                      consentAction:
                        type: string
                        x-stoplight:
                          id: gq30p6w6eprol
                        enum:
                          - CAPTURE
                          - NOCAPTURE
                        description: |
                          This field indicates the need to capture user consent or not
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      consentAction: CAPTURE
                    errors: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - challengeList
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    individualId:
                      type: string
                      description: ' User identifier (UIN/VID).'
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  value:
                    requestTime: '2023-09-22T08:01:10.000Z'
                    request:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      individualId: '464737289558'
                      challengeList:
                        - authFactorType: OTP
                          challenge: '111111'
                          format: alpha-numeric
        description: ''
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the UI application, this endpoint will be invoked.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates transactionId/linkTransactionId.
        2. Validates null / empty individualId.
        3. Invokes kyc-auth call to integrated authentication server (IDA).
        4. It validates stored userconsent against the requested claims and scopes
        5. Relays error from integrated authentication server to UI on failure.

        On Authentication Success: transaction Id and consentAction is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      parameters:
        - schema:
            type: string
          in: header
          name: oauth-details-hash
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction ID
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - UI
        - WALLET
      x-stoplight:
        id: l56iayzlok59y
    parameters: []
  /authorization/auth-code:
    post:
      summary: Authorization Code Endpoint
      operationId: post-auth-code
      description: |-
        Once the authentication is successful and user consent is obtained, this endpoint will be invoked by the UI application to send the accepted consent and permitted scopes.

        Then UI application will receive the authorization code and few other details required for redirecting to the client / relying party application.

        1. Validates transactionId. If valid, stores the accepted claims and permitted scopes in the cache and returns back the authorization code.
        2. Validate accepted claims and permitted scopes in the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                  properties:
                    transactionId:
                      type: string
                      description: Transaction id echoed starting from /authorize call.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    permittedAuthorizeScopes: []
                    acceptedClaims:
                      - name
                      - email
                      - phone_number
      parameters:
        - schema:
            type: string
          in: header
          name: oauth-details-hash
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction Id
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      code:
                        type: string
                        description: Authorization code. Required to obtain the ID token and / or access token from the /token endpoint.
                      redirectUri:
                        type: string
                        description: Client's validated redirect URI.
                      nonce:
                        type: string
                        description: 'The echoed nonce value, if one was passed with the request. Clients must validate the value before proceeding.'
                      state:
                        type: string
                        description: 'The echoed state value, used to maintain state between the request and the callback.'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_accepted_claim
                            - invalid_permitted_scope
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      code: tyemdnjdfornfedg
                      redirectUri: 'https://fastlane.com/homepage'
                      nonce: 973eieljzng
                      state: eree2311
                    errors: []
      tags:
        - UI
        - WALLET
      x-stoplight:
        id: 4stk2twvoqwdc
    parameters: []
  /linked-authorization/link-code:
    post:
      summary: Generate Link Code endpoint
      tags:
        - UI
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: TransactionId same the one passed in the request.
                      linkCode:
                        type: string
                        description: Unique random string mapped to this transactionId.
                      expireDateTime:
                        type: string
                        description: Expire date time (ISO format) for the generated linkCode. After this date time linkCode in this request is not valid.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - link_code_gen_failed
                            - invalid_transaction
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      linkCode: xl4cnYtLQkGRxUj
                      expireDateTime: '2023-09-22T08:05:00.000Z'
                    errors: []
      operationId: get-authorization-generate-link-code
      description: |-
        Generate link code request is raised from JS application.

        1. JS application creates a deeplink with this link-code as parameter.
        2. This deeplink is embedded in a Machine-readable-code and the same is rendered in the UI.
        3. End user scans this machine-readable-code to open wallet app.
        4. On open of wallet-app, wallet-app invokes /link-transaction endpoint.
        5. In the JS application, once machine-readable-code is rendered, at the same time /link-status endpoint is invoked as a polling request.

        **Configuration to decide the expire date time of linkCode**: mosip.idp.link-code-expire-in-secs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - transactionId
                  properties:
                    transactionId:
                      type: string
                      description: TransactionId returned in the oauth-details response.
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
      parameters:
        - schema:
            type: string
          in: header
          name: oauth-details-hash
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction Id
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      x-stoplight:
        id: 8irf309ml887f
    parameters: []
  /linked-authorization/link-transaction:
    post:
      summary: Link Transaction endpoint
      operationId: post-authorization-link-transaction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkTransactionId:
                        type: string
                        description: Unique link-transaction-id.
                      clientName:
                        type: string
                        description: Registered name of the OIDC client.
                      logoUrl:
                        type: string
                        description: Registered OIDC client Logo URL.
                      authorizeScopes:
                        type: array
                        description: List of requested scopes to be permitted by the end user.
                        items:
                          type: string
                      essentialClaims:
                        type: array
                        description: List of client request mandatory claim names.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: List of client request optional claim names.
                        items:
                          type: string
                      authFactors:
                        type: array
                        description: Auth factors defines the authentication screens displayed in IDP frontend. More than one authFactor may be resolved or combination of auth factors. Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      configs:
                        type: object
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_link_code
                            - invalid_transaction
                            - invalid_client_id
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    value:
                      responseTime: '2023-09-22T08:01:13.000Z'
                      response:
                        linkTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                        clientName: Fastlane e-Sim Service
                        logoUrl: 'https://fastlane.com/logo.png'
                        authFactors:
                          - - type: OTP
                              count: 0
                              subTypes: null
                        authorizeScopes: []
                        essentialClaims:
                          - name
                          - address
                        voluntaryClaims:
                          - email
                          - phone_number
                        configs:
                          sbi.env: Staging
                          sbi.threshold.face: 40
                          sbi.threshold.finger: 40
                          sbi.threshold.iris: 40
                      errors: null
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - linkCode
                  properties:
                    linkCode:
                      type: string
                      description: Link code as received by the wallet-app from the QR code scanning.
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkCode: xl4cnYtLQkGRxUj
      description: |-
        The link transaction endpoint is invoked from Wallet-app.

        1. Validates the link-code and its expiry and generates the linkTransactionId. This linkTransactionId is linked to transactionId returned from /oauth-details endpoint.

        2. Returns the auth-factors, clientName, logoUrl, User claims, authorize scopes along with linkTransactionId.

        **Note:**
        Wallet-app will hereafter address the transaction with this linkTransactionId for the /authenticate and /consent endpoints.
      tags:
        - WALLET
      x-stoplight:
        id: 0gfjcs85275fx
      deprecated: true
    parameters: []
  /linked-authorization/v2/link-transaction:
    post:
      summary: Link Transaction endpoint V2
      operationId: post-authorization-link-transaction-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkTransactionId:
                        type: string
                        description: Unique link-transaction-id.
                      clientName:
                        type: object
                        description: |-
                          OIDC client name in different languages where language is the key and client name
                          is the value. Default name is passed in @none key.
                      logoUrl:
                        type: string
                        description: Registered OIDC client Logo URL.
                      authorizeScopes:
                        type: array
                        description: List of requested scopes to be permitted by the end user.
                        items:
                          type: string
                      essentialClaims:
                        type: array
                        description: List of client request mandatory claim names.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: List of client request optional claim names.
                        items:
                          type: string
                      authFactors:
                        type: array
                        description: Auth factors defines the authentication screens displayed in IDP frontend. More than one authFactor may be resolved or combination of auth factors. Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      configs:
                        type: object
                      credentialScopes:
                        type: array
                        x-stoplight:
                          id: 1dzi53p29zeff
                        description: List of valid credential scopes requested
                        items:
                          x-stoplight:
                            id: n6gep91far7u9
                          type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_link_code
                            - invalid_transaction
                            - invalid_client_id
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                      clientName:
                        eng: Fastlane e-Sim Service
                        fra: Service e-Sim de Fastlane
                        ara: خدمة فاست لين e-SIM
                      logoUrl: 'https://fastlane.com/logo.png'
                      authFactors:
                        - - type: OTP
                            count: 0
                            subTypes: null
                      authorizeScopes: []
                      credentialScopes: []
                      essentialClaims:
                        - name
                        - address
                      voluntaryClaims:
                        - email
                        - phone_number
                      configs:
                        sbi.env: Staging
                        sbi.threshold.face: 40
                        sbi.threshold.finger: 40
                        sbi.threshold.iris: 40
                    errors: null
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - linkCode
                  properties:
                    linkCode:
                      type: string
                      description: Link code as received by the wallet-app from the QR code scanning.
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkCode: xl4cnYtLQkGRxUj
      description: |-
        The link transaction endpoint is invoked from Wallet-app.

        1. Validates the link-code and its expiry and generates the linkTransactionId. This linkTransactionId is linked to transactionId returned from /oauth-details endpoint.

        2. Returns the auth-factors, clientName, logoUrl, User claims, authorize scopes along with linkTransactionId.

        **Note:**
        Wallet-app will hereafter address the transaction with this linkTransactionId for the /authenticate and /consent endpoints.
      tags:
        - WALLET
      x-stoplight:
        id: 74cfd9dplq9nc
    parameters: []
  /linked-authorization/link-status:
    post:
      summary: Link status endpoint
      tags:
        - UI
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTIme:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId as sent in the request.
                      linkStatus:
                        type: string
                        description: Link status of the linkCode passed in the request.
                        enum:
                          - LINKED
                      linkedDateTime:
                        type: string
                        description: Epoch in milliseconds at which the wallet-app acknowledged the link-code.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_link_code
                            - response_timeout
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTIme: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      linkStatus: LINKED
                      linkedDateTime: '2023-09-22T08:01:12.000Z'
                    errors: []
      operationId: post-authorization-link-status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - transactionId
                    - linkCode
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    linkCode:
                      type: string
                      description: This is same linkCode returned in the generate-link-code response.
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    linkCode: xl4cnYtLQkGRxUj
      description: |-
        The link transaction endpoint is invoked from Wallet-app.

        1. Validates the link-code and its expiry and generates the linkTransactionId. This linkTransactionId is linked to transactionId returned from /oauth-details endpoint.

        2. Returns the auth-factors, clientName, logoUrl, User claims, authorize scopes along with linkTransactionId.

        **Note:**
        Wallet-app will hereafter address the transaction with this linkTransactionId for the /authenticate and /consent endpoints.
      parameters:
        - schema:
            type: string
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          name: oauth-details-hash
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction Id
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      x-stoplight:
        id: yb6qd1ej9m5mb
    parameters: []
  /linked-authorization/authenticate:
    post:
      summary: Linked Authentication Endpoint
      operationId: post-linked-authenticate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    errors: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - linkedTransactionId
                    - individualId
                    - challengeList
                  properties:
                    linkedTransactionId:
                      type: string
                      description: This is the same transactionId sent in the link-transaction response.
                    individualId:
                      type: string
                      description: User identifier (UIN/VID).
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    individualId: '34543276756'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
        description: ''
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the Wallet-app, this endpoint will be invoked from wallet-app.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates linkedTransactionId.
        2. Validates null / empty individualId.
        4. Invokes kyc-auth call to integrated authentication server (IDA).
        5. Relays error from integrated authentication server to UI on failure.

        On Authentication Success: Only linkTransactionId is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      parameters: []
      tags:
        - WALLET
      x-stoplight:
        id: 73z5rks8w6jwy
      deprecated: true
    parameters: []
  /linked-authorization/v2/authenticate:
    post:
      summary: Linked Authentication Endpoint V2
      operationId: post-linked-authenticate-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                      consentAction:
                        type: string
                        x-stoplight:
                          id: n2zh4pnppn8kt
                        enum:
                          - CAPTURE
                          - NOCAPTURE
                        description: |
                          This field indicates the need to capture user consent or not
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                      consentAction: CAPTURE
                    errors: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - linkedTransactionId
                    - individualId
                    - challengeList
                  properties:
                    linkedTransactionId:
                      type: string
                      description: This is the same transactionId sent in the link-transaction response.
                    individualId:
                      type: string
                      description: User identifier (UIN/VID).
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    individualId: '34543276756'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
        description: ''
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the Wallet-app, this endpoint will be invoked from wallet-app.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates linkedTransactionId.
        2. Validates null / empty individualId.
        4. Invokes kyc-auth call to integrated authentication server (IDA).
        5. Relays error from integrated authentication server to UI on failure.
        6. It validates stored userconsent against the requested claims and scopes

        On Authentication Success: linkTransactionId and consentAction is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      parameters: []
      tags:
        - WALLET
      x-stoplight:
        id: fsyyl0lt2tua9
    parameters: []
  /linked-authorization/consent:
    post:
      summary: Linked Consent Endpoint
      operationId: post-linked-consent
      description: |
        Once the authentication is successful and user consent is obtained, this endpoint will be invoked by the wallet app to send the accepted consent and permitted scopes.

        1. Validates linkedTransactionId.
        2. Validate accepted claims and permitted scopes in the request.
        3. If valid, stores the accepted claims and permitted scopes in the cache.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - linkedTransactionId
                  properties:
                    linkedTransactionId:
                      type: string
                      description: Transaction id echoed starting from /authorize call.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    permittedAuthorizeScopes: []
                    acceptedClaims:
                      - name
                      - email
                      - phone_number
                      - address
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the link-transaction response.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_accepted_claim
                            - invalid_permitted_scope
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    errors: []
      tags:
        - WALLET
      x-stoplight:
        id: ogv0thl4lyntt
      deprecated: true
    parameters: []
  /linked-authorization/v2/consent:
    post:
      summary: Linked Consent Endpoint V2
      operationId: post-linked-consent-v2
      description: |
        Once the authentication is successful and user consent is obtained, this endpoint will be invoked by the wallet app to send the accepted consent and permitted scopes.

        1. Validates linkedTransactionId.
        2. Validate accepted claims and permitted scopes in the request and the signature.
        3. If valid, stores the accepted claims, permitted scopes and signature in the consent registry.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - linkedTransactionId
                  properties:
                    linkedTransactionId:
                      type: string
                      description: Transaction id echoed starting from /authorize call.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
                    signature:
                      type: string
                      x-stoplight:
                        id: hw1q1wqlgf98v
                      description: Signature of permittedscopes and acceptedclaims from inji
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:13.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    permittedAuthorizeScopes: []
                    acceptedClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    signature: <detached signature>
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the link-transaction response.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_accepted_claim
                            - invalid_permitted_scope
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:14.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    errors: []
      tags:
        - WALLET
      x-stoplight:
        id: j7cpnr17pe6vc
    parameters: []
  /linked-authorization/link-auth-code:
    post:
      summary: Link authorization code endpoint
      tags:
        - UI
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      code:
                        type: string
                        description: Authorization code. Required to obtain the ID token and / or access token from the /token endpoint.
                      redirectUri:
                        type: string
                        description: Client's validated redirect URI.
                      state:
                        type: string
                        description: 'The echoed state value, used to maintain state between the request and the callback'
                      nonce:
                        type: string
                        description: 'The echoed nonce value, if one was passed with the request. Clients must validate the value before proceeding.'
                  errors:
                    type:
                      - array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - invalid_link_code
                            - response_timeout
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:14.000Z'
                    response:
                      code: Ertert4334dfgdQW
                      redirectUri: 'https://fastlane.com/homepage'
                      nonce: 973eieljzng
                      state: eree2311
                    errors: []
      operationId: post-authorization-link-auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - transactionId
                    - linkedCode
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    linkedCode:
                      type: string
                      description: LINKED linkCode.
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:13.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    linkedCode: xl4cnYtLQkGRxUj
      description: |-
        Link authorization code endpoint is invoked from JS application.

        1. This is a Long polling request to IdP-service.
        2. validates the transactionId
        3. validates the linkCode if its LINKED.
        4. checks the cache to see if the auth-code is generated, if yes returns the response.
        5. If the auth-code is not yet generated, polling request waits for the configured time.
        6. On successful response, IdP-UI should redirect to the provided redirectUri and auth-code or errors.


        **Configuration to decide the wait interval**: mosip.idp.link-auth-code-deferred-response-timeout-secs
      parameters:
        - schema:
            type: string
          in: header
          name: oauth-details-hash
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction Id
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      x-stoplight:
        id: zwacxkndijlsf
    parameters: []
  /oauth/token:
    post:
      summary: Token Endpoint
      operationId: post-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                    description: |-
                      Identity token in JWT format. Will have the below claims in the payload.
                      <ul>
                      <li>iss</li>
                      <li>sub - (PSUT)</li>
                      <li>aud</li>
                      <li>exp</li>
                      <li>iat</li>
                      <li>auth_time</li>
                      <li>nonce</li>
                      <li>acr</li>
                      <li>at_hash</li>
                      </ul>
                  access_token:
                    type: string
                    description: The access token in JWT format. This token that will be used to call the UserInfo endpoint.
                  token_type:
                    type: string
                    default: Bearer
                    enum:
                      - Bearer
                    description: 'The type of the access token, set to Bearer'
                  expires_in:
                    type: number
                    format: duration
                    description: 'The lifetime of the access token, in seconds.'
                required:
                  - id_token
                  - access_token
                  - token_type
                  - expires_in
              examples:
                Example 1:
                  value:
                    id_token: eyJraWQiOiJ1aTdOZjdkU1EzcTcxd0hEejFQYXVRWG5hMnJ1TWs5dmE0N2tuZTNjYWhZIiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjpudWxsLCJzdWIiOiIyNTgwMDg2NDcxMDgzMDEzNjAzMjA2NDYwMDYwMDU4NDE3NTEiLCJhdWQiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiYWNyIjoibW9zaXA6aWRwOmFjcjpnZW5lcmF0ZWQtY29kZSIsImF1dGhfdGltZSI6MTY5ODYzMTQ1NiwiaXNzIjoiaHR0cHM6XC9cL2VzaWduZXQuY29sbGFiLm1vc2lwLm5ldFwvdjFcL2VzaWduZXQiLCJleHAiOjE2OTg2MzUwNjcsImlhdCI6MTY5ODYzMTQ2Nywibm9uY2UiOiI5NzNlaWVsanpuZyJ9.Vi7L3n30zE26as4w4piFZe2Qa6DkWYBddE5ktgfC7pr4HuBe_0QHhYz__YriK6GNQTEie0i4aPOOQoEvqVNtaSOLWltdmAfL864gPlnKsMRLeeqKIB98ETUodVWIBqZkfwyY9-EHczSwrrXxnPmuY_xSdZ6QFdWFB_lkq1othEnf6wPVSJD_HJxncptg7BowRCWYVExDvsOB1sA5qS-3eXb-ixg-WVOuFm1LZuJjvQb2p5IhBpFmokycNsSfiHGUuuITHU4S_DE3TuVD9ksC4LTGFEFGZQzBC--RpJ69QrZnd6STshMvVvqqVf9Ae2qQbgDChJmWEtWvfWpuT9rPMw
                    token_type: Bearer
                    access_token: eyJraWQiOiJ1aTdOZjdkU1EzcTcxd0hEejFQYXVRWG5hMnJ1TWs5dmE0N2tuZTNjYWhZIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyNTgwMDg2NDcxMDgzMDEzNjAzMjA2NDYwMDYwMDU4NDE3NTEiLCJhdWQiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiaXNzIjoiaHR0cHM6XC9cL2VzaWduZXQuY29sbGFiLm1vc2lwLm5ldFwvdjFcL2VzaWduZXQiLCJleHAiOjE2OTg2MzUwNjYsImlhdCI6MTY5ODYzMTQ2NiwiY2xpZW50X2lkIjoiV01YNXBPNmRZZENGUjNpYVZXR2NsVlBOeFROU0FERHYta1Y3VkJjbnp2WSJ9.Af2Y3cBNuDIV88Irw5iAFJzNOl8BEnoDXH9qO100mbW2La22gALrmbkDgwFH37wPizPObXCq92VIBPgLcw9IVFsVzJ-_48T8g1llbbwqNl-FoYtqC7u3Vcek84qcHkW7l_8lpqemvNaNJBN4ZUCag5efp2YJ2x3ANIl6LufiesL4zixemvzgIAT4-CistBdCY5K8gZp-G56pO99N88Hl1VUYdwrLrJmtztTRJCQubJDYOuSkZeNJaG5Ox_nX3O8vjiMAKDiz6jK6s296zbzo1AYu1wTRxnQ34YyOJyWRpFFjtNEup6Y_Zcv6teGcMxlHZjwgyZTXxt9zH8GfBWZ83Q
                    expires_in: 3600
          headers:
            Cache-Control:
              schema:
                type: string
                enum:
                  - no-store
            Pragma:
              schema:
                type: string
                enum:
                  - no-cache
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error code.
                    enum:
                      - invalid_transaction
                      - invalid_assertion
                      - invalid_redirect_uri
                      - invalid_input
                      - unknown_error
                      - invalid_request
                      - invalid_assertion_type
                  error_description:
                    type: string
                    description: Optional text providing additional information about the error that occurred.
                required:
                  - error
      description: |-
        Once the client / relying party application receives the authorization code through redirect, this OIDC complaint endpoint will be called from the relying party backend application to get the ID and access token.

        1. The only supported client authentication methods : <b>private_key_jwt</b>
        2. clientAssertion is a signed JWT with Clients private key, corresponding public key should be shared with IdP during the OIDC client registration process.
        3. clientAssertion JWT payload must be as below: 

        The JWT MUST contain the following REQUIRED Claim Values and MAY contain the additional OPTIONAL Claim Values:

        **iss**<span style="color:#FF0000">*</span> (Issuer): This MUST contain the client_id of the OAuth Client.

        **sub**<span style="color:#FF0000">*</span> (Subject): This MUST contain the client_id of the OAuth Client.

        **aud**<span style="color:#FF0000">*</span> (Audience): Value that identifies the authorization server as an intended audience. The authorization server MUST verify that it is an intended audience for the token. The audience SHOULD be the URL of the authorization server's token endpoint.

        **exp**<span style="color:#FF0000">*</span> (Expiration): Time on or after which the ID token MUST NOT be accepted for processing.

        **iat**<span style="color:#FF0000">*</span>: Time at which the JWT was issued.</p>

        **Note**: The Client Assertion JWT can contain other Claims. Any Claims used that are not understood WILL be ignored.</p>
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Authorization code grant type.
                  enum:
                    - authorization_code
                code:
                  type: string
                  description: 'Authorization code, sent as query param in the client''s redirect URI.'
                client_id:
                  type: string
                  description: Client Id of the OIDC client.
                client_assertion_type:
                  type: string
                  enum:
                    - 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  description: Type of the client assertion part of this request.
                client_assertion:
                  type: string
                  description: 'Private key signed JWT, This JWT payload structure is defined above as part of request description.'
                redirect_uri:
                  type: string
                  description: Valid client redirect_uri. Must be same as the one sent in the authorize call.
              required:
                - grant_type
                - code
                - client_assertion_type
                - client_assertion
                - redirect_uri
            examples:
              Example 1:
                value:
                  grant_type: authorization_code
                  code: tyemdnjdfornfedg
                  client_id: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv-kV7VBcnzvY
                  client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  client_assertion: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2OTg2MzE0NjAsIm5iZiI6MTY5ODYzMTQ2MCwiZXhwIjoxNjk4NjMxNTI1LCJqdGkiOiI1ZFFjaWhtb2lfQTlXMmlERGpYcDgiLCJzdWIiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiaXNzIjoiV01YNXBPNmRZZENGUjNpYVZXR2NsVlBOeFROU0FERHYta1Y3VkJjbnp2WSIsImF1ZCI6Imh0dHBzOi8vZXNpZ25ldC5jb2xsYWIubW9zaXAubmV0L3YxL2VzaWduZXQvb2F1dGgvdG9rZW4ifQ.G-OxPmb2wBq7R52PELNss9FCwvv_i2456FE4oag25BuZjwH6CgB8LDLmfCJdzeLGRuFp_MrKskGTkpsWI0RWLNtqZ7jvQTvSq8zQICusIFh9kcciWbkMsOZQqN91gPtdrn3WRS6xD7TxzwvrAeuqx4lTBbWNYTF2GQ3Zagq0t6ogOtPWg0wNioW3m11jWIdwooJ8jI2Z5oN772Lerrs1AXMnipLxQm4rdMM54taeHFrrXyxqFjoiq-bglrpHtCqeG6QFqhpQrRlIsLLoli8F1LU8Mu3Fw7ifCd6KEj9JNM_sPHjAy-JRg_dgjNdHL5tqtHzUsD5sSmLop33U4WH3Ow
                  redirect_uri: 'https://fastlane.com/homepage'
        description: ''
      tags:
        - OIDC
      x-stoplight:
        id: kebqcxwgyef6f
    parameters: []
  /oauth/v2/token:
    post:
      summary: Token Endpoint V2
      operationId: post-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                    description: |-
                      Identity token in JWT format. Will have the below claims in the payload.
                      <ul>
                      <li>iss</li>
                      <li>sub - (PSUT)</li>
                      <li>aud</li>
                      <li>exp</li>
                      <li>iat</li>
                      <li>auth_time</li>
                      <li>nonce</li>
                      <li>acr</li>
                      <li>at_hash</li>
                      </ul>

                      It is non-null only in OIDC flow. otherwise the id_token is not returned.
                  access_token:
                    type: string
                    description: The access token in JWT format. This token that will be used to call the UserInfo endpoint.
                  token_type:
                    type: string
                    default: Bearer
                    enum:
                      - Bearer
                    description: 'The type of the access token, set to Bearer'
                  expires_in:
                    type: number
                    format: duration
                    description: 'The lifetime of the access token, in seconds.'
                  c_nonce:
                    type: string
                    x-stoplight:
                      id: gu9s4qk67jx6i
                    description: JSON string containing a nonce to be used to create a proof of possession of key material when requesting a Credential.
                  c_nonce_expires_in:
                    type: number
                    x-stoplight:
                      id: hifmiel13v5c7
                    description: JSON integer denoting the lifetime in seconds of the c_nonce.
                required:
                  - access_token
                  - token_type
                  - expires_in
              examples:
                Example 1:
                  value:
                    token_type: Bearer
                    access_token: eyJraWQiOiJLT19tVHBfc1QwemxGRVVkX25UdGhmbzl0RTlTX21GQnJ6OTFwZjd5RFFBIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJQVlJtZkRwZ1pKcXZMTWZZcTZwcUItTDNZQTZXR3dYZmxiTlJpVWF6THJjIiwiYXVkIjoiaHR0cHM6XC9cL2VzaWduZXQtbW9jay5jb2xsYWIubW9zaXAubmV0XC92MVwvZXNpZ25ldFwvdmNpXC9jcmVkZW50aWFsIiwiY19ub25jZV9leHBpcmVzX2luIjo0MCwiY19ub25jZSI6IkN0OXJwUUZiOTZRU1N3Z0hBZkRPIiwic2NvcGUiOiJzYW1wbGVfdmNfbGRwIiwiaXNzIjoiaHR0cHM6XC9cL2VzaWduZXQtbW9jay5jb2xsYWIubW9zaXAubmV0XC92MVwvZXNpZ25ldCIsImV4cCI6MTY5ODYzNTczOSwiaWF0IjoxNjk4NjMyMTM5LCJjbGllbnRfaWQiOiI4OFZqdDM0YzVUd3oxb0oifQ.EAWkcaDUTMH1FcrXdsj4s-y9t8gVB1YBiIZ6VqZD3ZSGR3OrkIQUN2y8vbtvXJv8WAVV_0pvphFjIa9gVRP63_vdZipJ3h04vYcpyfTn50Yml-77uhB_JgHeQWZ0rnCQ1LQGSdSYKro9A1smevVCb1vyPf6QoQPumzKHJ9Jg7SojyhXON2sdIn94Xc5-gok-jGQEapbIBm3RhUEsFPGl7MjaMqBpodV-JOuEi0j_7VfxhLTXXoYZm_-h2aZCWJ9MQDtUC8TwNp-ap5f-O4lQx_M79jyn2mXa0NtoPPIQeffnCPq-uS43C0LZ9CQTfwIC4xV8-x2ema2fHWvtebSsmQ
                    expires_in: 3600
                    c_nonce: Ct9rpQFb96QSSwgHAfDO
                    c_nonce_expires_in: 40
          headers:
            Cache-Control:
              schema:
                type: string
                enum:
                  - no-store
            Pragma:
              schema:
                type: string
                enum:
                  - no-cache
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error code.
                    enum:
                      - invalid_transaction
                      - invalid_assertion
                      - invalid_redirect_uri
                      - invalid_input
                      - unknown_error
                      - invalid_request
                      - invalid_assertion_type
                      - invalid_pkce_code_verifier
                      - unsupported_pkce_challenge_method
                      - pkce_failed
                  error_description:
                    type: string
                    description: Optional text providing additional information about the error that occurred.
                required:
                  - error
      description: |-
        Once the client / relying party application receives the authorization code through redirect, this OIDC complaint endpoint will be called from the relying party backend application to get the ID and access token.

        1. The only supported client authentication methods : <b>private_key_jwt</b>
        2. clientAssertion is a signed JWT with Clients private key, corresponding public key should be shared with IdP during the OIDC client registration process.
        3. clientAssertion JWT payload must be as below: 

        The JWT MUST contain the following REQUIRED Claim Values and MAY contain the additional OPTIONAL Claim Values:

        **iss**<span style="color:#FF0000">*</span> (Issuer): This MUST contain the client_id of the OAuth Client.

        **sub**<span style="color:#FF0000">*</span> (Subject): This MUST contain the client_id of the OAuth Client.

        **aud**<span style="color:#FF0000">*</span> (Audience): Value that identifies the authorization server as an intended audience. The authorization server MUST verify that it is an intended audience for the token. The audience SHOULD be the URL of the authorization server's token endpoint.

        **exp**<span style="color:#FF0000">*</span> (Expiration): Time on or after which the ID token MUST NOT be accepted for processing.

        **iat**<span style="color:#FF0000">*</span>: Time at which the JWT was issued.</p>

        **Note**: The Client Assertion JWT can contain other Claims. Any Claims used that are not understood WILL be ignored.</p>
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Authorization code grant type.
                  enum:
                    - authorization_code
                code:
                  type: string
                  description: 'Authorization code, sent as query param in the client''s redirect URI.'
                client_id:
                  type: string
                  description: Client Id of the OIDC client.
                client_assertion_type:
                  type: string
                  enum:
                    - 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  description: Type of the client assertion part of this request.
                client_assertion:
                  type: string
                  description: 'Private key signed JWT, This JWT payload structure is defined above as part of request description.'
                redirect_uri:
                  type: string
                  description: Valid client redirect_uri. Must be same as the one sent in the authorize call.
                code_verifier:
                  type: string
                  x-stoplight:
                    id: ai156rqddkl3u
                  description: |-
                    A cryptographically random string that is used to correlate the
                          authorization request to the token request.
              required:
                - grant_type
                - code
                - client_assertion_type
                - client_assertion
                - redirect_uri
            examples:
              Example 1:
                value:
                  grant_type: authorization_code
                  code: tyemdnjdfornfedg
                  client_id: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv-kV7VBcnzvY
                  client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  client_assertion: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2OTg2MzE0NjAsIm5iZiI6MTY5ODYzMTQ2MCwiZXhwIjoxNjk4NjMxNTI1LCJqdGkiOiI1ZFFjaWhtb2lfQTlXMmlERGpYcDgiLCJzdWIiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiaXNzIjoiV01YNXBPNmRZZENGUjNpYVZXR2NsVlBOeFROU0FERHYta1Y3VkJjbnp2WSIsImF1ZCI6Imh0dHBzOi8vZXNpZ25ldC5jb2xsYWIubW9zaXAubmV0L3YxL2VzaWduZXQvb2F1dGgvdG9rZW4ifQ.G-OxPmb2wBq7R52PELNss9FCwvv_i2456FE4oag25BuZjwH6CgB8LDLmfCJdzeLGRuFp_MrKskGTkpsWI0RWLNtqZ7jvQTvSq8zQICusIFh9kcciWbkMsOZQqN91gPtdrn3WRS6xD7TxzwvrAeuqx4lTBbWNYTF2GQ3Zagq0t6ogOtPWg0wNioW3m11jWIdwooJ8jI2Z5oN772Lerrs1AXMnipLxQm4rdMM54taeHFrrXyxqFjoiq-bglrpHtCqeG6QFqhpQrRlIsLLoli8F1LU8Mu3Fw7ifCd6KEj9JNM_sPHjAy-JRg_dgjNdHL5tqtHzUsD5sSmLop33U4WH3Ow
                  redirect_uri: 'https://fastlane.com/homepage'
                  code_verifier: MN1Q0nNAKkqOu5EaNBKf2gYD4maYv9ZxLd-48N2_kTM
        description: ''
      tags:
        - OIDC
      x-stoplight:
        id: pbq47j4afl6k8
      parameters: []
    parameters: []
  /oidc/userinfo:
    get:
      summary: UserInfo Endpoint
      responses:
        '200':
          description: OK
          content:
            application/jwt:
              schema:
                type: string
                format: jwt
                description: 'The response is signed and then encrypted, with the result being a Nested JWT. Signed using the authentication system''s private key. Signed full JWT will then be encrypted using OIDC client''s public key.'
              examples:
                Example 1:
                  value: eyJraWQiOiJlU0dtNm5LcGppUHRJMnAzbVVWNHBWWm9nY0VHaExMV2dCNXNuUzNvbUNzIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyNTgwMDg2NDcxMDgzMDEzNjAzMjA2NDYwMDYwMDU4NDE3NTEiLCJhZGRyZXNzIjp7ImxvY2FsaXR5IjoiUmFiYXQgIn0sIm5hbWUiOiJhcnZpbmQiLCJwaG9uZV9udW1iZXIiOiI3ODY0ODQ2MzQzIiwiZW1haWwiOiJhcmF2aW5kaDIwOTBAZ21haWwuY29tIn0.WqkXaalFJu1nzAgoSmLKOHddX7_tkgcTEZRK8uedfl6rbNRZ7Lv0uayTT--3r4Z0Wlnjh1pUMreFvKd1yfirIf0LaPvuTBe5AVRRUMGPhPkSCq_ietytg75uNUH-Z91jLluh8mIZ5BlsGf_MfdkKD10pvzG9cWowWeWlD2hj-YNw05SUAdvZtHeN8ayMTaPOa-Jc0Sv3kXS0xM6Geizq5QCpIWaavZNw9GJF8GEizGK3klq3od9PfHKrh8XruUFM849iyAShIUTgr9mFlWzHVuTqbpcc2ZptLY_egOq8qKA5guBEplB92PlaxQQeyxRvMezZtDiRdzf5BSpM_1ok0g
        '401':
          description: Unauthorized
          headers:
            WWW-AUTHENTICATE:
              schema:
                type: string
                enum:
                  - invalid_token
                  - unknown_error
              description: 'Bearer error=invalid_token,  error_description=MOSIPIDP123: A user info request was made with an access token that was not recognized.'
      operationId: get-userinfo
      parameters: []
      description: |-
        Once the access token is received via the token endpoint, relying party backend application can call this OIDC compliant endpoint to request for the user claims.

        Consented user claims will be returned as a JWT. This JWT will be a nested JWT which is a signed using JWS and then encrypted using JWE. 


        **Example**: Assuming the below are the requested claims by the relying party

        name : { "essential" : true }

        phone: { "essential" : true }

        **Response 1**: When consent is provided for both name and phone number:

        { "name" : "John Doe", "phone" : "033456743" }

        **Response 2**: When consent is provided for only name:

        { "name" : "John Doe" }

        **Response 3**: When Claims are requested with claims_locales : "en fr"

        { "name#en" : "John Doe", "name#fr" : "Jean Doe", "phone" : "033456743" } 

        **Supported User Info Claims**
        <ul>
        <li>sub - Partner Specific User Token (PSUT)</li>
        <li>name</li>
        <li>address</li>
        <li>gender</li>
        <li>birthdate</li>
        <li>profile photo</li>
        <li>email</li>
        <li>phone</li>
        <li>locale</li>
        <li>Custom - individual_id (You share this claim as a system-level config and it can be UIN, perceptual VID or temporary VID)</li>
        </ul>
      tags:
        - OIDC
      security:
        - Authorization-access_token: []
      x-stoplight:
        id: wlrh8n3nkcsrq
    parameters: []
  /vci/credential:
    parameters: []
    post:
      summary: VC Issuance endpoint
      operationId: post-vci-credential
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  format:
                    type: string
                    x-stoplight:
                      id: l24rxq86ow6y3
                    description: JSON string denoting the format of the issued Credential.
                  credential:
                    type:
                      - object
                      - string
                    x-stoplight:
                      id: kd3w8s53woq5c
                    description: 'Contains issued Credential. MUST be present when acceptance_token is not returned. MAY be a JSON string or a JSON object, depending on the Credential format.'
                required:
                  - format
                  - credential
              examples:
                Example 1:
                  value:
                    format: ldp_vc
                    credential:
                      issuanceDate: '2023-10-30T06:17:28.025Z'
                      credentialSubject:
                        gender: Male
                        name: John Doe
                        id: 'did:jwk:eyJrdHkiOiJSU0EiLCJlIjoiQVFBQiIsInVzZSI6InNpZyIsImtpZCI6IkY1R0hPai1STHF0S19TSUtabmx4ckpoTFN4MFAyVlZsNFVzTXpuT1ByNW8iLCJhbGciOiJSUzI1NiIsIm4iOiJtYzdzbWdHd0N6ZzZ5WENoM2ZYc3hTc2ROZlFzM3BTZGdZZUstdnpnYWZCQkNBTnZ2YWxqeUJ2YTlYZzA5YWhLMG9KV0hZY2p3Rm5QeU5uX0dkSjJValZPRlJDbllZNWZvejUxbmt0NUJod2l1V1IteWpZN2NZaXI5MjAySlI2RldaNExpamVVNm54WUVrbnFxZ1B6LXZmU0pSa2M5b2t6VEJ4LW9qb0FaOWJTaUJqMm9XNzVsWkhrMlBoU0NkTDNtQzUyaVRkUWpra2NFNHY0ZVpzWVBrZVROSmlmWE1sQ1J3Mlg0X1N6d2N3YkNNWUJqWlhRUFJ1OXdudEJqd0NUOGZTaDJjZVlCdUs4YlViQXBLelhDSGotUnAwZHMyMDdtbEFhcnRlRURhMS1qbW5ZYWxxS2lfQ2tzU1ZuNEQyMThXOWZHSElYcEJlSXBTWjlHc3hHdXcifQ=='
                        email: john.doe@mail.com
                      id: 'urn:uuid:3978344f-8596-4c3a-a978-8fcaba3903c5'
                      proof:
                        type: RsaSignature2018
                        created: '2023-10-30T06:17:28Z'
                        proofPurpose: assertionMethod
                        verificationMethod: 'https://esignet-mock.collab.mosip.net/v1/esignet/oauth/.well-known/jwks.json'
                        jws: eyJ4NWMiOlsiTUlJRHZUQ0NBcVdnQXdJQkFnSUk1VHhveEYydjhRQXdEUVlKS29aSWh2Y05BUUVMQlFBd2R6RUxNQWtHQTFVRUJoTUNTVTR4Q3pBSkJnTlZCQWdNQWt0Qk1SSXdFQVlEVlFRSERBbENRVTVIUVV4UFVrVXhEVEFMQmdOVkJBb01CRWxKVkVJeEdqQVlCZ05WQkFzTUVVMVBVMGxRTFZSRlEwZ3RRMFZPVkVWU01Sd3dHZ1lEVlFRRERCTjNkM2N1Ylc5emFYQXVhVzhnS0ZKUFQxUXBNQjRYRFRJek1ETXlOVEV3TWpFeE1Wb1hEVEkyTURNeU5ERXdNakV4TVZvd2Z6RUxNQWtHQTFVRUJoTUNTVTR4Q3pBSkJnTlZCQWdNQWt0Qk1SSXdFQVlEVlFRSERBbENRVTVIUVV4UFVrVXhEVEFMQmdOVkJBb01CRWxKVkVJeEdqQVlCZ05WQkFzTUVVMVBVMGxRTFZSRlEwZ3RRMFZPVkVWU01TUXdJZ1lEVlFRRERCdDNkM2N1Ylc5emFYQXVhVzhnS0U5SlJFTmZVMFZTVmtsRFJTa3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDeGJpYUt3M082dlI0SHczaExDc3FiQ1czRkc4UEthQ0RabDZNTUlEblVlbCtJa1FDMmxscTgrWlRMcmE3S1ViT294UHVxVzhwNDFmdVRqSlNzK0x3aEpRV3J2S2htbDB5THRSVkJCOUVTR2l5NVFYaWNSODBxVWRScjN3eVhRZkJGTFFEN1lRb1l4MUZMTUxaR21IYmd2N3Rnc3hxY2k1NEFjTTZmb1BXaUd0Z2NZbjJRenRsbTRjZ3FuWVNmcThDc3dtZ3o5N052ckxDRXF3bFhRZkpGQVZlRFF2SXFxNk00dkNkcXFLaldtNjlRVjlCUXUrczdCYkpFbUtGRDVtRTRhdWFwWW4zbWZLeXJWaGFGUGpFUW5iMHA0V3dGR3YzYTROTEFPRXVqVkJlVjUzZjJmdUZqSUxzZnBMK3MzRERRYUlYbEJKa3p3dWdjdWZ5Z1MzRm5BZ01CQUFHalJUQkRNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUV3SFFZRFZSME9CQllFRkg4dXN2ME52ekZHaWx4Sko2dExBYkVLSUJMQk1BNEdBMVVkRHdFQi93UUVBd0lDaERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWQ2ZVJmTzFZbHN2YXRMSktWZGVNcStzclhlYjNTblZJM0ZQSWlQa3d2STNsM1pmUVQ1ZzE0NWc2ajEzQisvOFZUNGFWZXBDZU5PbWNIczc3Y2g0OWxIUmg4anF3UXlqUFBsc1NmcW5Kd0JGUmRvNStkRnB5elZNeFdDUzBFRWJqb3RkZ2pvci9YaVVoRmFGMkhkZThyeHNnZWNmaUFZZS9nWnFZZjYzOFRxRi9RTnFCaTRhbitGQmNtT0FDalR6THE5Z01tSnJYa2h3V3V5dm5Sc0hKM2g2ZXd0b0RMN2gycm5QK2hBT1o3ckd1SEhDaVVXayt6eUcxdjdKT0NwSUJ2TEJyalpVbzNDRmxacEs3NERkbHBSVU1nK3JvcVdDNnFkTmZuemc5dFZBb1ZlVy9uUHAweit1QUtmb2w2NENlRUJmUmsrUXV2SmRyKzhCL1JaOHp4QT09Il0sIng1dCNTMjU2IjoiZkxnNTQ5dGFabmViUGZ6OTVlRzhyZXZuX2lSU2luMTFKZGxteFhOaUE5RSIsImtpZCI6IktPX21UcF9zVDB6bEZFVWRfblR0aGZvOXRFOVNfbUZCcno5MXBmN3lEUUEiLCJhbGciOiJSUzI1NiJ9..pZkf21YoT2mqzYlEJy9fkBartMTvEMMOUZPXw4-HIc6DeDUTqAMcRSkEfP1_ozvBE1ukxzqM2_IYpdQCVbYXEsCQLAXUmDQTfbdf8GImWBkRV7hXpCAJCN14A69trZCLvsW0jhIkIoSwPSszGk4MZ9rW7fBRpG9kbCF4nWajP5nRsPdC6tSckHWlHAWus0IhsYhSh85y2VYtBHTZ9g_NaB5S2pSp4MR_BBFdlpSfrgoepr7D9EY1hhU-b8vbjve9QnGSesqfPXUOKMwNA5UZ7tUYStWX8y9-19wwC3e_FjKhnKXMZrlAhCOLSL5O81r3ZWI3bpfOufHFZIZ7_gdvnQ
                      type:
                        - VerifiableCredential
                        - Person
                      '@context':
                        - 'https://www.w3.org/2018/credentials/v1'
                        - 'https://schema.org/'
                      issuer: 'did:example:123456789'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    x-stoplight:
                      id: jc2m14qtfvxhe
                    enum:
                      - invalid_vc_format
                      - invalid_proof
                      - invalid_request
                      - unknown_error
                      - invalid_scope
                      - proof_header_invalid_key
                      - vc_issuance_failed
                      - unsupported_credential_format
                      - unsupported_credential_type
                      - proof_invalid_nonce
                  error_description:
                    type: string
                    x-stoplight:
                      id: wp66ehahr6w31
                  c_nonce:
                    type: string
                    x-stoplight:
                      id: i5tln0gl7w7ul
                    description: This will have the value only when the error is "proof_invalid_nonce".
                  c_nonce_expires_in:
                    type: integer
                    x-stoplight:
                      id: 8rdu3yxwc0vi2
                    description: This will have the value only when the error is "proof_invalid_nonce".
                required:
                  - error
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    x-stoplight:
                      id: kclhgnffzwrm1
                    enum:
                      - invalid_token
                  error_description:
                    type: string
                    x-stoplight:
                      id: fq307i4xime1j
                required:
                  - error
      x-stoplight:
        id: kvnv6yteyqtw0
      description: 'Once the access token is received via the token endpoint, Wallet should invoke this endpoint to get the verifiable credential.'
      security:
        - Authorization-access_token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                format:
                  x-stoplight:
                    id: 70by6bj25olxa
                  description: Format of the Credential to be issued.
                  enum:
                    - ldp_vc
                    - jwt_vc_json
                    - jwt_vc_json-ld
                proof:
                  $ref: '#/components/schemas/CredentialProof'
                  x-stoplight:
                    id: 8kvzny01u2qle
                  description: JSON object containing proof of possession of the key material the issued Credential shall be bound to.
                credential_definition:
                  $ref: '#/components/schemas/CredentialDefinition'
                  x-stoplight:
                    id: ec6fs1b3ydny6
                  description: |-
                    JSON object containing (and isolating) the detailed description of the credential type.
                         * This object MUST be processed using full JSON-LD processing.
                         If it consists of the following sub claims:
                         * @context: REQUIRED. JSON array
              required:
                - format
                - proof
                - credential_definition
            examples:
              Example 1:
                value:
                  format: ldp_vc
                  credential_definition:
                    type:
                      - VerifiableCredential
                      - SampleVerifiableCredential_ldp
                    '@context':
                      - 'https://www.w3.org/2018/credentials/v1'
                  proof:
                    proof_type: jwt
                    jwt: eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IlJTMjU2IiwiandrIjp7Imt0eSI6IlJTQSIsIm4iOiJtYzdzbWdHd0N6ZzZ5WENoM2ZYc3hTc2ROZlFzM3BTZGdZZUstdnpnYWZCQkNBTnZ2YWxqeUJ2YTlYZzA5YWhLMG9KV0hZY2p3Rm5QeU5uX0dkSjJValZPRlJDbllZNWZvejUxbmt0NUJod2l1V1IteWpZN2NZaXI5MjAySlI2RldaNExpamVVNm54WUVrbnFxZ1B6LXZmU0pSa2M5b2t6VEJ4LW9qb0FaOWJTaUJqMm9XNzVsWkhrMlBoU0NkTDNtQzUyaVRkUWpra2NFNHY0ZVpzWVBrZVROSmlmWE1sQ1J3Mlg0X1N6d2N3YkNNWUJqWlhRUFJ1OXdudEJqd0NUOGZTaDJjZVlCdUs4YlViQXBLelhDSGotUnAwZHMyMDdtbEFhcnRlRURhMS1qbW5ZYWxxS2lfQ2tzU1ZuNEQyMThXOWZHSElYcEJlSXBTWjlHc3hHdXciLCJlIjoiQVFBQiIsImtpZCI6IkY1R0hPai1STHF0S19TSUtabmx4ckpoTFN4MFAyVlZsNFVzTXpuT1ByNW8iLCJhbGciOiJSUzI1NiIsInVzZSI6InNpZyJ9fQ.eyJpYXQiOjE2OTg2NDY2NDMsIm5iZiI6MTY5ODY0NjY0MywiZXhwIjoxNjk4NjQ3MjQ4LCJqdGkiOiJPR0J3RjRCNGNsSWJzWUxGT3ZWM2IiLCJhdWQiOiJodHRwczovL2VzaWduZXQtbW9jay5jb2xsYWIubW9zaXAubmV0L3YxL2VzaWduZXQiLCJub25jZSI6IllXZUluR2MwdVljcHQ1TlZLcTVYIiwiaXNzIjoiODhWanQzNGM1VHd6MW9KIn0.MMVBHdIpvmRwBw4-MY6LaE4p-k5NwCRcwktKCK3MvNiJ5LNqx_Z4lJ23x359IxFtpMNbH0xnC0ajU-mYLJRJ7WsbKWemENmHp3e7nRDzDlDufu92vzh_dmHvxmcxQQKEEr_xH5c8vypUANsAbg8Ltas6eoe5jFoSrS-Oi4TNplw8aoS4cdH16ezEdb1RtluSKi5tajM9eS2reREj3sFXyVphxIxCUD6VbwuvByPPOWhSVf4bW_pCAoztiRJ9Fc_WXR7XLTIn3i46QczopaBIp8xPwEbBE_cl3Lo9etA0oLOxnRz6bzk5sa-ZtvVnsW4vOusy3mzSjVe10oHxWgw2CQ
      tags:
        - VCI
  /binding/binding-otp:
    post:
      summary: Send Binding OTP Endpoint
      operationId: post-binding-otp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTIme:
                    type: string
                  response:
                    type: object
                    properties:
                      maskedEmail:
                        type: string
                        description: Masked email id of the individualId user.
                      maskedMobile:
                        type: string
                        description: Masked mobile number of the individualId user.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_otp_channel
                            - unknown_error
                            - invalid_individual_id
                            - send_otp_failed
                        errorMessage:
                          type: string
                required:
                  - responseTIme
              examples:
                Example 1:
                  value:
                    responseTIme: '2023-09-22T08:01:16.000Z'
                    response:
                      maskedEmail: XXdXXaXXhXXkX@gmail.com
                      maskedMobile: XXXXXXX357934
                    errors: []
      parameters:
        - schema:
            type: string
          in: header
          name: partner-api-key
          description: 'API key of the binding partner, this will be passed to binder implementation to interact with authentication system.'
        - schema:
            type: string
          in: header
          name: partner-id
          description: 'Binding partner Identifier, this will be passed to binder implementation to interact with authentication system.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - individualId
                    - otpChannels
                  properties:
                    individualId:
                      type: string
                      description: User Id (UIN/VID)
                    otpChannels:
                      type: array
                      description: Channels to which OTP should be delivered.
                      items:
                        type: string
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:13.000Z'
                  request:
                    individualId: '24554655645'
                    otpChannels:
                      - sms
                      - email
      description: Send wallet binding OTP endpoint is invoked by Mimoto server.
      security:
        - Authorization-send_binding_otp: []
      tags:
        - binding-service
      x-stoplight:
        id: jcg0sh70akbht
    parameters: []
  /binding/wallet-binding:
    post:
      summary: Wallet Binding Endpoint
      operationId: post-wallet-binding
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      walletUserId:
                        type: string
                        description: Unique identifier given to public-key and partner specific userId mapping.
                      certificate:
                        type: string
                        description: Key binder signed certificate.
                      expireDateTime:
                        type: string
                        description: Expire date time of the signed certificate.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - unsupported_challenge_format
                            - key_binding_failed
                            - invalid_public_key
                            - invalid_auth_challenge
                            - duplicate_public_key
                        errorMessage:
                          type: string
                required:
                  - responseTime
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:16.000Z'
                    response:
                      walletUserId: <walletUserId>
                      certificate: <Server signed Certificate>
                      expireDateTime: <Certificate expire datetime>
                    errors: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - individualId
                    - authFactorType
                    - format
                    - challengeList
                    - publicKey
                  properties:
                    individualId:
                      type: string
                      description: User Id (UIN/VID).
                    authFactorType:
                      type: string
                      description: Auth factor type to be binded for the provided key.
                    format:
                      type: string
                      description: 'Format of the auth factor type supported in the wallet app.This is not stored, this value is only validated to check if its a supported format in the keybinder implementation.'
                    challengeList:
                      type: array
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                    publicKey:
                      type: object
                      description: key to be binded in JWK format.
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:15.000Z'
                  request:
                    individualId: '24554655645'
                    authFactorType: WLA
                    format: jwt
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
                    publicKey:
                      kty: RSA
                      e: AQAB
                      use: sig
                      alg: RS256
                      'n': sfIT-5o9ZSr8lJuBsRTzodJYvEgNeIayJRd9WLip6tU9NZ_5VvVS_jq5STza9WELs127xH7e6rgGJ31B6VLBbrRRgLm2sz2_0s1p9ilRSrae0P3cJHK7aIgY0c-E1SwbzrKmV4FQKzARfHG-M-DmAD8V38LclxZycAu7gXWFVS7RPW_NpmjtVGDpnx0pKYgfJb8QgzGEbSKUGB39GRWNA2ij-6tEPQQwYSO5akyFup-bVaJrKKaIWn37iiB9T7umXnmzp-3HuP1SQp6cPQLkeWp64lozxTq4To12gbietIKyfJto7r9sra1wRyq0XNKhQvswLmuQcORJKhEMJWVCpQ
      description: |-
        Wallet binding endpoint is invoked by Mimoto server.

        1. This request is invoked from wallet-app with authChallenge.
        2. Integrated keybinder implementation validates the authChallenge.
        3. Public key registry is updated with the key binding details for the provided individualId.
        4. Binded walletUserId (WUID) is returned with keybinder signed certificate. 

        **Note**: Binding entry uniqueness is combination of these 3 values -> (PSUT, public-key, auth-factor-type)
      parameters:
        - schema:
            type: string
          in: header
          name: partner-api-key
          description: 'API key of the Binding partner, this will be passed to binder implementation to interact with authentication system.'
        - schema:
            type: string
          in: header
          name: partner-id
          description: 'Binding partner identifier, this will be passed to binder implementation to interact with authentication system.'
      security:
        - Authorization-wallet_binding: []
      tags:
        - binding-service
      x-stoplight:
        id: 5l58izm82kpcc
    parameters: []
  /.well-known/jwks.json:
    get:
      summary: JSON Web Key Set Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kid:
                          type: string
                          description: The certificate's Key ID
                        use:
                          type: string
                          description: 'How the Key is used. Valid value: sig'
                          enum:
                            - sig
                        kty:
                          type: string
                          description: 'Cryptographic algorithm family for the certificate''s Key pair. Valid value: RSA'
                          enum:
                            - RSA
                        e:
                          type: string
                          description: RSA Key value (exponent) for Key blinding
                        'n':
                          type: string
                          description: RSA modulus value
                        x5t#S256:
                          type: string
                          x-stoplight:
                            id: 52n5251u1kfap
                          description: SHA-256 thumbprint of the certificate.
                        x5c:
                          type: array
                          description: Certificate to validate the Oauth server trust.
                          items:
                            x-stoplight:
                              id: l0l1kpf2b9jcn
                            type: string
                        exp:
                          type: string
                          x-stoplight:
                            id: q4o4nzqtvb09p
                          description: Expire datetime of the key. Given in ISO format.
                          format: date-time
                          example: '2026-02-05T13:43:07.979Z'
                      required:
                        - kid
                        - use
                        - kty
                        - e
                        - 'n'
                        - x5t#S256
                        - x5c
                        - exp
              examples:
                Example 1:
                  value:
                    keys:
                      - kty: RSA
                        x5t#S256: Apdg6S6RmjkiBjvEUYYCa-KF-yrJbl6x1wzKrc4smt0
                        e: AQAB
                        use: sig
                        kid: GTERCOmvD5PlZ65lo2Na-4Udc2xgA6EkaHuEsnMevRA
                        x5c:
                          - MIIDvTCCAqWgAwIBAgIIvSVFZ0ayWuswDQYJKoZIhvcNAQELBQAwdzELMAkGA1UEBhMCSU4xCzAJBgNVBAgMAktBMRIwEAYDVQQHDAlCQU5HQUxPUkUxDTALBgNVBAoMBElJVEIxGjAYBgNVBAsMEU1PU0lQLVRFQ0gtQ0VOVEVSMRwwGgYDVQQDDBN3d3cubW9zaXAuaW8gKFJPT1QpMB4XDTIzMDcxNDA0MTI0NFoXDTI2MDcxMzA0MTI0NFowfzELMAkGA1UEBhMCSU4xCzAJBgNVBAgMAktBMRIwEAYDVQQHDAlCQU5HQUxPUkUxDTALBgNVBAoMBElJVEIxGjAYBgNVBAsMEU1PU0lQLVRFQ0gtQ0VOVEVSMSQwIgYDVQQDDBt3d3cubW9zaXAuaW8gKE9JRENfU0VSVklDRSkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCupTNBR7kbfC0V8FBOnVgjKcgISV4BebWsmQNvTiM4So4kgOU8Tcg1ER+Qk5+/v6c3NGZ8ZuAF8oxEW75xs6ltN2z6NIA3Q9fE6pYJXf9ixPsOzZsn5bjYMJw8C1NmE5UiYfzQCARh8dXY+8eA9WigoDzCFIWeAdb33X4S86yiDsIuY1V8mxA4PWER929Ssg/Nnr04ZHdFFbctPLfnG1xJMhelTc+v0H95FwY5CotKfipFy6wUW1ZEJL1uDjnsfBrgNH1HbTvYOzRNyW/TtQFI74xShRoThYs9gGcHPENhof8KSPRVwRztP7AWFJqAKhAnXGmrYyDObUZWa2LczuoLAgMBAAGjRTBDMBIGA1UdEwEB/wQIMAYBAf8CAQEwHQYDVR0OBBYEFKzJuyUw9RQffaJaMNvPMGU5bSRtMA4GA1UdDwEB/wQEAwIChDANBgkqhkiG9w0BAQsFAAOCAQEAmGEzeokV0q6sNkpbslncnFi7Map33bGv94VvWPgA2fFqc1OQq/fHYar8S8hgQeqQeyFF8RQPa8Ga/RJfA6a0VS280nO3Q/ITHfuGz1g6QNxcfE1d5OOdQwe1sdAbc53kAX7ZasTEuam7II1H/O0wftFWU369mAWVfmp/8DCtF7I6ir84SnPyNFxINhggSLxqPLGuZDK8xbz0DsB2eBklf+B+dwUM48CfwQ3sAFBrU8lxqrUXMK/fKV+BZLyec7+7G1J8upxUGDvVgWoA7jfStA8jdqWNffi64+1GU+KtVha7PjnyabkmLwmm8TSVUHewXa1P7PiuzKfPHltoijGQyw==
                        exp: 1783915964
                        'n': rqUzQUe5G3wtFfBQTp1YIynICEleAXm1rJkDb04jOEqOJIDlPE3INREfkJOfv7-nNzRmfGbgBfKMRFu-cbOpbTds-jSAN0PXxOqWCV3_YsT7Ds2bJ-W42DCcPAtTZhOVImH80AgEYfHV2PvHgPVooKA8whSFngHW991-EvOsog7CLmNVfJsQOD1hEfdvUrIPzZ69OGR3RRW3LTy35xtcSTIXpU3Pr9B_eRcGOQqLSn4qRcusFFtWRCS9bg457Hwa4DR9R2072Ds0Tclv07UBSO-MUoUaE4WLPYBnBzxDYaH_Ckj0VcEc7T-wFhSagCoQJ1xpq2Mgzm1GVmti3M7qCw
                      - kty: RSA
                        x5t#S256: 2r6FoSf1IrA1Mn1hTtO50Le2SeiDO3dxT24oeAPCISA
                        e: AQAB
                        use: sig
                        kid: R3V2vggI0S-98bJabimOEpZIE0vPkk2uhxRzmPsqX4w
                        x5c:
                          - MIIDrTCCApWgAwIBAgIIi2nvBziQ2uMwDQYJKoZIhvcNAQELBQAwcDELMAkGA1UEBhMCSU4xCzAJBgNVBAgMAktBMRIwEAYDVQQHDAlCQU5HQUxPUkUxDTALBgNVBAoMBElJVEIxGjAYBgNVBAsMEU1PU0lQLVRFQ0gtQ0VOVEVSMRUwEwYDVQQDDAx3d3cubW9zaXAuaW8wHhcNMjMwNzEzMTU1OTQwWhcNMjYwNzEyMTU1OTQwWjB2MQswCQYDVQQGEwJJTjELMAkGA1UECAwCS0ExEjAQBgNVBAcMCUJBTkdBTE9SRTENMAsGA1UECgwESUlUQjEgMB4GA1UECwwXTU9TSVAtVEVDSC1DRU5URVIgKElEQSkxFTATBgNVBAMMDHd3dy5tb3NpcC5pbzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALGOdFQsHmCelxq8ZdJG0DbGU7dV8MJhuCi8KYdOQpXgzd2qUWY7V31OVlyTFs+YWHDR5KRkfw7pUAI+jswMWC32qn2R+BsOzMs16tZ8C3sVIpkUeZ8XhIBIugVkXMpuIbkoZ7CBcm2zetRVRdNGQC5Vdi5vZnyjsQv7ULiDAkWtOibaeDjprj0lHxaDffmWPukcBBpyOaAVLyk98hUbgDwHxBfnn2edjkDlYt07VVU+EWQoolE1MQvn8kgDN+kSicecJ8IBpJBs8i9MJDor2+PgC63lAgb6vr2/bXyswlF8V4UGQHSrGgFAxIMc6PlouagwhiwOLXyAMiNJa/8N5ccCAwEAAaNFMEMwEgYDVR0TAQH/BAgwBgEB/wIBATAdBgNVHQ4EFgQUAjl/vGghgtS+VWEU0ozokioAHxQwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQAXCpz+2p93DNR8G/XtjmZAB62r6aYWMhrRPM8BwBvfZ5z9LNLhhxC1K4V5JFE5yX2HtcHiVBFq8bJitGgDZH+3QEj2yLK5donfIEcQxX+h3QqVmkOTkphyAOydT+fMFKqWMg9zfqwD3v3rASP9/XkqubjqaE2g8BYlJGue3S26TkjBCXsuA42hnk34YkmX3kxhn3irqxBW4JcZgqj2tVy57MSp3m8BY9DzL24QCud7FHzzg0mos+Pb1FdGU/5Lmcbu9UAgBEvThyWMhOWKz0Sr2XJZtNtghBfzQ/ed/dS4o43xPHe9Sx6hCYIfR4gc/ppYUUv+yGrTH5ecPVauc8+8
                        exp: 1783871980
                        'n': sY50VCweYJ6XGrxl0kbQNsZTt1XwwmG4KLwph05CleDN3apRZjtXfU5WXJMWz5hYcNHkpGR_DulQAj6OzAxYLfaqfZH4Gw7MyzXq1nwLexUimRR5nxeEgEi6BWRcym4huShnsIFybbN61FVF00ZALlV2Lm9mfKOxC_tQuIMCRa06Jtp4OOmuPSUfFoN9-ZY-6RwEGnI5oBUvKT3yFRuAPAfEF-efZ52OQOVi3TtVVT4RZCiiUTUxC-fySAM36RKJx5wnwgGkkGzyL0wkOivb4-ALreUCBvq-vb9tfKzCUXxXhQZAdKsaAUDEgxzo-Wi5qDCGLA4tfIAyI0lr_w3lxw
      operationId: get-certs
      description: Endpoint to fetch all the public keys of the e-Signet server. Returns public key set in the JWKS format.
      x-stoplight:
        id: 6nmwt8lpyegxb
    parameters: []
  /.well-known/openid-configuration:
    get:
      summary: Configuration Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    description: URL using the https scheme with no query or fragment component that the RP asserts as its Issuer Identifier. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
                  authorization_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Authorization Endpoint.
                  token_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Token Endpoint.
                  userinfo_endpoint:
                    type: string
                    description: URL of the OP's UserInfo Endpoint.
                  jwks_uri:
                    type: string
                    description: 'URL of the OP''s JSON Web Key Set [JWK] document.'
                  registration_endpoint:
                    type: string
                    description: URL of Client Registration Endpoint.
                  scopes_supported:
                    type: array
                    description: 'JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.'
                    enum:
                      - openid
                    items: {}
                  response_types_supported:
                    type: array
                    description: JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.
                    enum:
                      - code
                    items: {}
                  acr_values_supported:
                    type: array
                    description: JSON array containing a list of the Authentication Context Class References that IDP supports.
                    items: {}
                  userinfo_signing_alg_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWS [JWS] signing algorithms.'
                    items: {}
                  userinfo_encryption_alg_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWE [JWE] encryption algorithms.'
                    items: {}
                  userinfo_encryption_enc_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT.'
                    items: {}
                  token_endpoint_auth_methods_supported:
                    type: array
                    description: JSON array containing a list of Client Authentication methods supported by this Token Endpoint.
                    enum:
                      - private_key_jwt
                    items: {}
                  display_values_supported:
                    type: array
                    description: JSON array containing a list of the display parameter values that the OpenID Provider supports.
                    items: {}
                  claim_types_supported:
                    type: array
                    description: JSON array containing a list of the Claim Types that the OpenID Provider supports.
                    enum:
                      - normal
                      - aggregated
                      - distributed
                    items: {}
                  claims_supported:
                    type: array
                    description: JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for.
                    items:
                      type: string
                  claims_locales_supported:
                    type: array
                    description: Languages and scripts supported for values in Claims being returned.
                    items:
                      type: string
                  ui_locales_supported:
                    type: array
                    description: Languages and scripts supported for the user interface.
                    items:
                      type: string
                  response_modes_supported:
                    type: array
                    description: Mechanism to be used for returning parameters from the Authorization Endpoint.
                    items:
                      type: string
                      enum:
                        - query
                  token_endpoint_auth_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                      enum:
                        - RS256
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                      enum:
                        - RS256
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - userinfo_endpoint
                  - jwks_uri
                  - registration_endpoint
                  - scopes_supported
                  - response_types_supported
              examples:
                Example 1:
                  value:
                    issuer: 'https://esignet.collab.mosip.net'
                    authorization_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/authorize'
                    token_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/oauth/token'
                    userinfo_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/oidc/userinfo'
                    scopes_supported:
                      - profile
                      - email
                      - phone
                    response_types_supported:
                      - code
                    response_modes_supported:
                      - query
                    token_endpoint_auth_methods_supported:
                      - private_key_jwt
                    token_endpoint_auth_signing_alg_values_supported:
                      - RS256
                    userinfo_signing_alg_values_supported:
                      - RS256
                    userinfo_encryption_alg_values_supported:
                      - RSAXXXXX
                    userinfo_encryption_enc_values_supported:
                      - A128GCM
                    id_token_signing_alg_values_supported:
                      - RS256
                    claim_types_supported:
                      - normal
                    claims_parameter_supported: true
                    display_values_supported:
                      - page
                      - popup
                      - touch
                      - wap
                    subject_types_supported:
                      - pairwise
                    claims_supported:
                      - name
                      - picture
                      - gender
                      - birthdate
                      - address
                      - email
                      - phone_number
                    acr_values_supported:
                      - 'mosip:idp:acr:static-code'
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:linked-wallet'
                      - 'mosip:idp:acr:biometrics'
                    request_parameter_supported: false
      operationId: get-.well-known-openid-configuration
      description: |-
        Open ID Connect dynamic provider discovery is not supported currently, this endpoint is only for facilitating the OIDC provider details in a standard way.

        **Reference**: https://openid.net/specs/openid-connect-discovery-1_0.html
      x-stoplight:
        id: fu84pt55lt5b1
    parameters: []
  /.well-known/openid-credential-issuer:
    get:
      summary: VC Issuer metadata Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential_issuer:
                    type: string
                    x-stoplight:
                      id: 3d35d9ucnuae8
                    description: 'The Credential Issuer''s identifier,'
                  credential_endpoint:
                    type: string
                    x-stoplight:
                      id: 4r7e4lex02cfm
                    description: URL of the Credential Issuer's Credential Endpoint
                  credentials_supported:
                    type: array
                    x-stoplight:
                      id: 5vokqtcbeot3f
                    description: ' JSON array containing a list of JSON objects, each of them representing metadata about a separate credential type that the Credential Issuer can issue. '
                    items:
                      x-stoplight:
                        id: 7y3ehgislm4bm
                      type: object
                      properties:
                        format:
                          type: string
                          x-stoplight:
                            id: 61byed7r6dgc6
                        scope:
                          type: string
                          x-stoplight:
                            id: 2mpjh4hux3wpk
                        cryptographic_binding_methods_supported:
                          type: string
                          x-stoplight:
                            id: zrtfp8aq0szqa
                        proof_types_supported:
                          type: string
                          x-stoplight:
                            id: t038q7eyq2bmy
                        display:
                          type: string
                          x-stoplight:
                            id: lrpdh42d3b77z
                  display:
                    type: array
                    description: ' An array of objects, where each object contains display properties of a Credential Issuer for a certain language'
                    x-stoplight:
                      id: haamvwc0g4ysb
                    items:
                      x-stoplight:
                        id: k8i83xjujdxqd
                      type: object
                required:
                  - credential_issuer
                  - credential_endpoint
                  - credentials_supported
                  - display
              examples:
                Example 1:
                  value:
                    credential_issuer: 'https://esignet.collab.mosip.net'
                    credential_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/vci/credential'
                    credentials_supported:
                      - format: ldp_vc
                        id: SampleVerifiableCredential_ldp
                        scope: sample_vc_ldp
                        cryptographic_binding_methods_supported:
                          - 'did:jwk'
                        cryptographic_suites_supported:
                          - RsaSignature2018
                        proof_types_supported:
                          - jwt
                        credential_definition:
                          type:
                            - VerifiableCredential
                          credentialSubject:
                            name:
                              display:
                                - name: Given Name
                                  locale: en
                            age:
                              display:
                                - name: Age
                                  locale: en
                        display:
                          - name: Sample Verifiable Credential by e-Signet
                            locale: en
                            logo:
                              url: 'https://esignet.collab.mosip.net/logo.png'
                              alt_text: a square logo of a MOSIP
                            background_color: '#12107c'
                            text_color: '#FFFFFF'
                    display:
                      - name: MOSIP
                        locale: en
      operationId: get-.well-known-openid-configuration
      description: |-
        Open endpoint to provide VC issuer's metadata

        **Reference**: https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html#name-credential-issuer-metadata
      x-stoplight:
        id: xbr6pnm6w4n00
    parameters: []
  /oauth/introspect:
    get:
      summary: Introspect Endpoint (Draft)
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
                required:
                  - error
                  - error_description
      operationId: get-introspect
      description: |-
        This endpoint takes an access token or ID token and returns a boolean that indicates whether it is active. If the token is active, additional data about the token is also returned. If the token is invalid, expired, or revoked, it is considered inactive.

        **Reference**: https://www.rfc-editor.org/rfc/rfc7662.html
      parameters:
        - schema:
            type: string
          in: query
          name: token
          description: An access token or ID token
          required: true
        - schema:
            type: string
            enum:
              - access_token
              - id_token
          in: query
          name: token_type_hint
          description: 'Indicates the type of token being passed. Valid values: access_token, id_token'
          required: true
      security:
        - Authorization-Bearer: []
      x-stoplight:
        id: fhgt459mt6d40
    parameters: []
components:
  schemas:
    Claim:
      title: Claim
      x-stoplight:
        id: 7s918r52m5f13
      type: object
      description: |
        The userinfo and id_token members of the claims request both are JSON object. if null, Indicates that this Claim is being requested as Voluntary Claim.

        Note: Unknown claim names either in userinfo or id_token are ignored.
      properties:
        userinfo:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/ClaimDetail'
            given_name:
              $ref: '#/components/schemas/ClaimDetail'
            email:
              $ref: '#/components/schemas/ClaimDetail'
            gender:
              $ref: '#/components/schemas/ClaimDetail'
            birthdate:
              $ref: '#/components/schemas/ClaimDetail'
            phone_number:
              $ref: '#/components/schemas/ClaimDetail'
            profile_photo:
              $ref: '#/components/schemas/ClaimDetail'
            address:
              $ref: '#/components/schemas/ClaimDetail'
            locale:
              $ref: '#/components/schemas/ClaimDetail'
            individual_id:
              $ref: '#/components/schemas/ClaimDetail'
        id_token:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/ClaimDetail'
            acrs:
              $ref: '#/components/schemas/ClaimDetail'
        locales:
          type: array
          items:
            type: string
    ClaimDetail:
      title: ClaimDetail
      x-stoplight:
        id: xacytafcm9phj
      type: object
      properties:
        essential:
          type: boolean
          description: |
            Indicates whether the Claim being requested is an Essential Claim. If the value is true, this indicates that the Claim is an Essential Claim. The default is false.
        value:
          type: string
          description: |-
            Requests that the Claim be returned with a particular value. For instance the Claim request.

            "sub": {"value": "248289761001"} can be used to specify that the request apply to the End-User with Subject Identifier 248289761001.
        values:
          type: array
          description: 'Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference.'
          items:
            type: string
    AuthChallenge:
      title: AuthChallenge
      x-stoplight:
        id: 7v6uegx5osik3
      type: object
      description: Model to take any type of challenge from the end user as part of authenticate request.
      properties:
        authFactorType:
          type: string
          description: Defines the type of auth challenge. It should be same as authfactor.type (oauth-details response).
          enum:
            - OTP
            - BIO
            - PIN
            - WLA
        challenge:
          type: string
          description: Actual challenge as string.
        format:
          type: string
          description: Format of the challenge provided.
          enum:
            - alpha-numeric
            - jwt
            - encoded-json
            - number
      required:
        - authFactorType
        - challenge
        - format
    AuthFactor:
      title: AuthFactor
      x-stoplight:
        id: 8qic27ggy4xms
      type: object
      properties:
        type:
          type: string
          description: Name of the authentication method
          enum:
            - PIN
            - OTP
            - L1-bio-device
            - Wallet
        count:
          type: integer
          description: 'Applicable for biometric based authentication, number of bio segments to be captured for authentication.'
        bioSubTypes:
          type: array
          description: Applicable for biometric based authentication. Can be more specific about which bio segments should be captured.
          items:
            type: string
      required:
        - type
    CredentialProof:
      title: CredentialProof
      x-stoplight:
        id: 92wc5hed8mu2f
      type: object
      description: JSON object containing proof of possession of the key material the issued Credential shall be bound to.
      properties:
        proof_type:
          x-stoplight:
            id: 1sq74k9fddpfh
          enum:
            - jwt
          description: The proof object MUST contain a proof_type claim of type JSON string denoting the concrete proof type.
        jwt:
          type: string
          x-stoplight:
            id: oxn6drb062v1x
          description: 'When proof_type is jwt, a proof object MUST include a jwt claim'
        cwt:
          type: string
          x-stoplight:
            id: ojvy3y52tkrq1
          description: 'When proof_type is cwt, a proof object MUST include a cwt claim'
      required:
        - proof_type
    CredentialDefinition:
      title: CredentialDefinition
      x-stoplight:
        id: fhf762tubbftk
      type: object
      description: |-
        JSON object containing (and isolating) the detailed description of the credential type.
             * This object MUST be processed using full JSON-LD processing.
             * It consists of the following sub claims:
             * @context: REQUIRED. JSON array
             * types: REQUIRED. JSON array. This claim contains the type values the Wallet shall request
             * in the subsequent Credential Request.
      properties:
        '@context':
          type: array
          x-stoplight:
            id: fc9jzhw7rlv5o
          items:
            x-stoplight:
              id: w3tg3q1pz6qg3
            type: string
        type:
          type: array
          x-stoplight:
            id: l76hj9xpko2lt
          items:
            x-stoplight:
              id: s6ydv9pqtc688
            type: string
        credentialSubject:
          type: object
          x-stoplight:
            id: vnxq2dn1r48dm
      required:
        - type
  securitySchemes:
    Authorization-Bearer:
      type: http
      scheme: bearer
    Authorization-add_oidc_client:
      type: http
      scheme: bearer
      description: Valid JWT issued by a trusted IAM system with "**add_oidc_client**" scope.
    Authorization-update_oidc_client:
      type: http
      scheme: bearer
      description: Valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
    Authorization-access_token:
      type: http
      scheme: bearer
      description: Access token received from /token endpoint
    Authorization-send_binding_otp:
      type: http
      scheme: bearer
      description: Valid JWT issued by a trusted IAM system with "<b>send_binding_otp</b>" scope.
    Authorization-wallet_binding:
      type: http
      scheme: bearer
      description: Valid JWT issued by a trusted IAM system with "**wallet_binding**" scope.
tags:
  - name: Management
    description: Management level API's used for internal use.
  - name: OIDC
    description: API's that are supposed to be compliant to OIDC.
  - name: UI
    description: UI related API.
