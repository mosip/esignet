openapi: 3.1.0
x-stoplight:
  id: 2vyk8uw76c0j6
info:
  version: '1.0'
  title: eSignet
  summary: Open ID Connect based identity provider for large scale authentication
  description: |-
    This API document details on the below categories of endpoints
    <ul>
    <li> Management - Endpoints for creation and updation of OIDC client details </li>
    <li> OIDC - All OIDC compliant endpoints for performing the Open ID Connect flows</li>
    <li> UI - All endpoints used by the UI application </li>
    <li> Wallet - All endpoints used by the Wallet application </li>
    <li> Wallet Backend - All endpoints used by the wallet backend service </li>
    </ul>

    <b>Abbreviations:</b></br></br>
    OIDC - Open ID Connect</br>
    IdP - Identity provider</br>
    PMP - Partner Management portal</br>
    KYC - Know Your Customer</br>
    IDA - Authentication server</br>
    UIN - Unique Identification Number</br>
    VID - Virtual Identifier</br>
    PSUT - Partner(Relying Party) Specific User Token</br>
    VC - Verifiable Credential</br>
  contact:
    name: MOSIP Team
    email: info@mosip.io
    url: 'https://www.mosip.io/'
  license:
    url: 'https://www.mozilla.org/en-US/MPL/2.0/'
    name: MPL-2.0
servers:
  - url: 'https://esignet.collab.mosip.net/v1/esignet'
paths:
  /client-mgmt/oidc-client:
    post:
      tags:
        - Management
      summary: Create OIDC Client Endpoint
      description: |-
        API to add new open ID connect (OIDC) clients, it can be invoked by other modules which manages the relying parties / partners.

        Each relying party can associate to one or multiple OIDC client ids.

        On create, OIDC client status will be by default set to "**active**".
      operationId: post-client
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              description: OIDC client details
              properties:
                requestTime:
                  type: string
                  description: Current date and time when the request is sent
                  format: date-time
                  pattern: ''
                request:
                  type: object
                  properties:
                    clientId:
                      type: string
                      description: 'Unique OIDC client id (Case-Sensitive). If duplicates found, request will be rejected.'
                      minLength: 1
                      maxLength: 50
                      examples:
                        - 785b806d0e594657b05aabdb30fff8a4
                    clientName:
                      type: string
                      description: Name of OIDC client.
                      minLength: 1
                      maxLength: 256
                      examples:
                        - ABC Health Care
                    relyingPartyId:
                      type: string
                      description: |-
                        Relying Party ID of the client. This will be passed on to authentications servers when KYC is fetched.

                        Note: Use the client Id as relyingPartyId if there is no separate concept of relying party in the ID authentication system.
                      minLength: 1
                      maxLength: 50
                      examples:
                        - bharathi-inc
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in OIDC login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: |-
                        Valid list of callback Uris of the relying party. 
                        When OIDC authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.
                      items:
                        type: string
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                          - 'mosip:idp:acr:knowledge'
                          - 'mosip:idp:acr:password'
                          - 'mosip:idp:acr:id-token'
                    publicKey:
                      type: object
                      description: |-
                        OIDC client's public key used to verify the client's private_key_jwt when OIDC token endpoint is invoked. 
                        This field will not be allowed to udpate later, if the private key is compromised, then new OIDC client to be created.
                        Format : Json Web Key (JWK).
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint
                      minItems: 1
                      uniqueItems: true
                      items:
                        const: authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        const: private_key_jwt
                  required:
                    - clientId
                    - clientName
                    - relyingPartyId
                    - logoUri
                    - authContextRefs
                    - publicKey
                    - userClaims
                    - grantTypes
                    - clientAuthMethods
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    clientName: Fastlane e-Sim Service
                    relyingPartyId: Fastlane
                    logoUri: 'https://fastlane.com/fastline-esim.png'
                    redirectUris:
                      - 'https://fastlane.com/homepage'
                    publicKey:
                      kty: RSA
                      e: AQAB
                      use: sig
                      alg: RS256
                      'n': g7KPXZdZ18H2JoW9FhYz8WrSbLeKA5mO8ROW5YQVyzYDfjbRA9sy0FwpF7pa7mBmU1_G0RvD0xbEhSaFtCL5hyNVVZCfgVqNl41C7-F2yUWhfVQPhT5YnT3eH3gV9ZczhP1trNjIzGuH-8D7EDJcoxuwdGaaY-wTmEtHykHRyab08qr62hfwLuSjHAGN6VgV-Na81XIdXmR7Dwnd1U4MxWJxzRvnVlHFCBaZIG6jNJ21vbzM-DBMq1d8tvtrGQx4w3niK_sctUZ5NP1BLkQhYSEGLr-e_mbmHFCnGtuKfnfIm-PVD-6ihfEwX3j_YQT3LhphBZj7AdXg6iyyQn9EJQ
                    authContextRefs:
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:biometrics'
                      - 'mosip:idp:acr:linked-wallet'
                    userClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client id as provided in the request.
                      status:
                        type: string
                        enum:
                          - ACTIVE
                          - INACTIVE
                  errors:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - duplicate_client_id
                            - invalid_public_key
                            - invalid_input
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_rp_id
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                      status: ACTIVE
        '401':
          description: Unauthorized
      deprecated: true
      security:
        - Authorization-add_oidc_client: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-internal: false
      x-stoplight:
        id: 6pu0p3a6mhqvr
  /client-mgmt/oauth-client:
    post:
      tags:
        - Management
      summary: Create OAuth/OIDC Client Endpoint
      description: |-
        API to add new OAuth or open ID connect (OIDC) clients. This API should be used to create client in esignet by the partner management modules in the integrated ID system.

        Each relying party can associate with one or more client ids.

        On create, client status will be by default set to "**ACTIVE**".
      operationId: post-oauth-client
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              description: OIDC client details
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                  description: Current date and time when the request is sent
                  format: date-time
                  pattern: ''
                request:
                  type: object
                  required:
                    - clientId
                    - clientName
                    - clientNameLangMap
                    - relyingPartyId
                    - logoUri
                    - authContextRefs
                    - publicKey
                    - userClaims
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientId:
                      type: string
                      description: 'Unique client id (Case-Sensitive). If duplicates found, request will be rejected.'
                      minLength: 1
                      maxLength: 50
                      examples:
                        - 785b806d0e594657b05aabdb30fff8a4
                    clientName:
                      type: string
                      description: Name of OAuth/OIDC client.
                      minLength: 1
                      maxLength: 256
                      examples:
                        - ABC Health Care
                    clientNameLangMap:
                      type: object
                      description: |-
                        Client name in different languages. The language code needs to be passed as key and 
                        client name in the desired language needs to be passed as value
                    relyingPartyId:
                      type: string
                      description: |-
                        Relying Party ID of the client. This will be passed on to authentications servers when KYC is fetched.

                        Note: Use the client Id as relyingPartyId if there is no separate concept of relying party in the ID authentication system.
                      minLength: 1
                      maxLength: 50
                      examples:
                        - bharathi-inc
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in the login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: |-
                        Valid list of callback Uris of the relying party. 
                        When the authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.
                      items:
                        type: string
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                          - 'mosip:idp:acr:knowledge'
                          - 'mosip:idp:acr:id-token'
                          - 'mosip:idp:acr:password'
                    publicKey:
                      type: object
                      description: |-
                        OAuth/OIDC client's public key used to verify the client's private_key_jwt when token endpoint is invoked. 
                        This field will not be allowed to udpate later, if the private key is compromised, then new OAuth/OIDC client to be created.
                        Format : Json Web Key (JWK).
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint
                      minItems: 1
                      uniqueItems: true
                      items:
                        const: authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        const: private_key_jwt
            examples:
              example-1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    clientName: Fastlane e-Sim Service
                    clientNameLangMap:
                      fra: Service e-Sim de Fastlane
                      ara: خدمة فاست لين e-SIM
                    relyingPartyId: Fastlane
                    logoUri: 'https://fastlane.com/fastlane-esim.png'
                    redirectUris:
                      - 'https://fastlane.com/homepage'
                      - 'io.mosip.residentapp://oauth'
                    publicKey:
                      kty: RSA
                      e: AQAB
                      use: sig
                      alg: RS256
                      'n': g7KPXZdZ18H2JoW9FhYz8WrSbLeKA5mO8ROW5YQVyzYDfjbRA9sy0FwpF7pa7mBmU1_G0RvD0xbEhSaFtCL5hyNVVZCfgVqNl41C7-F2yUWhfVQPhT5YnT3eH3gV9ZczhP1trNjIzGuH-8D7EDJcoxuwdGaaY-wTmEtHykHRyab08qr62hfwLuSjHAGN6VgV-Na81XIdXmR7Dwnd1U4MxWJxzRvnVlHFCBaZIG6jNJ21vbzM-DBMq1d8tvtrGQx4w3niK_sctUZ5NP1BLkQhYSEGLr-e_mbmHFCnGtuKfnfIm-PVD-6ihfEwX3j_YQT3LhphBZj7AdXg6iyyQn9EJQ
                    authContextRefs:
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:biometrics'
                      - 'mosip:idp:acr:linked-wallet'
                    userClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client id as provided in the request.
                      status:
                        type: string
                        enum:
                          - ACTIVE
                          - INACTIVE
                  errors:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - duplicate_client_id
                            - invalid_public_key
                            - invalid_input
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_rp_id
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                            - invalid_language_code
                            - invalid_client_name_value
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                      status: ACTIVE
                    errors: []
        '401':
          description: Unauthorized
      security:
        - Authorization-add_oidc_client: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-internal: false
      x-stoplight:
        id: 91b3a1508w0a5
  '/client-mgmt/oidc-client/{client_id}':
    put:
      tags:
        - Management
      summary: Update OIDC Client Endpoint
      description: |-
        API to update existing Open ID Connect (OIDC) client, it can be invoked by other modules which manages the relying parties / partners when there any updates on the fields accepted in this API.

        **Authentication and authorization** is based on a valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
      operationId: put-oidc-client-client_id
      parameters:
        - name: client_id
          in: path
          description: Client Identifier
          required: true
          schema:
            type: string
            examples:
              - WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  description: Current date and time when the request is sent
                  pattern: ''
                request:
                  type: object
                  properties:
                    clientName:
                      type: string
                      description: Name of the OIDC client.
                      minLength: 1
                      maxLength: 256
                      examples:
                        - ABC Health Care
                    status:
                      type: string
                      enum:
                        - active
                        - inactive
                      description: Status of OIDC client.
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in OIDC login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: 'Valid list of callback Uris of the relying party. When OIDC authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.'
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        format: uri
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint.
                      minItems: 1
                      items:
                        const: authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        const: private_key_jwt
                  required:
                    - clientName
                    - status
                    - logoUri
                    - redirectUris
                    - userClaims
                    - authContextRefs
                    - grantTypes
                    - clientAuthMethods
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientName: Fastlane e-Sim Service
                    status: active
                    relyingPartyId: Fastlane
                    logoUri: 'https://fastline.com/logo.png'
                    redirectUris:
                      - 'https://fastlane.com/homepage'
                      - 'https://fastlane-dev.com/*'
                      - 'fastlaneapp://oauth/*'
                    authContextRefs:
                      - 'mosip:idp:acr:biometrics'
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:linked-wallet'
                    userClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: OIDC client identifier.
                      status:
                        type: string
                        enum:
                          - ACTIVE
                          - INACTIVE
                    required:
                      - clientId
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. When request processing is fully successful, this array will be empty.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    value:
                      responseTime: '2023-09-22T08:01:13.000Z'
                      response:
                        clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                        status: ACTIVE
                      errors: []
      deprecated: true
      security:
        - Authorization-update_oidc_client: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: zr1f21tws4y9y
  '/client-mgmt/oauth-client/{client_id}':
    put:
      tags:
        - Management
      summary: Update OAuth/OIDC Client Endpoint
      description: |-
        API to update existing OAuth/Open ID Connect (OIDC) client, it can be invoked by other modules which manages the relying parties / partners when there any updates on the fields accepted in this API.

        **Authentication and authorization** is based on a valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
      operationId: put-oauth-client-client_id
      parameters:
        - name: client_id
          in: path
          description: Client Identifier
          required: true
          schema:
            type: string
            examples:
              - WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  description: Current date and time when the request is sent
                  pattern: ''
                request:
                  type: object
                  properties:
                    clientName:
                      type: string
                      description: Name of the OAuth/OIDC client.
                      minLength: 1
                      maxLength: 256
                      examples:
                        - ABC Health Care
                    clientNameLangMap:
                      type: object
                      description: |-
                        Client name in different languages. The 3 letter language code needs to be passed as key and 
                        client name in the desired language needs to be passed as value
                    status:
                      type: string
                      enum:
                        - active
                        - inactive
                      description: Status of the Client.
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in the login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: 'Valid list of callback Uris of the relying party. When the authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.'
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        format: uri
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                          - 'mosip:idp:acr:id-token'
                          - 'mosip:idp:acr:password'
                          - 'mosip:idp:acr:knowledge'
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint.
                      minItems: 1
                      items:
                        const: authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        const: private_key_jwt
                  required:
                    - clientName
                    - clientNameLangMap
                    - status
                    - logoUri
                    - redirectUris
                    - userClaims
                    - authContextRefs
                    - grantTypes
                    - clientAuthMethods
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientName: Fastlane e-Sim Service
                    status: active
                    clientNameLangMap:
                      fra: Service e-Sim de Fastlane
                      ara: خدمة فاست لين e-SIM
                    relyingPartyId: Fastlane
                    logoUri: 'https://fastlane.com/logo.png'
                    redirectUris:
                      - 'https://fastlane.com/homepage'
                      - 'http://fastlane-dev.com/*'
                      - 'fastlaneapp://oauth/*'
                    authContextRefs:
                      - 'mosip:idp:acr:biometrics'
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:linked-wallet'
                    userClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client identifier.
                      status:
                        type: string
                        enum:
                          - ACTIVE
                          - INACTIVE
                    required:
                      - clientId
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. When request processing is fully successful, this array will be empty.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                            - invalid_client_name_value
                            - invalid_language_code
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    value:
                      value:
                        responseTime: '2023-09-22T08:01:13.000Z'
                        response:
                          clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                          status: ACTIVE
                        errors: []
      security:
        - Authorization-update_oidc_client: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: dnbbtzbmppcsl
  /authorize:
    get:
      tags:
        - OIDC
      summary: Authorization Endpoint
      description: |-
        This is the authorize endpoint of Open ID Connect (OIDC). The relying party applications will do a browser redirect to this endpoint with all required details passed as query parameters.

        This endpoint will respond with a basic HTML page to load a JS application in the browser. UI JS application will then echo all the query parameters received in this endpoint to the "/authorization/oauth-details" endpoint as the request body.

        All the validations on the query parameter values will be performed in the "/authorization/oauth-details" endpoint.

        **Authentication & Authroization**: None
      operationId: get-authorize
      parameters:
        - name: scope
          in: query
          description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
          required: true
          schema:
            type: string
            enum:
              - openid profile
              - openid
              - profile
              - email
              - address
              - phone
              - offline_access
            default: openid profile
        - name: response_type
          in: query
          description: 'The value set here determines the authorization processing flow. To use the Authorization Code Flow, the value should be configured to "code".'
          required: true
          schema:
            const: code
        - name: client_id
          in: query
          description: Valid OAuth 2.0 Client Identifier in the Authorization Server.
          required: true
          schema:
            type: string
            maxLength: 256
        - name: redirect_uri
          in: query
          description: Redirection URI to which the response would be sent. This URI must match one of the redirection URI values during the client ID creation.
          required: true
          schema:
            type: string
            format: uri
        - name: state
          in: query
          description: 'Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.'
          schema:
            type: string
            maxLength: 256
        - name: nonce
          in: query
          description: 'String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token.'
          schema:
            type: string
        - name: display
          in: query
          description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end user.
          schema:
            type: string
            enum:
              - page
              - popup
              - touch
              - wap
        - name: prompt
          in: query
          description: Space delimited case-sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.
          schema:
            type: string
            enum:
              - none
              - login
              - consent
              - select_account
            examples:
              - consent
        - name: max_age
          in: query
          description: 'Maximum Authentication Age. This specifies the allowable elapsed time in seconds since the last time the end user was actively authenticated by the OP. If the elapsed time is greater than this value, then the OP MUST attempt to actively re-authenticate the end user. The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter. When max_age is used, the ID Token returned MUST include an auth_time claim value.'
          schema:
            type: number
        - name: ui_locales
          in: query
          description: 'End user''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
          schema:
            type: string
        - name: acr_values
          in: query
          description: 'Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.'
          schema:
            type: string
            enum:
              - 'mosip:idp:acr:password'
              - 'mosip:idp:acr:static-code'
              - 'mosip:idp:acr:generated-code'
              - 'mosip:idp:acr:linked-wallet'
              - 'mosip:idp:acr:biometrics'
              - 'mosip:idp:acr:knowledge'
              - 'mosip:idp:acr:id-token'
        - name: claims_locales
          in: query
          description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
          schema:
            type: string
        - name: claims
          in: query
          description: This parameter is used to request specific claims to be returned. The value is a JSON object listing the requested claims. The claims parameter value is represented in an OAuth 2.0 request as UTF-8 encoded JSON.
          schema:
            type: string
        - name: code_challenge
          in: query
          description: 'A challenge derived from the code_verifier, This is required if its a VC scoped request.'
          schema:
            type: string
        - name: code_challenge_method
          in: query
          description: 'A method that was used to derive code challenge, This will be required if code_challenge is provided.'
          schema:
            type: string
        - schema:
            type: string
          in: query
          description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client.
          name: id_token_hint
      responses:
        '200':
          description: |-
            OK

            Loads JS application, and validates the provided query parameters using oauth-details endpoint.
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: xel51v9q4xtvm
  /authorization/oauth-details:
    post:
      tags:
        - UI
      summary: OAuth Details Endpoint
      description: |
        OAuth details request is raised from the UI JS application on page load.

        OAuth details endpoint validates the provided request parameters and resolves the required authentication factors. Combination of resolved authentication factors and the consent details are sent back as response with a unique transactionId.

        The transcationId in the response is used to identify/maintain the end user pre-auth session. This pre-auth session has timeout (configurable in Idp service).

        All the query params passed to /authorize API MUST be sent to /oauth-details endpoint. All these parameters will be validated in IdP before returning success response.

        1. Validates the clientId.
        2. validates redirectUri is one of the redirectUri during client create/update.
        3. validates display,responseType,prompts values are part of supported values in Idp properties.
        4. scope / acrValues / claims / locales / claim_locales - unknown values are ignored. Only valid values are considered.
        5. scopes like profile, email and phone are allowed only if "openid" is also part of the requested scope.
        6. Claims request parameter is allowed, only if 'openid' is part of the scope request parameter
        7. claims considered only if part of registered claims.
        8. ACR in claims request parameter is given the first priority over acr_values query parameter. if none of them are part of the registered acrs, registered ACRs are only considered to derive the auth factors.
      operationId: post-oauth-details
      parameters:
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: ''
                request:
                  type: object
                  properties:
                    scope:
                      type: string
                      description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
                    responseType:
                      type: string
                      description: 'Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.'
                    clientId:
                      type: string
                      description: OAuth 2.0 Client Identifier valid at the Authorization Server
                    redirectUri:
                      type: string
                      description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
                    state:
                      type: string
                      description: client state value echoed.
                    nonce:
                      type: string
                      description: Client's nonce value echoed.
                    display:
                      type: string
                      description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
                    prompt:
                      type: string
                      description: 'Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.'
                    acrValues:
                      type: string
                      description: |-
                        Space separated ACR values, Unknown ACR are ignored. Only registered ACR values will be considered.
                        if none of the provided acr value is among the registered values, Error response is returned with error code "invalid_acr".
                    claims:
                      $ref: '#/components/schemas/Claim'
                    maxAge:
                      type: number
                      description: 'Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.'
                    claimsLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    uiLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                  required:
                    - scope
                    - responseType
                    - clientId
                    - redirectUri
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2022-09-22T08:01:10.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    scope: openid profile
                    responseType: code
                    redirectUri: 'https://fastlane.com/homepage'
                    display: popup
                    prompt: login
                    acrValues: 'mosip:idp:acr:generated-code'
                    claims:
                      userinfo:
                        name:
                          essential: true
                        phone_number:
                          essential: true
                        email:
                          essential: false
                        address:
                          essential: true
                      id_token: {}
                    nonce: 973eieljzng
                    state: eree2311
                    claimsLocales: en
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This value is passed through unmodified from the /oauth-details request to the /auth-code request.
                      authFactors:
                        type: array
                        description: |-
                          Auth factors defines the authentication screens displayed in IDP frontend.
                          More than one authFactor may be resolved or combination of auth factors.
                          Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      essentialClaims:
                        type: array
                        description: Array holds all the requested essential claims.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: Array holds all the requested optional claims.
                        items:
                          type: string
                      authorizeScopes:
                        type: array
                        description: Scopes to be permitted by the end user.
                        items:
                          type: string
                      configs:
                        type: object
                        description: UI configuration key-value pairs.
                      clientName:
                        type: string
                        description: OIDC client name as registered.
                      logoUrl:
                        type: string
                        description: Registered OIDC client logo URL.
                    required:
                      - transactionId
                      - authFactors
                      - essentialClaims
                  errors:
                    type:
                      - array
                      - 'null'
                    description: List of errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_redirect_uri
                            - invalid_scope
                            - no_acr_registered
                            - invalid_response_type
                            - invalid_display
                            - invalid_prompt
                        errorMessage:
                          type: string
              examples:
                example-1:
                  value:
                    responseTime: '2022-09-22T08:03:45.287Z'
                    response:
                      transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      clientName: Fastlane e-Sim Service
                      logoUrl: 'https://fastlane.com/logo.png'
                      authFactors:
                        - - type: OTP
                            count: 0
                            subTypes: null
                      authorizeScopes: []
                      essentialClaims:
                        - name
                        - address
                      voluntaryClaims:
                        - email
                        - phone_number
                      configs:
                        sbi.env: Staging
                        sbi.threshold.face: 40
                        sbi.threshold.finger: 40
                        sbi.threshold.iris: 40
                    errors: null
      deprecated: true
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: plbkmewzwbi21
  /authorization/v2/oauth-details:
    post:
      tags:
        - UI
      summary: OAuth Details Endpoint V2
      description: |
        OAuth details request is raised from the UI JS application on page load.

        OAuth details endpoint validates the provided request parameters and resolves the required authentication factors. Combination of resolved authentication factors and the consent details are sent back as response with a unique transactionId.

        The transcationId in the response is used to identify/maintain the end user pre-auth session. This pre-auth session has timeout (configurable in Idp service).

        All the query params passed to /authorize API MUST be sent to /oauth-details endpoint. All these parameters will be validated in IdP before returning success response.

        1. Validates the clientId.
        2. validates redirectUri is one of the redirectUri during client create/update.
        3. validates display,responseType,prompts values are part of supported values in Idp properties.
        4. scope / acrValues / claims / locales / claim_locales - unknown values are ignored. Only valid values are considered.
        5. scopes like profile, email and phone are allowed only if "openid" is also part of the requested scope.
        6. Claims request parameter is allowed, only if 'openid' is part of the scope request parameter
        7. claims considered only if part of registered claims.
        8. ACR in claims request parameter is given the first priority over acr_values query parameter. if none of them are part of the registered acrs, registered ACRs are only considered to derive the auth factors.
      operationId: post-oauth-details-v2
      parameters:
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                  pattern: ''
                request:
                  type: object
                  required:
                    - scope
                    - responseType
                    - clientId
                    - redirectUri
                  properties:
                    scope:
                      type: string
                      description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
                    responseType:
                      type: string
                      description: 'Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.'
                    clientId:
                      type: string
                      description: OAuth 2.0 Client Identifier valid at the Authorization Server
                    redirectUri:
                      type: string
                      description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
                    state:
                      type: string
                      description: client state value echoed.
                    nonce:
                      type: string
                      description: Client's nonce value echoed.
                    display:
                      type: string
                      description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
                    prompt:
                      type: string
                      description: 'Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.'
                    acrValues:
                      type: string
                      description: |-
                        Space separated ACR values, Unknown ACR are ignored. Only registered ACR values will be considered.
                        if none of the provided acr value is among the registered values, Error response is returned with error code "invalid_acr".
                    claims:
                      $ref: '#/components/schemas/Claim'
                    maxAge:
                      type: number
                      description: 'Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.'
                    claimsLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    uiLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    codeChallenge:
                      type: string
                      description: 'A challenge derived from the code verifier, to be verified against later.'
                    codeChallengeMethod:
                      const: S256
                      description: A method that was used to derive code challenge.
                      type: string
            examples:
              example-1:
                value:
                  requestTime: '2022-09-22T08:01:10.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    scope: openid profile
                    responseType: code
                    redirectUri: 'https://fastlane.com/homepage'
                    display: popup
                    prompt: login
                    acrValues: 'mosip:idp:acr:generated-code'
                    claims:
                      userinfo:
                        name:
                          essential: true
                        phone_number:
                          essential: true
                        email:
                          essential: false
                        address:
                          essential: true
                      id_token: {}
                    nonce: 973eieljzng
                    state: eree2311
                    claimsLocales: en
                    codeChallenge: UK95aVX_y3R44DF3hssd3wATvtZmO_WejE0P33-pwTs
                    codeChallengeMethod: S256
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This value is passed through unmodified from the /oauth-details request to the /auth-code request.
                      authFactors:
                        type: array
                        description: |-
                          Auth factors defines the authentication screens displayed in IDP frontend.
                          More than one authFactor may be resolved or combination of auth factors.
                          Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      essentialClaims:
                        type: array
                        description: Array holds all the requested essential claims.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: Array holds all the requested optional claims.
                        items:
                          type: string
                      authorizeScopes:
                        type: array
                        description: Scopes to be permitted by the end user.
                        items:
                          type: string
                      configs:
                        type: object
                        description: UI configuration key-value pairs.
                      clientName:
                        type: object
                        description: |-
                          OIDC client name in different languages where language is the key and client name
                          is the value. Default name is passed in @none key.
                      logoUrl:
                        type: string
                        description: Registered OIDC client logo URL.
                      credentialScopes:
                        type: array
                        description: List of valid credential scopes requested
                        items:
                          type: string
                    required:
                      - transactionId
                      - authFactors
                      - essentialClaims
                  errors:
                    type:
                      - array
                      - 'null'
                    description: List of errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_redirect_uri
                            - invalid_scope
                            - no_acr_registered
                            - invalid_response_type
                            - invalid_display
                            - invalid_prompt
                            - unsupported_pkce_challenge_method
                            - invalid_pkce_challenge
                        errorMessage:
                          type: string
              examples:
                example-1:
                  value:
                    value:
                      responseTime: '2022-09-22T08:03:45.287Z'
                      response:
                        transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                        clientName:
                          eng: Fastlane e-Sim Service
                          fra: Service e-Sim de Fastlane
                          ara: خدمة فاست لين e-SIM
                        logoUrl: 'https://fastlane.com/logo.png'
                        authFactors:
                          - - type: OTP
                              count: 0
                              subTypes: null
                        authorizeScopes: []
                        credentialScopes: []
                        essentialClaims:
                          - name
                          - address
                        voluntaryClaims:
                          - email
                          - phone_number
                        configs:
                          sbi.env: Staging
                          sbi.threshold.face: 40
                          sbi.threshold.finger: 40
                          sbi.threshold.iris: 40
                      errors: null
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: i5ht0irlohp9g
  /authorization/v3/oauth-details:
    post:
      tags:
        - UI
      summary: OAuth Details Endpoint V3
      description: |
        OAuth details request is raised from the UI JS application on page load.

        OAuth details endpoint validates the provided request parameters and resolves the required authentication factors. Combination of resolved authentication factors and the consent details are sent back as response with a unique transactionId.

        The transcationId in the response is used to identify/maintain the end user pre-auth session. This pre-auth session has timeout (configurable in Idp service).

        All the query params passed to /authorize API MUST be sent to /oauth-details endpoint. All these parameters will be validated in IdP before returning success response.

        1. Validates the clientId.
        2. validates redirectUri is one of the redirectUri during client create/update.
        3. validates display,responseType,prompts values are part of supported values in Idp properties.
        4. scope / acrValues / claims / locales / claim_locales - unknown values are ignored. Only valid values are considered.
        5. scopes like profile, email and phone are allowed only if "openid" is also part of the requested scope.
        6. Claims request parameter is allowed, only if 'openid' is part of the scope request parameter
        7. claims considered only if part of registered claims.
        8. ACR in claims request parameter is given the first priority over acr_values query parameter. if none of them are part of the registered acrs, registered ACRs are only considered to derive the auth factors.
        9. Verified claims in the 'claims' request parameter is supported only if the 'verified_claims_supported' flag is enabled.
        10. Unknown or supported claims in the verified_claims parameter are ignored. 
        11. idTokenHint is optional, if provided then it MUST be a valid JWT. 'sub' claim in the idTokenHint JWT payload must match the cookie name(set on the domain).If the cookie is not found with same name as of 'sub' claim, then the error is thrown.
      operationId: post-oauth-details-v3
      parameters:
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                  pattern: ''
                request:
                  type: object
                  required:
                    - scope
                    - responseType
                    - clientId
                    - redirectUri
                  properties:
                    scope:
                      type: string
                      description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
                    responseType:
                      type: string
                      description: 'Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.'
                    clientId:
                      type: string
                      description: OAuth 2.0 Client Identifier valid at the Authorization Server
                    redirectUri:
                      type: string
                      description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
                    state:
                      type: string
                      description: client state value echoed.
                    nonce:
                      type: string
                      description: Client's nonce value echoed.
                    display:
                      type: string
                      description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
                    prompt:
                      type: string
                      description: 'Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.'
                    acrValues:
                      type: string
                      description: |-
                        Space separated ACR values, Unknown ACR are ignored. Only registered ACR values will be considered.
                        if none of the provided acr value is among the registered values, Error response is returned with error code "invalid_acr".
                    claims:
                      $ref: '#/components/schemas/Claim'
                    maxAge:
                      type: number
                      description: 'Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.'
                    claimsLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    uiLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    codeChallenge:
                      type: string
                      description: 'A challenge derived from the code verifier, to be verified against later.'
                    codeChallengeMethod:
                      const: S256
                      description: A method that was used to derive code challenge.
                      type: string
                    id_token_hint:
                      type: string
                      x-stoplight:
                        id: x4y3fsuxr5crn
                      description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client.
            examples:
              example-1:
                value:
                  requestTime: '2022-09-22T08:01:10.000Z'
                  request:
                    clientId: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv
                    scope: openid profile
                    responseType: code
                    redirectUri: 'https://fastlane.com/homepage'
                    display: popup
                    prompt: login
                    acrValues: 'mosip:idp:acr:generated-code'
                    claims:
                      userinfo:
                        name:
                          essential: true
                        phone_number:
                          essential: true
                        email:
                          essential: false
                        address:
                          essential: true
                      id_token: {}
                    nonce: 973eieljzng
                    state: eree2311
                    claimsLocales: en
                    codeChallenge: UK95aVX_y3R44DF3hssd3wATvtZmO_WejE0P33-pwTs
                    codeChallengeMethod: S256
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    required:
                      - transactionId
                      - authFactors
                      - essentialClaims
                    properties:
                      transactionId:
                        type: string
                        description: This value is passed through unmodified from the /oauth-details request to the /auth-code request.
                      authFactors:
                        type: array
                        description: |-
                          Auth factors defines the authentication screens displayed in IDP frontend.
                          More than one authFactor may be resolved or combination of auth factors.
                          Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      essentialClaims:
                        type: array
                        description: Array holds all the requested essential claims.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: Array holds all the requested optional claims.
                        items:
                          type: string
                      authorizeScopes:
                        type: array
                        description: Scopes to be permitted by the end user.
                        items:
                          type: string
                      configs:
                        type: object
                        description: UI configuration key-value pairs.
                      clientName:
                        type: object
                        description: |-
                          OIDC client name in different languages where language is the key and client name
                          is the value. Default name is passed in @none key.
                      logoUrl:
                        type: string
                        description: Registered OIDC client logo URL.
                      credentialScopes:
                        type: array
                        description: List of valid credential scopes requested
                        items:
                          type: string
                  errors:
                    type:
                      - array
                      - 'null'
                    description: List of errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_redirect_uri
                            - invalid_scope
                            - no_acr_registered
                            - invalid_response_type
                            - invalid_display
                            - invalid_prompt
                            - unsupported_pkce_challenge_method
                            - invalid_pkce_challenge
                            - invalid_request
                            - invalid_id_token_hint
                        errorMessage:
                          type: string
              examples:
                example-1:
                  value:
                    value:
                      responseTime: '2022-09-22T08:03:45.287Z'
                      response:
                        transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                        clientName:
                          eng: Fastlane e-Sim Service
                          fra: Service e-Sim de Fastlane
                          ara: خدمة فاست لين e-SIM
                        logoUrl: 'https://fastlane.com/logo.png'
                        authFactors:
                          - - type: OTP
                              count: 0
                              subTypes: null
                        authorizeScopes: []
                        credentialScopes: []
                        essentialClaims:
                          - name
                          - address
                        voluntaryClaims:
                          - email
                          - phone_number
                        configs:
                          sbi.env: Staging
                          sbi.threshold.face: 40
                          sbi.threshold.finger: 40
                          sbi.threshold.iris: 40
                      errors: null
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 0d1dmkcadb7iu
  /authorization/send-otp:
    post:
      tags:
        - UI
      summary: Send OTP Endpoint
      description: |-
        When end user want to authenticate using OTP auth factor, he/she will enter their individual id (UIN/VID) and click on the "Generate OTP" button on the UI application. Then this endpoint will be invoked by the JS UI application.

        Since the OTP generation and delivery to end user is to be handled by the integrated authentication system, the request will be relayed to the same.

        1. Validates the transactionId.
        2. Validates null / empty individualId.
        3. Validates captchaToken, if enabled.
        3. Delegates the call to integrated authentication system.
        4. Relays error from authentication system to UI on failure.
      operationId: post-send-otp
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction Id
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - otpChannels
                  properties:
                    transactionId:
                      type: string
                      description: oauth-details transactionId is used until the /token call.
                    individualId:
                      type: string
                      description: Actual UIN or VID value of the authenticating the end user.
                    otpChannels:
                      type: array
                      description: Channel to be used to deliver request OTP.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - phone
                          - email
                    captchaToken:
                      type: string
                      description: 'Captcha token, if enabled.'
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    otpChannels:
                      - phone
                      - email
                    captchaToken: ALSKDJFURIEOQPZMKFURHFVBH
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    description: 'Successful message, or null if failed to deliver OTP.'
                    properties:
                      transactionId:
                        type: string
                        description: oauth-details transactionId is used until the /token call.
                      maskedEmail:
                        type: string
                        description: Masked email id to which generated OTP was mailed.
                      maskedMobile:
                        type: string
                        description: Masked phone number to which generated OTP was messaged.
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. if failure from IDA, the same error is relayed in this response.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - invalid_identifier
                            - invalid_otp_channel
                            - invalid_captcha
                            - send_otp_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      maskedEmail: sun****@gmail.com
                      maskedMobile: 3*****12
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: olqbk7247688b
  /linked-authorization/send-otp:
    post:
      tags:
        - UI
      summary: Link authorization Send OTP Endpoint
      description: |-
        When end user want to authenticate using OTP auth factor, he/she will enter their individual id (UIN/VID) and click on the "Generate OTP" button on the UI application. Then this endpoint will be invoked by wallet app with linked transactionId.

        Since the OTP generation and delivery to end user is to be handled by the integrated authentication system, the request will be relayed to the same.

        1. Validates the linked transactionId.
        2. Validates null / empty individualId.
        3. Delegates the call to integrated authentication system.
        4. Relays error from authentication system to UI on failure.
      operationId: post-send-linked-otp
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - otpChannels
                  properties:
                    transactionId:
                      type: string
                      description: oauth-details transactionId is used until the /token call.
                    individualId:
                      type: string
                      description: Actual UIN or VID value of the authenticating the end user.
                    otpChannels:
                      type: array
                      description: Channel to be used to deliver request OTP.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - phone
                          - email
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    otpChannels:
                      - phone
                      - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    description: 'Successful message, or null if failed to deliver OTP.'
                    properties:
                      transactionId:
                        type: string
                        description: oauth-details transactionId is used until the /token call.
                      maskedEmail:
                        type: string
                        description: Masked email id to which generated OTP was mailed.
                      maskedMobile:
                        type: string
                        description: Masked phone number to which generated OTP was messaged.
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. if failure from IDA, the same error is relayed in this response.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - invalid_identifier
                            - invalid_otp_channel
                            - send_otp_failed
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:11.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      maskedEmail: sun****@gmail.com
                      maskedMobile: 3*****12
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: ww5t6kob3q1sc
  /authorization/authenticate:
    post:
      tags:
        - UI
        - WALLET
      summary: Authentication Endpoint
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the UI application, this endpoint will be invoked.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates transactionId/linkTransactionId.
        2. Validates null / empty individualId.
        3. Invokes kyc-auth call to integrated authentication server (IDA).
        4. Relays error from integrated authentication server to UI on failure.

        On Authentication Success: Only transaction Id is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      operationId: post-authenticate
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction ID
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    individualId:
                      type: string
                      description: ' User identifier (UIN/VID).'
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                  required:
                    - transactionId
                    - individualId
                    - challengeList
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                            - invalid_auth_factor_type_format
                            - invalid_auth_factor_type
                            - invalid_challenge
                            - invalid_challenge_length
                            - invalid_challenge_format
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    errors: []
      deprecated: true
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: yo34tum285pjb
  /authorization/v2/authenticate:
    post:
      tags:
        - UI
        - WALLET
      summary: Authentication Endpoint V2
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the UI application, this endpoint will be invoked.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates transactionId/linkTransactionId.
        2. Validates null / empty individualId.
        3. Invokes kyc-auth call to integrated authentication server (IDA).
        4. It validates stored userconsent against the requested claims and scopes
        5. Relays error from integrated authentication server to UI on failure.

        On Authentication Success: transaction Id and consentAction is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      operationId: post-authenticate-v2
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction ID
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    individualId:
                      type: string
                      description: ' User identifier (UIN/VID).'
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                  required:
                    - transactionId
                    - individualId
                    - challengeList
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                      consentAction:
                        type: string
                        enum:
                          - CAPTURE
                          - NOCAPTURE
                        description: |
                          This field indicates the need to capture user consent or not
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                            - invalid_auth_factor_type_format
                            - invalid_auth_factor_type
                            - invalid_challenge
                            - invalid_challenge_length
                            - invalid_challenge_format
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      consentAction: CAPTURE
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: lrym71d3b78v6
  /authorization/v3/authenticate:
    post:
      tags:
        - UI
        - WALLET
      summary: Authentication Endpoint V3
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the UI application, this endpoint will be invoked.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates transactionId/linkTransactionId.
        2. Validated the provided captcha token - if the provided auth-factor is configured to be with captcha.
        3. Validates null / empty individualId.
        4. Invokes kyc-auth call to integrated authentication server (IDA).
        5. It validates stored userconsent against the requested claims and scopes
        6. Relays error from integrated authentication server to UI on failure.

        On Authentication Success: transaction Id and consentAction is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      operationId: post-authenticate-v3
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction ID
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    individualId:
                      type: string
                      description: ' User identifier (UIN/VID).'
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                    captchaToken:
                      type: string
                      description: |-
                        Below property is used to validate captcha.
                        mosip.esignet.captcha.required=send-otp,pwd,kbi

                        Only when configured auth-factors are part of the authenticate request v3 endpoint will validate the input captcha token.
                  required:
                    - transactionId
                    - individualId
                    - challengeList
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: '464737289558'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
              KBI auth factor example:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    individualId: 238/934-9045/236789
                    challengeList:
                      - authFactorType: KBI
                        challenge: eyJuYW1lIjogIlRvbSBLaXJrbWFuIiwgImRvYiI6ICIyNi8wMS8xOTgwIn0
                        format: base64url-encoded-json
                    captchaToken: token string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                      consentAction:
                        type: string
                        enum:
                          - CAPTURE
                          - NOCAPTURE
                        description: |
                          This field indicates the need to capture user consent or not
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                            - invalid_auth_factor_type_format
                            - invalid_auth_factor_type
                            - invalid_challenge
                            - invalid_challenge_length
                            - invalid_challenge_format
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      consentAction: CAPTURE
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 4kjy5afix1m2p
  /authorization/auth-code:
    post:
      tags:
        - UI
        - WALLET
      summary: Authorization Code Endpoint
      description: |-
        Once the authentication is successful and user consent is obtained, this endpoint will be invoked by the UI application to send the accepted consent and permitted scopes.

        Then UI application will receive the authorization code and few other details required for redirecting to the client / relying party application.

        1. Validates transactionId. If valid, stores the accepted claims and permitted scopes in the cache and returns back the authorization code.
        2. Validate accepted claims and permitted scopes in the request.
      operationId: post-auth-code
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction Id
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: Transaction id echoed starting from /authorize call.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
                  required:
                    - transactionId
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    permittedAuthorizeScopes: []
                    acceptedClaims:
                      - name
                      - email
                      - phone_number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      code:
                        type: string
                        description: Authorization code. Required to obtain the ID token and / or access token from the /token endpoint.
                      redirectUri:
                        type: string
                        description: Client's validated redirect URI.
                      nonce:
                        type: string
                        description: 'The echoed nonce value, if one was passed with the request. Clients must validate the value before proceeding.'
                      state:
                        type: string
                        description: 'The echoed state value, used to maintain state between the request and the callback.'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_accepted_claim
                            - invalid_permitted_scope
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      code: tyemdnjdfornfedg
                      redirectUri: 'https://fastlane.com/homepage'
                      nonce: 973eieljzng
                      state: eree2311
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 4nac0grjh3ckp
  /linked-authorization/link-code:
    post:
      tags:
        - UI
      summary: Generate Link Code endpoint
      description: |-
        Generate link code request is raised from JS application.

        1. JS application creates a deeplink with this link-code as parameter.
        2. This deeplink is embedded in a Machine-readable-code and the same is rendered in the UI.
        3. End user scans this machine-readable-code to open wallet app.
        4. On open of wallet-app, wallet-app invokes /link-transaction endpoint.
        5. In the JS application, once machine-readable-code is rendered, at the same time /link-status endpoint is invoked as a polling request.

        **Configuration to decide the expire date time of linkCode**: mosip.idp.link-code-expire-in-secs
      operationId: get-authorization-generate-link-code
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction Id
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: TransactionId returned in the oauth-details response.
                  required:
                    - transactionId
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: TransactionId same the one passed in the request.
                      linkCode:
                        type: string
                        description: Unique random string mapped to this transactionId.
                      expireDateTime:
                        type: string
                        description: Expire date time (ISO format) for the generated linkCode. After this date time linkCode in this request is not valid.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - link_code_gen_failed
                            - invalid_transaction
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      linkCode: xl4cnYtLQkGRxUj
                      expireDateTime: '2023-09-22T08:05:00.000Z'
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 3dysrxbef3ht3
  /linked-authorization/link-transaction:
    post:
      tags:
        - WALLET
      summary: Link Transaction endpoint
      description: |-
        The link transaction endpoint is invoked from Wallet-app.

        1. Validates the link-code and its expiry and generates the linkTransactionId. This linkTransactionId is linked to transactionId returned from /oauth-details endpoint.

        2. Returns the auth-factors, clientName, logoUrl, User claims, authorize scopes along with linkTransactionId.

        **Note:**
        Wallet-app will hereafter address the transaction with this linkTransactionId for the /authenticate and /consent endpoints.
      operationId: post-authorization-link-transaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  properties:
                    linkCode:
                      type: string
                      description: Link code as received by the wallet-app from the QR code scanning.
                  required:
                    - linkCode
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkCode: xl4cnYtLQkGRxUj
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkTransactionId:
                        type: string
                        description: Unique link-transaction-id.
                      clientName:
                        type: string
                        description: Registered name of the OIDC client.
                      logoUrl:
                        type: string
                        description: Registered OIDC client Logo URL.
                      authorizeScopes:
                        type: array
                        description: List of requested scopes to be permitted by the end user.
                        items:
                          type: string
                      essentialClaims:
                        type: array
                        description: List of client request mandatory claim names.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: List of client request optional claim names.
                        items:
                          type: string
                      authFactors:
                        type: array
                        description: Auth factors defines the authentication screens displayed in IDP frontend. More than one authFactor may be resolved or combination of auth factors. Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      configs:
                        type: object
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_link_code
                            - invalid_transaction
                            - invalid_client_id
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    value:
                      responseTime: '2023-09-22T08:01:13.000Z'
                      response:
                        linkTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                        clientName: Fastlane e-Sim Service
                        logoUrl: 'https://fastlane.com/logo.png'
                        authFactors:
                          - - type: OTP
                              count: 0
                              subTypes: null
                        authorizeScopes: []
                        essentialClaims:
                          - name
                          - address
                        voluntaryClaims:
                          - email
                          - phone_number
                        configs:
                          sbi.env: Staging
                          sbi.threshold.face: 40
                          sbi.threshold.finger: 40
                          sbi.threshold.iris: 40
                      errors: null
      deprecated: true
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 6tybrn5kekolm
  /linked-authorization/v2/link-transaction:
    post:
      tags:
        - WALLET
      summary: Link Transaction endpoint V2
      description: |-
        The link transaction endpoint is invoked from Wallet-app.

        1. Validates the link-code and its expiry and generates the linkTransactionId. This linkTransactionId is linked to transactionId returned from /oauth-details endpoint.

        2. Returns the auth-factors, clientName, logoUrl, User claims, authorize scopes along with linkTransactionId.

        **Note:**
        Wallet-app will hereafter address the transaction with this linkTransactionId for the /authenticate and /consent endpoints.
      operationId: post-authorization-link-transaction-v2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  properties:
                    linkCode:
                      type: string
                      description: Link code as received by the wallet-app from the QR code scanning.
                  required:
                    - linkCode
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkCode: xl4cnYtLQkGRxUj
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkTransactionId:
                        type: string
                        description: Unique link-transaction-id.
                      clientName:
                        type: object
                        description: |-
                          OIDC client name in different languages where language is the key and client name
                          is the value. Default name is passed in @none key.
                      logoUrl:
                        type: string
                        description: Registered OIDC client Logo URL.
                      authorizeScopes:
                        type: array
                        description: List of requested scopes to be permitted by the end user.
                        items:
                          type: string
                      essentialClaims:
                        type: array
                        description: List of client request mandatory claim names.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: List of client request optional claim names.
                        items:
                          type: string
                      authFactors:
                        type: array
                        description: Auth factors defines the authentication screens displayed in IDP frontend. More than one authFactor may be resolved or combination of auth factors. Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      configs:
                        type: object
                      credentialScopes:
                        type: array
                        description: List of valid credential scopes requested
                        items:
                          type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_link_code
                            - invalid_transaction
                            - invalid_client_id
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                      clientName:
                        eng: Fastlane e-Sim Service
                        fra: Service e-Sim de Fastlane
                        ara: خدمة فاست لين e-SIM
                      logoUrl: 'https://fastlane.com/logo.png'
                      authFactors:
                        - - type: OTP
                            count: 0
                            subTypes: null
                      authorizeScopes: []
                      credentialScopes: []
                      essentialClaims:
                        - name
                        - address
                      voluntaryClaims:
                        - email
                        - phone_number
                      configs:
                        sbi.env: Staging
                        sbi.threshold.face: 40
                        sbi.threshold.finger: 40
                        sbi.threshold.iris: 40
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: t2hbrly00fjl3
  /linked-authorization/link-status:
    post:
      tags:
        - UI
      summary: Link status endpoint
      description: |-
        The link transaction endpoint is invoked from Wallet-app.

        1. Validates the link-code and its expiry and generates the linkTransactionId. This linkTransactionId is linked to transactionId returned from /oauth-details endpoint.

        2. Returns the auth-factors, clientName, logoUrl, User claims, authorize scopes along with linkTransactionId.

        **Note:**
        Wallet-app will hereafter address the transaction with this linkTransactionId for the /authenticate and /consent endpoints.
      operationId: post-authorization-link-status
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction Id
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    linkCode:
                      type: string
                      description: This is same linkCode returned in the generate-link-code response.
                  required:
                    - transactionId
                    - linkCode
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    linkCode: xl4cnYtLQkGRxUj
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTIme:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId as sent in the request.
                      linkStatus:
                        const: LINKED
                        description: Link status of the linkCode passed in the request.
                      linkedDateTime:
                        type: string
                        description: Epoch in milliseconds at which the wallet-app acknowledged the link-code.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_link_code
                            - response_timeout
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTIme: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      linkStatus: LINKED
                      linkedDateTime: '2023-09-22T08:01:12.000Z'
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: vj7j4uk0geldw
  /linked-authorization/authenticate:
    post:
      tags:
        - WALLET
      summary: Linked Authentication Endpoint
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the Wallet-app, this endpoint will be invoked from wallet-app.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates linkedTransactionId.
        2. Validates null / empty individualId.
        4. Invokes kyc-auth call to integrated authentication server (IDA).
        5. Relays error from integrated authentication server to UI on failure.

        On Authentication Success: Only linkTransactionId is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      operationId: post-linked-authenticate
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    linkedTransactionId:
                      type: string
                      description: This is the same transactionId sent in the link-transaction response.
                    individualId:
                      type: string
                      description: User identifier (UIN/VID).
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                  required:
                    - linkedTransactionId
                    - individualId
                    - challengeList
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    individualId: '34543276756'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                            - invalid_auth_factor_type_format
                            - invalid_auth_factor_type
                            - invalid_challenge
                            - invalid_challenge_length
                            - invalid_challenge_format
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    errors: []
      deprecated: true
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 1gukg1x66cs69
  /linked-authorization/v2/authenticate:
    post:
      tags:
        - WALLET
      summary: Linked Authentication Endpoint V2
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the Wallet-app, this endpoint will be invoked from wallet-app.

        Supported auth-challenge depends on the integrated authentication server.

        1. Validates linkedTransactionId.
        2. Validates null / empty individualId.
        4. Invokes kyc-auth call to integrated authentication server (IDA).
        5. Relays error from integrated authentication server to UI on failure.
        6. It validates stored userconsent against the requested claims and scopes

        On Authentication Success: linkTransactionId and consentAction is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      operationId: post-linked-authenticate-v2
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    linkedTransactionId:
                      type: string
                      description: This is the same transactionId sent in the link-transaction response.
                    individualId:
                      type: string
                      description: User identifier (UIN/VID).
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                  required:
                    - linkedTransactionId
                    - individualId
                    - challengeList
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    individualId: '34543276756'
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                      consentAction:
                        type: string
                        enum:
                          - CAPTURE
                          - NOCAPTURE
                        description: |
                          This field indicates the need to capture user consent or not
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                            - invalid_auth_factor_type_format
                            - invalid_auth_factor_type
                            - invalid_challenge
                            - invalid_challenge_length
                            - invalid_challenge_format
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                      consentAction: CAPTURE
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: lozvgnj5yg1be
  /linked-authorization/consent:
    post:
      tags:
        - WALLET
      summary: Linked Consent Endpoint
      description: |
        Once the authentication is successful and user consent is obtained, this endpoint will be invoked by the wallet app to send the accepted consent and permitted scopes.

        1. Validates linkedTransactionId.
        2. Validate accepted claims and permitted scopes in the request.
        3. If valid, stores the accepted claims and permitted scopes in the cache.
      operationId: post-linked-consent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    linkedTransactionId:
                      type: string
                      description: Transaction id echoed starting from /authorize call.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
                  required:
                    - linkedTransactionId
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    permittedAuthorizeScopes: []
                    acceptedClaims:
                      - name
                      - email
                      - phone_number
                      - address
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the link-transaction response.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_accepted_claim
                            - invalid_permitted_scope
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    errors: []
      deprecated: true
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: w1xz5wefevlib
  /linked-authorization/v2/consent:
    post:
      tags:
        - WALLET
      summary: Linked Consent Endpoint V2
      description: |
        Once the authentication is successful and user consent is obtained, this endpoint will be invoked by the wallet app to send the accepted consent and permitted scopes.

        1. Validates linkedTransactionId.
        2. Validate accepted claims and permitted scopes in the request and the signature.
        3. If valid, stores the accepted claims, permitted scopes and signature in the consent registry.
      operationId: post-linked-consent-v2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  properties:
                    linkedTransactionId:
                      type: string
                      description: Transaction id echoed starting from /authorize call.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
                    signature:
                      type: string
                      description: Signature of permittedscopes and acceptedclaims from inji
                  required:
                    - linkedTransactionId
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:13.000Z'
                  request:
                    linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    permittedAuthorizeScopes: []
                    acceptedClaims:
                      - name
                      - email
                      - phone_number
                      - address
                    signature: <detached signature>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId sent in the link-transaction response.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_accepted_claim
                            - invalid_permitted_scope
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:14.000Z'
                    response:
                      linkedTransactionId: qwert_yt46_hX0xlBJNExl9cnYtL8kGvcbf555
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: m3xipj5r1svou
  /linked-authorization/link-auth-code:
    post:
      tags:
        - UI
      summary: Link authorization code endpoint
      description: |-
        Link authorization code endpoint is invoked from JS application.

        1. This is a Long polling request to IdP-service.
        2. validates the transactionId
        3. validates the linkCode if its LINKED.
        4. checks the cache to see if the auth-code is generated, if yes returns the response.
        5. If the auth-code is not yet generated, polling request waits for the configured time.
        6. On successful response, IdP-UI should redirect to the provided redirectUri and auth-code or errors.


        **Configuration to decide the wait interval**: mosip.idp.link-auth-code-deferred-response-timeout-secs
      operationId: post-authorization-link-auth
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction Id
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    linkedCode:
                      type: string
                      description: LINKED linkCode.
                  required:
                    - transactionId
                    - linkedCode
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:13.000Z'
                  request:
                    transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                    linkedCode: xl4cnYtLQkGRxUj
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      code:
                        type: string
                        description: Authorization code. Required to obtain the ID token and / or access token from the /token endpoint.
                      redirectUri:
                        type: string
                        description: Client's validated redirect URI.
                      state:
                        type: string
                        description: 'The echoed state value, used to maintain state between the request and the callback'
                      nonce:
                        type: string
                        description: 'The echoed nonce value, if one was passed with the request. Clients must validate the value before proceeding.'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - invalid_link_code
                            - response_timeout
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:14.000Z'
                    response:
                      code: Ertert4334dfgdQW
                      redirectUri: 'https://fastlane.com/homepage'
                      nonce: 973eieljzng
                      state: eree2311
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: h35gkz1v60phs
  /authorization/claim-details:
    get:
      tags:
        - UI
      summary: Fetch claim details endpoint
      description: |
        **Prerequisites:**
        1. Request should have valid authenticated transaction id in the header `oauth-details-key`

        **Validations:**
        1. validate the transaction ID in the header.

        Once the end user is successfully authenticated, GET consent-details endpoint is invoked to get details about the claims and consent action.


        **Background:**
        During kyc-auth, integrated ID system should return the list of claim details for the authenticated end user.
        We have introduced new method in the `Authenticator` plugin. New kycAuth method will be invoked only when verified claims are requested by the relying party.
        Claims details returned during the kcy-auth is cached in the `OIDCTransaction` to give out during fetch claim details call.
      operationId: get-consent-details
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction ID
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - responseTime
                properties:
                  responseTime:
                    type: string
                    format: date-time
                  response:
                    type: object
                    required:
                      - transactionId
                      - consentAction
                      - claimStatus
                      - profileUpdateRequired
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                      consentAction:
                        type: string
                        enum:
                          - CAPTURE
                          - NOCAPTURE
                        description: |
                          This field indicates the need to capture user consent or not
                      claimStatus:
                        type: array
                        x-stoplight:
                          id: oif0199dpk9ab
                        description: List of resolved claims among the requested claims with their availability and verification status.
                        items:
                          $ref: '#/components/schemas/ClaimStatus'
                          x-stoplight:
                            id: mhd9b2hzvhopg
                      profileUpdateRequired:
                        type: boolean
                        x-stoplight:
                          id: 3lhkxb4duct19
                        description: 'If true, then some or all of the essential claims are either not available or not verified. Otherwise this field is set to false'
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in eSignet server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - unknown_error
                            - invalid_request
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:13.000Z'
                    response:
                      transactionId: EKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      consentAction: CAPTURE
                      profileUpdateRequired: true
                      claimStatus:
                        - claim: address
                          available: true
                          verified: false
                        - claim: name
                          available: true
                          verified: false
                    errors: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: b7jnx7byz0ek4
    parameters: []
  /authorization/prepare-signup-redirect:
    post:
      summary: Prepare signup redirect endpoint
      tags:
        - UI
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    x-stoplight:
                      id: ye5m4j1782j67
                    format: date-time
                  response:
                    type: object
                    required:
                      - transactionId
                      - idToken
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                      idToken:
                        type: string
                        description: |
                          This field holds the ID token generated for signup service
                        x-stoplight:
                          id: qc6p9txqz9v7l
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in eSignet server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - unknown_error
                            - invalid_request
                            - invalid_transaction_id
                        errorMessage:
                          type: string
          headers:
            set-cookie:
              schema:
                type: string
              description: uuid=encoded-json
      operationId: post-authorization-prepare-signup-redirect
      x-stoplight:
        id: 9wb2ekkaeg7mk
      parameters:
        - schema:
            type: string
          in: header
          name: oauth-details-hash
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
        - schema:
            type: string
          in: header
          name: oauth-details-key
          description: Transaction ID
          required: true
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      description: |-
        **Prerequisite**: 
        1. User should be authenticated to invoke prepare-signup-redirect endpoint.
        2. signup-service should be registered as OAUTH client with esignet. And the signup-service's OAuth client id should be configured in this property `mosip.esignet.signup-id-token-audience` and the expire time of the generated ID token depends on below property `mosip.esignet.signup-id-token-expire-seconds`.


        **Validations:**
        1. Validates the input transactionID.
        2. Validates if the transaction requires profile update.


        When this endpoint is invoked, generates the ID-token for "singup-service". and sets the cookie header is also set with cookie name as UUID same as the subject of the ID token ( eg: "d898375b-c883-4408-a9e3-f629f15c1298") and the cookie value is a encoded json: 
          `{"code" :"secret code to match with the server", "path-fragment": "path to resume after profile update"}`

        ID token payload is as below
         `{ "iss": "https://esignet.dev.mosip.net", "iat": 1715047546, "exp": 1746583546, "aud": "signup-service-client-id", "sub": "d898375b-c883-4408-a9e3-f629f15c1298" }`

         **Note**: Cookie created expire time should be equal to the expire time if generated ID token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                  x-stoplight:
                    id: 0kmss6uxxb5t2
                  format: date-time
                request:
                  type: object
                  x-stoplight:
                    id: mmd6h6vi7ampp
                  required:
                    - transactionId
                    - pathFragment
                  properties:
                    transactionId:
                      type: string
                      x-stoplight:
                        id: t5ue5f4l5hhi5
                      description: Authenticated OIDC transaction ID.
                    pathFragment:
                      type: string
                      x-stoplight:
                        id: vb5bzzhuc87ho
                      description: Path fragment to resume back the OIDC flow after completing the KYC process in signup portal.
    parameters: []
  /authorization/complete-signup-redirect:
    parameters: []
    post:
      tags:
        - UI
      summary: Complete Signup verification and Resume halted transaction Endpoint
      description: This endpoint resumes the halted OIDC transactions halted and marks the completion of the identify verification process.
      operationId: post-complete-signup-redirect
      parameters:
        - name: oauth-details-hash
          in: header
          description: Base64 encoded SHA-256 hash of the oauth-details endpoint response.
          required: true
          schema:
            type: string
        - name: oauth-details-key
          in: header
          description: Transaction Id
          required: true
          schema:
            type: string
        - name: X-XSRF-TOKEN
          in: header
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                  format: date-time
                request:
                  type: object
                  required:
                    - transactionId
                  properties:
                    transactionId:
                      type: string
                      description: oauth-details transactionId is used until the /token call.
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:10.000Z'
                  request:
                    transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    description: 'Successful message, or null if failed to deliver OTP.'
                    properties:
                      status:
                        x-stoplight:
                          id: hnn4m8lfunl6d
                        enum:
                          - COMPLETED
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. if failure from IDA, the same error is relayed in this response.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - verification_incomplete
                        errorMessage:
                          type: string
              examples:
                Example 1:
                  value:
                    responseTime: string
                    response:
                      status: COMPLETED
                    errors:
                      - errorCode: invalid_transaction
                        errorMessage: string
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 5nj96giav3npy
  /oauth/token:
    post:
      tags:
        - OIDC
      summary: Token Endpoint
      description: |-
        Once the client / relying party application receives the authorization code through redirect, this OIDC complaint endpoint will be called from the relying party backend application to get the ID and access token.

        1. The only supported client authentication methods : <b>private_key_jwt</b>
        2. clientAssertion is a signed JWT with Clients private key, corresponding public key should be shared with IdP during the OIDC client registration process.
        3. clientAssertion JWT payload must be as below: 

        The JWT MUST contain the following REQUIRED Claim Values and MAY contain the additional OPTIONAL Claim Values:

        **iss**<span style="color:#FF0000">*</span> (Issuer): This MUST contain the client_id of the OAuth Client.

        **sub**<span style="color:#FF0000">*</span> (Subject): This MUST contain the client_id of the OAuth Client.

        **aud**<span style="color:#FF0000">*</span> (Audience): Value that identifies the authorization server as an intended audience. The authorization server MUST verify that it is an intended audience for the token. The audience SHOULD be the URL of the authorization server's token endpoint.

        **exp**<span style="color:#FF0000">*</span> (Expiration): Time on or after which the ID token MUST NOT be accepted for processing.

        **iat**<span style="color:#FF0000">*</span>: Time at which the JWT was issued.</p>

        **Note**: The Client Assertion JWT can contain other Claims. Any Claims used that are not understood WILL be ignored.</p>
      operationId: post-token
      requestBody:
        description: ''
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  const: authorization_code
                  description: Authorization code grant type.
                code:
                  type: string
                  description: 'Authorization code, sent as query param in the client''s redirect URI.'
                client_id:
                  type: string
                  description: Client Id of the OIDC client.
                client_assertion_type:
                  const: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  description: Type of the client assertion part of this request.
                client_assertion:
                  type: string
                  description: 'Private key signed JWT, This JWT payload structure is defined above as part of request description.'
                redirect_uri:
                  type: string
                  description: Valid client redirect_uri. Must be same as the one sent in the authorize call.
              required:
                - grant_type
                - code
                - client_assertion_type
                - client_assertion
                - redirect_uri
            examples:
              Example 1:
                value:
                  grant_type: authorization_code
                  code: tyemdnjdfornfedg
                  client_id: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv-kV7VBcnzvY
                  client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  client_assertion: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2OTg2MzE0NjAsIm5iZiI6MTY5ODYzMTQ2MCwiZXhwIjoxNjk4NjMxNTI1LCJqdGkiOiI1ZFFjaWhtb2lfQTlXMmlERGpYcDgiLCJzdWIiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiaXNzIjoiV01YNXBPNmRZZENGUjNpYVZXR2NsVlBOeFROU0FERHYta1Y3VkJjbnp2WSIsImF1ZCI6Imh0dHBzOi8vZXNpZ25ldC5jb2xsYWIubW9zaXAubmV0L3YxL2VzaWduZXQvb2F1dGgvdG9rZW4ifQ.G-OxPmb2wBq7R52PELNss9FCwvv_i2456FE4oag25BuZjwH6CgB8LDLmfCJdzeLGRuFp_MrKskGTkpsWI0RWLNtqZ7jvQTvSq8zQICusIFh9kcciWbkMsOZQqN91gPtdrn3WRS6xD7TxzwvrAeuqx4lTBbWNYTF2GQ3Zagq0t6ogOtPWg0wNioW3m11jWIdwooJ8jI2Z5oN772Lerrs1AXMnipLxQm4rdMM54taeHFrrXyxqFjoiq-bglrpHtCqeG6QFqhpQrRlIsLLoli8F1LU8Mu3Fw7ifCd6KEj9JNM_sPHjAy-JRg_dgjNdHL5tqtHzUsD5sSmLop33U4WH3Ow
                  redirect_uri: 'https://fastlane.com/homepage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                    description: |-
                      Identity token in JWT format. Will have the below claims in the payload.
                      <ul>
                      <li>iss</li>
                      <li>sub - (PSUT)</li>
                      <li>aud</li>
                      <li>exp</li>
                      <li>iat</li>
                      <li>auth_time</li>
                      <li>nonce</li>
                      <li>acr</li>
                      <li>at_hash</li>
                      </ul>
                  access_token:
                    type: string
                    description: The access token in JWT format. This token that will be used to call the UserInfo endpoint.
                  token_type:
                    const: Bearer
                    description: 'The type of the access token, set to Bearer'
                    default: Bearer
                  expires_in:
                    type: number
                    description: 'The lifetime of the access token, in seconds.'
                    format: duration
                required:
                  - id_token
                  - access_token
                  - token_type
                  - expires_in
              examples:
                Example 1:
                  value:
                    id_token: eyJraWQiOiJ1aTdOZjdkU1EzcTcxd0hEejFQYXVRWG5hMnJ1TWs5dmE0N2tuZTNjYWhZIiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjpudWxsLCJzdWIiOiIyNTgwMDg2NDcxMDgzMDEzNjAzMjA2NDYwMDYwMDU4NDE3NTEiLCJhdWQiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiYWNyIjoibW9zaXA6aWRwOmFjcjpnZW5lcmF0ZWQtY29kZSIsImF1dGhfdGltZSI6MTY5ODYzMTQ1NiwiaXNzIjoiaHR0cHM6XC9cL2VzaWduZXQuY29sbGFiLm1vc2lwLm5ldFwvdjFcL2VzaWduZXQiLCJleHAiOjE2OTg2MzUwNjcsImlhdCI6MTY5ODYzMTQ2Nywibm9uY2UiOiI5NzNlaWVsanpuZyJ9.Vi7L3n30zE26as4w4piFZe2Qa6DkWYBddE5ktgfC7pr4HuBe_0QHhYz__YriK6GNQTEie0i4aPOOQoEvqVNtaSOLWltdmAfL864gPlnKsMRLeeqKIB98ETUodVWIBqZkfwyY9-EHczSwrrXxnPmuY_xSdZ6QFdWFB_lkq1othEnf6wPVSJD_HJxncptg7BowRCWYVExDvsOB1sA5qS-3eXb-ixg-WVOuFm1LZuJjvQb2p5IhBpFmokycNsSfiHGUuuITHU4S_DE3TuVD9ksC4LTGFEFGZQzBC--RpJ69QrZnd6STshMvVvqqVf9Ae2qQbgDChJmWEtWvfWpuT9rPMw
                    token_type: Bearer
                    access_token: eyJraWQiOiJ1aTdOZjdkU1EzcTcxd0hEejFQYXVRWG5hMnJ1TWs5dmE0N2tuZTNjYWhZIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyNTgwMDg2NDcxMDgzMDEzNjAzMjA2NDYwMDYwMDU4NDE3NTEiLCJhdWQiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiaXNzIjoiaHR0cHM6XC9cL2VzaWduZXQuY29sbGFiLm1vc2lwLm5ldFwvdjFcL2VzaWduZXQiLCJleHAiOjE2OTg2MzUwNjYsImlhdCI6MTY5ODYzMTQ2NiwiY2xpZW50X2lkIjoiV01YNXBPNmRZZENGUjNpYVZXR2NsVlBOeFROU0FERHYta1Y3VkJjbnp2WSJ9.Af2Y3cBNuDIV88Irw5iAFJzNOl8BEnoDXH9qO100mbW2La22gALrmbkDgwFH37wPizPObXCq92VIBPgLcw9IVFsVzJ-_48T8g1llbbwqNl-FoYtqC7u3Vcek84qcHkW7l_8lpqemvNaNJBN4ZUCag5efp2YJ2x3ANIl6LufiesL4zixemvzgIAT4-CistBdCY5K8gZp-G56pO99N88Hl1VUYdwrLrJmtztTRJCQubJDYOuSkZeNJaG5Ox_nX3O8vjiMAKDiz6jK6s296zbzo1AYu1wTRxnQ34YyOJyWRpFFjtNEup6Y_Zcv6teGcMxlHZjwgyZTXxt9zH8GfBWZ83Q
                    expires_in: 3600
          headers:
            Cache-Control:
              schema:
                const: no-store
            Pragma:
              schema:
                const: no-cache
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - invalid_transaction
                      - invalid_assertion
                      - invalid_redirect_uri
                      - invalid_input
                      - unknown_error
                      - invalid_request
                      - invalid_assertion_type
                    description: The error code.
                  error_description:
                    type: string
                    description: Optional text providing additional information about the error that occurred.
                required:
                  - error
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: cdwhsjgoq9xbf
  /oauth/v2/token:
    post:
      tags:
        - OIDC
      summary: Token Endpoint V2
      description: |-
        Once the client / relying party application receives the authorization code through redirect, this OIDC complaint endpoint will be called from the relying party backend application to get the ID and access token.

        1. The only supported client authentication methods : <b>private_key_jwt</b>
        2. clientAssertion is a signed JWT with Clients private key, corresponding public key should be shared with IdP during the OIDC client registration process.
        3. clientAssertion JWT payload must be as below: 

        The JWT MUST contain the following REQUIRED Claim Values and MAY contain the additional OPTIONAL Claim Values:

        **iss**<span style="color:#FF0000">*</span> (Issuer): This MUST contain the client_id of the OAuth Client.

        **sub**<span style="color:#FF0000">*</span> (Subject): This MUST contain the client_id of the OAuth Client.

        **aud**<span style="color:#FF0000">*</span> (Audience): Value that identifies the authorization server as an intended audience. The authorization server MUST verify that it is an intended audience for the token. The audience SHOULD be the URL of the authorization server's token endpoint.

        **exp**<span style="color:#FF0000">*</span> (Expiration): Time on or after which the ID token MUST NOT be accepted for processing.

        **iat**<span style="color:#FF0000">*</span>: Time at which the JWT was issued.</p>

        **Note**: The Client Assertion JWT can contain other Claims. Any Claims used that are not understood WILL be ignored.</p>
      operationId: post-token-v2
      requestBody:
        description: ''
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  const: authorization_code
                  description: Authorization code grant type.
                code:
                  type: string
                  description: 'Authorization code, sent as query param in the client''s redirect URI.'
                client_id:
                  type: string
                  description: Client Id of the OIDC client.
                client_assertion_type:
                  const: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  description: Type of the client assertion part of this request.
                client_assertion:
                  type: string
                  description: 'Private key signed JWT, This JWT payload structure is defined above as part of request description.'
                redirect_uri:
                  type: string
                  description: Valid client redirect_uri. Must be same as the one sent in the authorize call.
                code_verifier:
                  type: string
                  description: |-
                    A cryptographically random string that is used to correlate the
                          authorization request to the token request.
              required:
                - grant_type
                - code
                - client_assertion_type
                - client_assertion
                - redirect_uri
            examples:
              Example 1:
                value:
                  grant_type: authorization_code
                  code: tyemdnjdfornfedg
                  client_id: WMX5pO6dYdCFR3iaVWGclVPNxTNSADDv-kV7VBcnzvY
                  client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  client_assertion: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2OTg2MzE0NjAsIm5iZiI6MTY5ODYzMTQ2MCwiZXhwIjoxNjk4NjMxNTI1LCJqdGkiOiI1ZFFjaWhtb2lfQTlXMmlERGpYcDgiLCJzdWIiOiJXTVg1cE82ZFlkQ0ZSM2lhVldHY2xWUE54VE5TQUREdi1rVjdWQmNuenZZIiwiaXNzIjoiV01YNXBPNmRZZENGUjNpYVZXR2NsVlBOeFROU0FERHYta1Y3VkJjbnp2WSIsImF1ZCI6Imh0dHBzOi8vZXNpZ25ldC5jb2xsYWIubW9zaXAubmV0L3YxL2VzaWduZXQvb2F1dGgvdG9rZW4ifQ.G-OxPmb2wBq7R52PELNss9FCwvv_i2456FE4oag25BuZjwH6CgB8LDLmfCJdzeLGRuFp_MrKskGTkpsWI0RWLNtqZ7jvQTvSq8zQICusIFh9kcciWbkMsOZQqN91gPtdrn3WRS6xD7TxzwvrAeuqx4lTBbWNYTF2GQ3Zagq0t6ogOtPWg0wNioW3m11jWIdwooJ8jI2Z5oN772Lerrs1AXMnipLxQm4rdMM54taeHFrrXyxqFjoiq-bglrpHtCqeG6QFqhpQrRlIsLLoli8F1LU8Mu3Fw7ifCd6KEj9JNM_sPHjAy-JRg_dgjNdHL5tqtHzUsD5sSmLop33U4WH3Ow
                  redirect_uri: 'https://fastlane.com/homepage'
                  code_verifier: MN1Q0nNAKkqOu5EaNBKf2gYD4maYv9ZxLd-48N2_kTM
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                    description: |-
                      Identity token in JWT format. Will have the below claims in the payload.
                      <ul>
                      <li>iss</li>
                      <li>sub - (PSUT)</li>
                      <li>aud</li>
                      <li>exp</li>
                      <li>iat</li>
                      <li>auth_time</li>
                      <li>nonce</li>
                      <li>acr</li>
                      <li>at_hash</li>
                      </ul>

                      It is non-null only in OIDC flow. otherwise the id_token is not returned.
                  access_token:
                    type: string
                    description: The access token in JWT format. This token that will be used to call the UserInfo endpoint.
                  token_type:
                    const: Bearer
                    description: 'The type of the access token, set to Bearer'
                    default: Bearer
                  expires_in:
                    type: number
                    description: 'The lifetime of the access token, in seconds.'
                    format: duration
                  c_nonce:
                    type: string
                    description: JSON string containing a nonce to be used to create a proof of possession of key material when requesting a Credential.
                  c_nonce_expires_in:
                    type: number
                    description: JSON integer denoting the lifetime in seconds of the c_nonce.
                required:
                  - access_token
                  - token_type
                  - expires_in
              examples:
                Example 1:
                  value:
                    token_type: Bearer
                    access_token: eyJraWQiOiJLT19tVHBfc1QwemxGRVVkX25UdGhmbzl0RTlTX21GQnJ6OTFwZjd5RFFBIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJQVlJtZkRwZ1pKcXZMTWZZcTZwcUItTDNZQTZXR3dYZmxiTlJpVWF6THJjIiwiYXVkIjoiaHR0cHM6XC9cL2VzaWduZXQtbW9jay5jb2xsYWIubW9zaXAubmV0XC92MVwvZXNpZ25ldFwvdmNpXC9jcmVkZW50aWFsIiwiY19ub25jZV9leHBpcmVzX2luIjo0MCwiY19ub25jZSI6IkN0OXJwUUZiOTZRU1N3Z0hBZkRPIiwic2NvcGUiOiJzYW1wbGVfdmNfbGRwIiwiaXNzIjoiaHR0cHM6XC9cL2VzaWduZXQtbW9jay5jb2xsYWIubW9zaXAubmV0XC92MVwvZXNpZ25ldCIsImV4cCI6MTY5ODYzNTczOSwiaWF0IjoxNjk4NjMyMTM5LCJjbGllbnRfaWQiOiI4OFZqdDM0YzVUd3oxb0oifQ.EAWkcaDUTMH1FcrXdsj4s-y9t8gVB1YBiIZ6VqZD3ZSGR3OrkIQUN2y8vbtvXJv8WAVV_0pvphFjIa9gVRP63_vdZipJ3h04vYcpyfTn50Yml-77uhB_JgHeQWZ0rnCQ1LQGSdSYKro9A1smevVCb1vyPf6QoQPumzKHJ9Jg7SojyhXON2sdIn94Xc5-gok-jGQEapbIBm3RhUEsFPGl7MjaMqBpodV-JOuEi0j_7VfxhLTXXoYZm_-h2aZCWJ9MQDtUC8TwNp-ap5f-O4lQx_M79jyn2mXa0NtoPPIQeffnCPq-uS43C0LZ9CQTfwIC4xV8-x2ema2fHWvtebSsmQ
                    expires_in: 3600
                    c_nonce: Ct9rpQFb96QSSwgHAfDO
                    c_nonce_expires_in: 40
          headers:
            Cache-Control:
              schema:
                const: no-store
            Pragma:
              schema:
                const: no-cache
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - invalid_transaction
                      - invalid_assertion
                      - invalid_redirect_uri
                      - invalid_input
                      - unknown_error
                      - invalid_request
                      - invalid_assertion_type
                      - invalid_pkce_code_verifier
                      - unsupported_pkce_challenge_method
                      - pkce_failed
                    description: The error code.
                  error_description:
                    type: string
                    description: Optional text providing additional information about the error that occurred.
                required:
                  - error
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: zkcvd1seyedmd
  /oidc/userinfo:
    get:
      tags:
        - OIDC
      summary: UserInfo Endpoint
      description: |-
        Once the access token is received via the token endpoint, relying party backend application can call this OIDC compliant endpoint to request for the user claims.

        Consented user claims will be returned as a JWT. This JWT will be a nested JWT which is a signed using JWS and then encrypted using JWE. 


        **Example**: Assuming the below are the requested claims by the relying party

        name : { "essential" : true }

        phone: { "essential" : true }

        **Response 1**: When consent is provided for both name and phone number:

        { "name" : "John Doe", "phone" : "033456743" }

        **Response 2**: When consent is provided for only name:

        { "name" : "John Doe" }

        **Response 3**: When Claims are requested with claims_locales : "en fr"

        { "name#en" : "John Doe", "name#fr" : "Jean Doe", "phone" : "033456743" } 

        **Supported User Info Claims**
        <ul>
        <li>sub - Partner Specific User Token (PSUT)</li>
        <li>name</li>
        <li>address</li>
        <li>gender</li>
        <li>birthdate</li>
        <li>profile photo</li>
        <li>email</li>
        <li>phone</li>
        <li>locale</li>
        <li>Custom - individual_id (You share this claim as a system-level config and it can be UIN, perceptual VID or temporary VID)</li>
        </ul>
      operationId: get-userinfo
      responses:
        '200':
          description: OK
          content:
            application/jwt:
              schema:
                type: string
                description: 'The response is signed and then encrypted, with the result being a Nested JWT. Signed using the authentication system''s private key. Signed full JWT will then be encrypted using OIDC client''s public key.'
                format: jwt
              examples:
                Example 1:
                  value: eyJraWQiOiJlU0dtNm5LcGppUHRJMnAzbVVWNHBWWm9nY0VHaExMV2dCNXNuUzNvbUNzIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyNTgwMDg2NDcxMDgzMDEzNjAzMjA2NDYwMDYwMDU4NDE3NTEiLCJhZGRyZXNzIjp7ImxvY2FsaXR5IjoiUmFiYXQgIn0sIm5hbWUiOiJhcnZpbmQiLCJwaG9uZV9udW1iZXIiOiI3ODY0ODQ2MzQzIiwiZW1haWwiOiJhcmF2aW5kaDIwOTBAZ21haWwuY29tIn0.WqkXaalFJu1nzAgoSmLKOHddX7_tkgcTEZRK8uedfl6rbNRZ7Lv0uayTT--3r4Z0Wlnjh1pUMreFvKd1yfirIf0LaPvuTBe5AVRRUMGPhPkSCq_ietytg75uNUH-Z91jLluh8mIZ5BlsGf_MfdkKD10pvzG9cWowWeWlD2hj-YNw05SUAdvZtHeN8ayMTaPOa-Jc0Sv3kXS0xM6Geizq5QCpIWaavZNw9GJF8GEizGK3klq3od9PfHKrh8XruUFM849iyAShIUTgr9mFlWzHVuTqbpcc2ZptLY_egOq8qKA5guBEplB92PlaxQQeyxRvMezZtDiRdzf5BSpM_1ok0g
        '401':
          description: Unauthorized
          headers:
            WWW-AUTHENTICATE:
              schema:
                type: string
                enum:
                  - invalid_token
                  - unknown_error
              description: 'Bearer error=invalid_token,  error_description=MOSIPIDP123: A user info request was made with an access token that was not recognized.'
      security:
        - Authorization-access_token: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: 5dgir3dl27lvp
  /binding/binding-otp:
    post:
      tags:
        - WALLET BACKEND
      summary: Send Binding OTP Endpoint
      description: Send wallet binding OTP endpoint is invoked by Mimoto server.
      operationId: post-binding-otp
      parameters:
        - name: partner-api-key
          in: header
          description: 'API key of the binding partner, this will be passed to binder implementation to interact with authentication system.'
          schema:
            type: string
        - name: partner-id
          in: header
          description: 'Binding partner Identifier, this will be passed to binder implementation to interact with authentication system.'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - requestTime
                - request
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - individualId
                    - otpChannels
                  properties:
                    individualId:
                      type: string
                      description: User Id (UIN/VID)
                    otpChannels:
                      type: array
                      description: Channels to which OTP should be delivered.
                      items:
                        type: string
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:13.000Z'
                  request:
                    individualId: '24554655645'
                    otpChannels:
                      - sms
                      - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTIme:
                    type: string
                  response:
                    type: object
                    properties:
                      maskedEmail:
                        type: string
                        description: Masked email id of the individualId user.
                      maskedMobile:
                        type: string
                        description: Masked mobile number of the individualId user.
                      transactionId:
                        type: string
                        description: oauth-details transactionId is used until the /token call.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_otp_channel
                            - unknown_error
                            - invalid_individual_id
                            - send_otp_failed
                        errorMessage:
                          type: string
                required:
                  - responseTIme
              examples:
                Example 1:
                  value:
                    responseTIme: '2023-09-22T08:01:16.000Z'
                    response:
                      maskedEmail: XXdXXaXXhXXkX@gmail.com
                      maskedMobile: XXXXXXX357934
                    errors: []
      security:
        - Authorization-send_binding_otp: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: d3di5edwwt70b
  /binding/wallet-binding:
    post:
      tags:
        - WALLET BACKEND
      summary: Wallet Binding Endpoint
      description: |-
        Wallet binding endpoint is invoked by Mimoto server.

        1. This request is invoked from wallet-app with authChallenge.
        2. Integrated keybinder implementation validates the authChallenge.
        3. Public key registry is updated with the key binding details for the provided individualId.
        4. Binded walletUserId (WUID) is returned with keybinder signed certificate. 

        **Note**: Binding entry uniqueness is combination of these 3 values -> (PSUT, public-key, auth-factor-type)
      operationId: post-wallet-binding
      parameters:
        - name: partner-api-key
          in: header
          description: 'API key of the Binding partner, this will be passed to binder implementation to interact with authentication system.'
          schema:
            type: string
        - name: partner-id
          in: header
          description: 'Binding partner identifier, this will be passed to binder implementation to interact with authentication system.'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  properties:
                    individualId:
                      type: string
                      description: User Id (UIN/VID).
                    authFactorType:
                      type: string
                      description: Auth factor type to be binded for the provided key.
                    format:
                      type: string
                      description: 'Format of the auth factor type supported in the wallet app.This is not stored, this value is only validated to check if its a supported format in the keybinder implementation.'
                    challengeList:
                      type: array
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                    publicKey:
                      type: object
                      description: key to be binded in JWK format.
                  required:
                    - individualId
                    - authFactorType
                    - format
                    - challengeList
                    - publicKey
              required:
                - requestTime
                - request
            examples:
              Example 1:
                value:
                  requestTime: '2023-09-22T08:01:15.000Z'
                  request:
                    individualId: '24554655645'
                    authFactorType: WLA
                    format: jwt
                    challengeList:
                      - authFactorType: OTP
                        challenge: '111111'
                        format: alpha-numeric
                    publicKey:
                      kty: RSA
                      e: AQAB
                      use: sig
                      alg: RS256
                      'n': sfIT-5o9ZSr8lJuBsRTzodJYvEgNeIayJRd9WLip6tU9NZ_5VvVS_jq5STza9WELs127xH7e6rgGJ31B6VLBbrRRgLm2sz2_0s1p9ilRSrae0P3cJHK7aIgY0c-E1SwbzrKmV4FQKzARfHG-M-DmAD8V38LclxZycAu7gXWFVS7RPW_NpmjtVGDpnx0pKYgfJb8QgzGEbSKUGB39GRWNA2ij-6tEPQQwYSO5akyFup-bVaJrKKaIWn37iiB9T7umXnmzp-3HuP1SQp6cPQLkeWp64lozxTq4To12gbietIKyfJto7r9sra1wRyq0XNKhQvswLmuQcORJKhEMJWVCpQ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      walletUserId:
                        type: string
                        description: Unique identifier given to public-key and partner specific userId mapping.
                      certificate:
                        type: string
                        description: Key binder signed certificate.
                      expireDateTime:
                        type: string
                        description: Expire date time of the signed certificate.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - key_binding_failed
                            - invalid_public_key
                            - invalid_auth_challenge
                            - duplicate_public_key
                            - invalid_auth_factor_type_format
                            - invalid_auth_factor_type
                            - invalid_challenge
                            - invalid_challenge_length
                            - invalid_challenge_format
                        errorMessage:
                          type: string
                required:
                  - responseTime
              examples:
                Example 1:
                  value:
                    responseTime: '2023-09-22T08:01:16.000Z'
                    response:
                      walletUserId: <walletUserId>
                      certificate: <Server signed Certificate>
                      expireDateTime: <Certificate expire datetime>
                    errors: []
      security:
        - Authorization-wallet_binding: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: chsz43i4s7rkd
  /.well-known/jwks.json:
    get:
      tags:
        - OIDC
      summary: JSON Web Key Set Endpoint
      description: Endpoint to fetch all the public keys of the eSignet server. Returns public key set in the JWKS format.
      operationId: get-certs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kid:
                          type: string
                          description: The certificate's Key ID
                        use:
                          const: sig
                          description: 'How the Key is used. Valid value: sig'
                        kty:
                          const: RSA
                          description: 'Cryptographic algorithm family for the certificate''s Key pair. Valid value: RSA'
                        e:
                          type: string
                          description: RSA Key value (exponent) for Key blinding
                        'n':
                          type: string
                          description: RSA modulus value
                        x5t#S256:
                          type: string
                          description: SHA-256 thumbprint of the certificate.
                        x5c:
                          type: array
                          description: Certificate to validate the Oauth server trust.
                          items:
                            type: string
                        exp:
                          type: string
                          description: Expire datetime of the key. Given in ISO format.
                          format: date-time
                          examples:
                            - '2026-02-05T13:43:07.979Z'
                      required:
                        - kid
                        - use
                        - kty
                        - e
                        - 'n'
                        - x5t#S256
                        - x5c
                        - exp
              examples:
                Example 1:
                  value:
                    keys:
                      - kty: RSA
                        x5t#S256: Apdg6S6RmjkiBjvEUYYCa-KF-yrJbl6x1wzKrc4smt0
                        e: AQAB
                        use: sig
                        kid: GTERCOmvD5PlZ65lo2Na-4Udc2xgA6EkaHuEsnMevRA
                        x5c:
                          - MIIDvTCCAqWgAwIBAgIIvSVFZ0ayWuswDQYJKoZIhvcNAQELBQAwdzELMAkGA1UEBhMCSU4xCzAJBgNVBAgMAktBMRIwEAYDVQQHDAlCQU5HQUxPUkUxDTALBgNVBAoMBElJVEIxGjAYBgNVBAsMEU1PU0lQLVRFQ0gtQ0VOVEVSMRwwGgYDVQQDDBN3d3cubW9zaXAuaW8gKFJPT1QpMB4XDTIzMDcxNDA0MTI0NFoXDTI2MDcxMzA0MTI0NFowfzELMAkGA1UEBhMCSU4xCzAJBgNVBAgMAktBMRIwEAYDVQQHDAlCQU5HQUxPUkUxDTALBgNVBAoMBElJVEIxGjAYBgNVBAsMEU1PU0lQLVRFQ0gtQ0VOVEVSMSQwIgYDVQQDDBt3d3cubW9zaXAuaW8gKE9JRENfU0VSVklDRSkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCupTNBR7kbfC0V8FBOnVgjKcgISV4BebWsmQNvTiM4So4kgOU8Tcg1ER+Qk5+/v6c3NGZ8ZuAF8oxEW75xs6ltN2z6NIA3Q9fE6pYJXf9ixPsOzZsn5bjYMJw8C1NmE5UiYfzQCARh8dXY+8eA9WigoDzCFIWeAdb33X4S86yiDsIuY1V8mxA4PWER929Ssg/Nnr04ZHdFFbctPLfnG1xJMhelTc+v0H95FwY5CotKfipFy6wUW1ZEJL1uDjnsfBrgNH1HbTvYOzRNyW/TtQFI74xShRoThYs9gGcHPENhof8KSPRVwRztP7AWFJqAKhAnXGmrYyDObUZWa2LczuoLAgMBAAGjRTBDMBIGA1UdEwEB/wQIMAYBAf8CAQEwHQYDVR0OBBYEFKzJuyUw9RQffaJaMNvPMGU5bSRtMA4GA1UdDwEB/wQEAwIChDANBgkqhkiG9w0BAQsFAAOCAQEAmGEzeokV0q6sNkpbslncnFi7Map33bGv94VvWPgA2fFqc1OQq/fHYar8S8hgQeqQeyFF8RQPa8Ga/RJfA6a0VS280nO3Q/ITHfuGz1g6QNxcfE1d5OOdQwe1sdAbc53kAX7ZasTEuam7II1H/O0wftFWU369mAWVfmp/8DCtF7I6ir84SnPyNFxINhggSLxqPLGuZDK8xbz0DsB2eBklf+B+dwUM48CfwQ3sAFBrU8lxqrUXMK/fKV+BZLyec7+7G1J8upxUGDvVgWoA7jfStA8jdqWNffi64+1GU+KtVha7PjnyabkmLwmm8TSVUHewXa1P7PiuzKfPHltoijGQyw==
                        exp: '2026-02-05T13:43:07.979Z'
                        'n': rqUzQUe5G3wtFfBQTp1YIynICEleAXm1rJkDb04jOEqOJIDlPE3INREfkJOfv7-nNzRmfGbgBfKMRFu-cbOpbTds-jSAN0PXxOqWCV3_YsT7Ds2bJ-W42DCcPAtTZhOVImH80AgEYfHV2PvHgPVooKA8whSFngHW991-EvOsog7CLmNVfJsQOD1hEfdvUrIPzZ69OGR3RRW3LTy35xtcSTIXpU3Pr9B_eRcGOQqLSn4qRcusFFtWRCS9bg457Hwa4DR9R2072Ds0Tclv07UBSO-MUoUaE4WLPYBnBzxDYaH_Ckj0VcEc7T-wFhSagCoQJ1xpq2Mgzm1GVmti3M7qCw
                      - kty: RSA
                        x5t#S256: 2r6FoSf1IrA1Mn1hTtO50Le2SeiDO3dxT24oeAPCISA
                        e: AQAB
                        use: sig
                        kid: R3V2vggI0S-98bJabimOEpZIE0vPkk2uhxRzmPsqX4w
                        x5c:
                          - MIIDrTCCApWgAwIBAgIIi2nvBziQ2uMwDQYJKoZIhvcNAQELBQAwcDELMAkGA1UEBhMCSU4xCzAJBgNVBAgMAktBMRIwEAYDVQQHDAlCQU5HQUxPUkUxDTALBgNVBAoMBElJVEIxGjAYBgNVBAsMEU1PU0lQLVRFQ0gtQ0VOVEVSMRUwEwYDVQQDDAx3d3cubW9zaXAuaW8wHhcNMjMwNzEzMTU1OTQwWhcNMjYwNzEyMTU1OTQwWjB2MQswCQYDVQQGEwJJTjELMAkGA1UECAwCS0ExEjAQBgNVBAcMCUJBTkdBTE9SRTENMAsGA1UECgwESUlUQjEgMB4GA1UECwwXTU9TSVAtVEVDSC1DRU5URVIgKElEQSkxFTATBgNVBAMMDHd3dy5tb3NpcC5pbzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALGOdFQsHmCelxq8ZdJG0DbGU7dV8MJhuCi8KYdOQpXgzd2qUWY7V31OVlyTFs+YWHDR5KRkfw7pUAI+jswMWC32qn2R+BsOzMs16tZ8C3sVIpkUeZ8XhIBIugVkXMpuIbkoZ7CBcm2zetRVRdNGQC5Vdi5vZnyjsQv7ULiDAkWtOibaeDjprj0lHxaDffmWPukcBBpyOaAVLyk98hUbgDwHxBfnn2edjkDlYt07VVU+EWQoolE1MQvn8kgDN+kSicecJ8IBpJBs8i9MJDor2+PgC63lAgb6vr2/bXyswlF8V4UGQHSrGgFAxIMc6PlouagwhiwOLXyAMiNJa/8N5ccCAwEAAaNFMEMwEgYDVR0TAQH/BAgwBgEB/wIBATAdBgNVHQ4EFgQUAjl/vGghgtS+VWEU0ozokioAHxQwDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQAXCpz+2p93DNR8G/XtjmZAB62r6aYWMhrRPM8BwBvfZ5z9LNLhhxC1K4V5JFE5yX2HtcHiVBFq8bJitGgDZH+3QEj2yLK5donfIEcQxX+h3QqVmkOTkphyAOydT+fMFKqWMg9zfqwD3v3rASP9/XkqubjqaE2g8BYlJGue3S26TkjBCXsuA42hnk34YkmX3kxhn3irqxBW4JcZgqj2tVy57MSp3m8BY9DzL24QCud7FHzzg0mos+Pb1FdGU/5Lmcbu9UAgBEvThyWMhOWKz0Sr2XJZtNtghBfzQ/ed/dS4o43xPHe9Sx6hCYIfR4gc/ppYUUv+yGrTH5ecPVauc8+8
                        exp: '2026-02-05T13:43:07.979Z'
                        'n': sY50VCweYJ6XGrxl0kbQNsZTt1XwwmG4KLwph05CleDN3apRZjtXfU5WXJMWz5hYcNHkpGR_DulQAj6OzAxYLfaqfZH4Gw7MyzXq1nwLexUimRR5nxeEgEi6BWRcym4huShnsIFybbN61FVF00ZALlV2Lm9mfKOxC_tQuIMCRa06Jtp4OOmuPSUfFoN9-ZY-6RwEGnI5oBUvKT3yFRuAPAfEF-efZ52OQOVi3TtVVT4RZCiiUTUxC-fySAM36RKJx5wnwgGkkGzyL0wkOivb4-ALreUCBvq-vb9tfKzCUXxXhQZAdKsaAUDEgxzo-Wi5qDCGLA4tfIAyI0lr_w3lxw
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: azj8cuvdurps6
  /.well-known/openid-configuration:
    get:
      tags:
        - OIDC
      summary: Configuration Endpoint
      description: |-
        Open ID Connect dynamic provider discovery is not supported currently, this endpoint is only for facilitating the OIDC provider details in a standard way.

        **Reference**: https://openid.net/specs/openid-connect-discovery-1_0.html
      operationId: get-.well-known-openid-configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - userinfo_endpoint
                  - jwks_uri
                  - registration_endpoint
                  - scopes_supported
                  - response_types_supported
                properties:
                  issuer:
                    type: string
                    description: URL using the https scheme with no query or fragment component that the RP asserts as its Issuer Identifier. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
                  authorization_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Authorization Endpoint.
                  token_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Token Endpoint.
                  userinfo_endpoint:
                    type: string
                    description: URL of the OP's UserInfo Endpoint.
                  jwks_uri:
                    type: string
                    description: 'URL of the OP''s JSON Web Key Set [JWK] document.'
                  registration_endpoint:
                    type: string
                    description: URL of Client Registration Endpoint.
                  scopes_supported:
                    type: array
                    description: 'JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.'
                    items: {}
                  response_types_supported:
                    type: array
                    description: JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.
                    items: {}
                  acr_values_supported:
                    type: array
                    description: JSON array containing a list of the Authentication Context Class References that IDP supports.
                    items: {}
                  userinfo_signing_alg_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWS [JWS] signing algorithms.'
                    items: {}
                  userinfo_encryption_alg_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWE [JWE] encryption algorithms.'
                    items: {}
                  userinfo_encryption_enc_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT.'
                    items: {}
                  token_endpoint_auth_methods_supported:
                    type: array
                    description: JSON array containing a list of Client Authentication methods supported by this Token Endpoint.
                    items: {}
                  display_values_supported:
                    type: array
                    description: JSON array containing a list of the display parameter values that the OpenID Provider supports.
                    items: {}
                  claim_types_supported:
                    type: array
                    description: JSON array containing a list of the Claim Types that the OpenID Provider supports.
                    items: {}
                  claims_supported:
                    type: array
                    description: JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for.
                    items:
                      type: string
                  claims_locales_supported:
                    type: array
                    description: Languages and scripts supported for values in Claims being returned.
                    items:
                      type: string
                  ui_locales_supported:
                    type: array
                    description: Languages and scripts supported for the user interface.
                    items:
                      type: string
                  response_modes_supported:
                    type: array
                    description: Mechanism to be used for returning parameters from the Authorization Endpoint.
                    items:
                      const: query
                  token_endpoint_auth_signing_alg_values_supported:
                    type: array
                    items:
                      const: RS256
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      const: RS256
                  verified_claims_supported:
                    type: boolean
                    description: 'Boolean value indicating support for verified_claims, i.e., the OpenID Connect for Identity Assurance extension.'
                  claims_in_verified_claims_supported:
                    type: array
                    description: JSON array containing all Claims supported within verified_claims. Claims that are not present in this array MUST NOT be returned within the verified_claims object.
                    items:
                      type: string
                  trust_frameworks_supported:
                    type: array
                    description: JSON array containing all supported trust frameworks.
                    items:
                      type: string
                  evidence_supported:
                    type: array
                    description: JSON array containing all types of identity evidence the OP uses.
                    items:
                      type: string
                  documents_supported:
                    type: array
                    description: JSON array containing all identity document types utilized by the OP for identity verification.
                    items:
                      type: string
                  attachments_supported:
                    type: array
                    description: JSON array containing all attachment types supported by the OP. Possible values are external and embedded.
                    items:
                      type: string
                  digest_algorithms_supported:
                    type: array
                    description: JSON array containing all supported digest algorithms which can be used as alg property within the digest object of external attachments.
                    items:
                      type: string
              examples:
                Example 1:
                  value:
                    issuer: 'https://esignet.collab.mosip.net'
                    authorization_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/authorize'
                    token_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/oauth/token'
                    userinfo_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/oidc/userinfo'
                    jwks_uri: 'https://esignet.collab.mosip.net/.well-known/jwks.json'
                    registration_endpoint: 'https://esignet.collab.mosip.net/v1/esignet/client-mgmt/oauth-client'
                    scopes_supported:
                      - email
                    response_types_supported:
                      - code
                    response_modes_supported:
                      - query
                    token_endpoint_auth_methods_supported:
                      - private_key_jwt
                    token_endpoint_auth_signing_alg_values_supported:
                      - RS256
                    userinfo_signing_alg_values_supported:
                      - RS256
                    userinfo_encryption_alg_values_supported:
                      - RSAXXXXX
                    userinfo_encryption_enc_values_supported:
                      - A128GCM
                    id_token_signing_alg_values_supported:
                      - RS256
                    claim_types_supported:
                      - normal
                    claims_parameter_supported: true
                    display_values_supported:
                      - page
                      - popup
                      - touch
                      - wap
                    subject_types_supported:
                      - pairwise
                    claims_supported:
                      - name
                      - picture
                      - gender
                      - birthdate
                      - address
                      - email
                      - phone_number
                    acr_values_supported:
                      - 'mosip:idp:acr:static-code'
                      - 'mosip:idp:acr:generated-code'
                      - 'mosip:idp:acr:linked-wallet'
                      - 'mosip:idp:acr:biometrics'
                    request_parameter_supported: false
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: o0uqnqgz9zm7j
  /oauth/introspect:
    get:
      tags:
        - OIDC
      summary: Introspect Endpoint (Draft)
      description: |-
        This endpoint takes an access token or ID token and returns a boolean that indicates whether it is active. If the token is active, additional data about the token is also returned. If the token is invalid, expired, or revoked, it is considered inactive.

        **Reference**: https://www.rfc-editor.org/rfc/rfc7662.html
      operationId: get-introspect
      parameters:
        - name: token
          in: query
          description: An access token or ID token
          required: true
          schema:
            type: string
        - name: token_type_hint
          in: query
          description: 'Indicates the type of token being passed. Valid values: access_token, id_token'
          required: true
          schema:
            type: string
            enum:
              - access_token
              - id_token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
                required:
                  - error
                  - error_description
      security:
        - Authorization-Bearer: []
      servers:
        - url: 'https://esignet.collab.mosip.net/v1/esignet'
      x-stoplight:
        id: o9h010bmb1db5
tags:
  - name: Management
    description: Management level API's used for internal use.
  - name: OIDC
    description: API's that are supposed to be compliant to OIDC.
  - name: UI
    description: UI related API.
  - name: VCI
    description: VC issuance related API's
  - name: WALLET
    description: API's to be invoked from the wallet app.
  - name: WALLET BACKEND
    description: API's to be invoked from Wallet backend service.
components:
  securitySchemes:
    Authorization-Bearer:
      type: http
      scheme: bearer
    Authorization-add_oidc_client:
      type: http
      description: Valid JWT issued by a trusted IAM system with "**add_oidc_client**" scope.
      scheme: bearer
    Authorization-update_oidc_client:
      type: http
      description: Valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
      scheme: bearer
    Authorization-access_token:
      type: http
      description: Access token received from /token endpoint
      scheme: bearer
    Authorization-send_binding_otp:
      type: http
      description: Valid JWT issued by a trusted IAM system with "<b>send_binding_otp</b>" scope.
      scheme: bearer
    Authorization-wallet_binding:
      type: http
      description: Valid JWT issued by a trusted IAM system with "**wallet_binding**" scope.
      scheme: bearer
  schemas:
    Claim:
      type: object
      title: Claim
      description: |
        The userinfo and id_token members of the claims request both are JSON object. if null, Indicates that this Claim is being requested as Voluntary Claim.

        **Note:** Unknown claim names either in userinfo or id_token are ignored.
      x-stoplight:
        id: hhww7s6bqjn8j
      properties:
        userinfo:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/ClaimDetail'
            given_name:
              $ref: '#/components/schemas/ClaimDetail'
            email:
              $ref: '#/components/schemas/ClaimDetail'
            gender:
              $ref: '#/components/schemas/ClaimDetail'
            birthdate:
              $ref: '#/components/schemas/ClaimDetail'
            phone_number:
              $ref: '#/components/schemas/ClaimDetail'
            profile_photo:
              $ref: '#/components/schemas/ClaimDetail'
            address:
              $ref: '#/components/schemas/ClaimDetail'
            locale:
              $ref: '#/components/schemas/ClaimDetail'
            individual_id:
              $ref: '#/components/schemas/ClaimDetail'
            verified_claims:
              type: array
              x-stoplight:
                id: hv9p69214uhf2
              items:
                $ref: '#/components/schemas/VerifiedClaimDetail'
                x-stoplight:
                  id: 15ypbmicw15jx
        id_token:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/ClaimDetail'
            acrs:
              $ref: '#/components/schemas/ClaimDetail'
    ClaimDetail:
      type: object
      title: ClaimDetail
      x-stoplight:
        id: 4enwly0dhq8tp
      properties:
        essential:
          type: boolean
          description: |
            Indicates whether the Claim being requested is an Essential Claim. If the value is true, this indicates that the Claim is an Essential Claim. The default is false.
        value:
          type: string
          description: |-
            Requests that the Claim be returned with a particular value. For instance the Claim request.

            "sub": {"value": "248289761001"} can be used to specify that the request apply to the End-User with Subject Identifier 248289761001.
        values:
          type: array
          description: 'Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference.'
          items:
            type: string
        purpose:
          type: string
          x-stoplight:
            id: 09xoyys6jceae
          description: Reason for requesting claim.
          minLength: 3
          maxLength: 300
    AuthFactor:
      type: object
      title: AuthFactor
      properties:
        type:
          type: string
          enum:
            - PIN
            - OTP
            - L1-bio-device
            - Wallet
            - KBI
          description: Name of the authentication method
        count:
          type: integer
          description: 'Applicable for biometric based authentication, number of bio segments to be captured for authentication.'
        bioSubTypes:
          type: array
          description: Applicable for biometric based authentication. Can be more specific about which bio segments should be captured.
          items:
            type: string
      required:
        - type
      x-stoplight:
        id: 50labrntmysgm
    AuthChallenge:
      type: object
      title: AuthChallenge
      description: Model to take any type of challenge from the end user as part of authenticate request.
      x-stoplight:
        id: thl682syr59bm
      required:
        - authFactorType
        - challenge
        - format
      properties:
        authFactorType:
          type: string
          enum:
            - OTP
            - BIO
            - PIN
            - WLA
            - PWD
            - KBI
            - IDT
          description: Defines the type of auth challenge. It should be same as authfactor.type (oauth-details response).
        challenge:
          type: string
          description: Actual challenge as string.
        format:
          type: string
          enum:
            - alpha-numeric
            - jwt
            - encoded-json
            - number
            - base64url-encoded-json
          description: Format of the challenge provided.
    ClaimStatus:
      title: ClaimStatus
      x-stoplight:
        id: o85s4acpltciv
      type: object
      description: Resolved claims among the RP requested claims with their availability and verification status.
      required:
        - claim
        - available
        - verified
      properties:
        claim:
          type: string
          x-stoplight:
            id: v8q85klte4k2w
          description: Claim name.
        available:
          type: boolean
          x-stoplight:
            id: 1nijvjx7r3t0w
          description: True if the claim is available for the user account.
        verified:
          type: boolean
          x-stoplight:
            id: 8z1n64eu4tc1f
          description: True only if the claim is available and verified by atleast one trust framework. And also the verification process completed before the requested max_age.
    VerifiedClaimDetail:
      title: VerifiedClaimDetail
      x-stoplight:
        id: ombll0ox1abk0
      type: object
      description: |-
        Verified claim detail that can be requested by the RP

        **How should OP beahve when requested verified claims cannot be fulfilled? **
        Refer : https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#section-6.5


        ** Sample requests: **
        The RP MUST set fields one step deeper into the structure if it wants to obtain evidence. One or more entries in the evidence array are used as filter criteria and templates for all entries in the result array.

        If multiple entries are present in evidence, these filters are linked by a logical OR.

        Eg: The following example shows that the RP wants to obtain an attestation based on the German Anti Money Laundering Law (trust framework de_aml) and limited to End-Users who were identified in a bank branch in person (physical in person proofing - method pipp) using either an idcard or a passport.

        {
          "userinfo": {
            "verified_claims": {
              "verification": {
                "trust_framework": {
                  "value": "de_aml"
                },
                "evidence": [
                  {
                    "type": {
                      "value": "document"
                    },
                    "method": {
                      "value": "pipp"
                    },
                    "document_details": {
                      "type": {
                        "values": [
                          "idcard",
                          "passport"
                        ]
                      }
                    }
                  }
                ]
              },
              "claims": {
                "given_name": null,
                "birthdate": null
              }
            }
          }
        }


        The following is an example of a request for Claims where the verification process of the data is not allowed to be older than 63113852 seconds:

        {
          "userinfo": {
            "verified_claims": {
              "verification": {
                "trust_framework": {
                  "value": "jp_aml"
                },
                "time": {
                  "max_age": 63113852
                }
              },
              "claims": {
                "given_name": null,
                "birthdate": null
              }
            }
          }
        }


        **NOTE:** eKYC working group has documented some of the predefined values  for trust frameworks, documents, methods, validation methods or verification methods in the below wikipage.
        https://bitbucket.org/openid/ekyc-ida/wiki/identifiers
        Values is NOT restricted to list in the wiki page, This is left to adopters of the technical specification, e.g., implementers, identity schemes, or jurisdictions.
      required:
        - verification
        - claims
      properties:
        verification:
          type: object
          x-stoplight:
            id: 0p4yvay9n1kxc
          description: Object that contains data about the verification process.
          required:
            - trust_framework
          properties:
            trust_framework:
              $ref: '#/components/schemas/FilterCriteria'
              x-stoplight:
                id: gcros2a8f4lxr
              description: 'String determining the trust framework governing the identity verification process of the OP. An example value is eidas, which denotes a notified eID system under eIDAS '
            time:
              type: object
              x-stoplight:
                id: a1y7epmxba1w5
              description: 'Date time when the identity verification process is completed. '
              properties:
                max_age:
                  type: integer
                  x-stoplight:
                    id: y0j56rtgtnscw
                  description: Number value only applicable to Claims that contain dates or timestamps. It defines the maximum time (in seconds) to be allowed to elapse since the value of the date/timestamp up to the point in time of the request.
            assurance_level:
              $ref: '#/components/schemas/FilterCriteria'
              x-stoplight:
                id: e9w8ta6wqgkai
              description: |-
                String determining the assurance level associated with the End-User Claims in the respective verified_claims. The value range depends on the respective trust_framework value.

                For example, the trust framework eidas can have the identity assurance levels low, substantial and high.
            evidence:
              type: array
              x-stoplight:
                id: tyg6zddjj1kqn
              description: 'JSON array containing information about the evidence the OP used to verify the End-User''s identity as separate JSON objects. Every object contains the property type which determines the type of the evidence. '
              items:
                x-stoplight:
                  id: l7oe5pu3cvxx8
                type: object
                required:
                  - type
                properties:
                  type:
                    type: object
                    x-stoplight:
                      id: va3ctpg5755pi
                    description: The value defines the type of the evidence.
                    properties:
                      value:
                        x-stoplight:
                          id: pfa4rkymsjxrg
                        enum:
                          - document
                          - electronic_record
                          - vouch
                          - electronic_signature
                  method:
                    $ref: '#/components/schemas/FilterCriteria'
                    x-stoplight:
                      id: 4m1hvww6d4gnc
                    description: The method used to validate the document and verify the person is the owner of it.
                  time:
                    type: object
                    x-stoplight:
                      id: z4dktuoe6kiux
                    properties:
                      max_age:
                        type: integer
                        x-stoplight:
                          id: nbjzzkvvemdjf
                  verification_method:
                    type: object
                    x-stoplight:
                      id: 16etedvsvpkv7
                    properties:
                      type:
                        $ref: '#/components/schemas/FilterCriteria'
                        x-stoplight:
                          id: jscciizlg7uf6
                  check_details:
                    type: array
                    x-stoplight:
                      id: 5q6luh9khretn
                    description: |2-





















                       JSON array representing the checks done in relation to the evidence. When present this array MUST have at least one member. This is applicable only for below evidence types:
                       1. document
                       2. electronic_record
                       3. vouch
                    items:
                      $ref: '#/components/schemas/EvidenceCheckDetail'
                      x-stoplight:
                        id: 6n1fv8kuv77mx
                  document_details:
                    type: object
                    x-stoplight:
                      id: r6fvhast33dys
                    description: ' JSON object representing the document used to perform the identity verification.'
                    required:
                      - type
                    properties:
                      type:
                        $ref: '#/components/schemas/FilterCriteria'
                        x-stoplight:
                          id: sakbs0r95tafk
                      document_number:
                        type: string
                        x-stoplight:
                          id: arcqb0lrkoosa
                      date_of_issuance:
                        type: object
                        x-stoplight:
                          id: pslya7hdgxhlc
                        properties:
                          max_age:
                            type: number
                            x-stoplight:
                              id: 1oenvxpjnf5gw
                      date_of_expiry:
                        type: object
                        x-stoplight:
                          id: e6qkjwvk2pzwu
                        properties:
                          max_age:
                            type: number
                            x-stoplight:
                              id: 82er6gon40ego
                      issuer:
                        $ref: '#/components/schemas/EvidenceIssuer'
                        x-stoplight:
                          id: pkoj6hufcua2e
                  attestation:
                    type: string
                    x-stoplight:
                      id: 0itl6t5pm567h
                    description: Represents the attestation that is the basis of the vouch. Applicable only when evidence type is `vouch`
                  signature_type:
                    $ref: '#/components/schemas/FilterCriteria'
                    x-stoplight:
                      id: q7czpfhq252hx
                    description: Applicable when evidence type is `electronic_signature`. String denoting the type of signature used as evidence. The value range might be restricted by the respective trust framework.
                  issuer:
                    $ref: '#/components/schemas/FilterCriteria'
                    x-stoplight:
                      id: 84dozda2ulyba
                    description: Applicable when evidence type is `electronic_signature`.String denoting the certification authority that issued the signer's certificate.
                  serial_number:
                    type: string
                    x-stoplight:
                      id: isycr5qez9g92
                    description: Applicable when evidence type is `electronic_signature`.String containing the serial number of the certificate used to sign.
                  created_at:
                    type: object
                    x-stoplight:
                      id: 1cd9oehznrvzb
                    description: Applicable when evidence type is `electronic_signature`. The time the signature was created
                    properties:
                      max_age:
                        type: number
                        x-stoplight:
                          id: hohtnxky11gon
                  record:
                    $ref: '#/components/schemas/ElectronicRecord'
                    x-stoplight:
                      id: 1n1fhhi6tviyl
                    description: |-
                      Applicable when the evidence type is `electronic_record`
                      object representing the record used to perform the identity verification.
        claims:
          type: object
          x-stoplight:
            id: 28jhv2raf2jvs
          description: Object that is the container for the Verified Claims about the End-User.
          properties:
            name:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: wf28zzg23ot6k
            email:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: qbvq1021aj5co
            phone_number:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: kia24gddr7x4f
            birthDate:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: 2qhojqimhh30o
            address:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: 9glxctd41qha9
            given_name:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: f0t2dh3t1tq2u
            gender:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: neefygyrp53y7
            profile_photo:
              $ref: '#/components/schemas/ClaimDetail'
              x-stoplight:
                id: nlr9b6e1t2a0q
    EvidenceCheckDetail:
      title: EvidenceCheckDetail
      x-stoplight:
        id: 56ntbetl6kt55
      type: object
      description: |-
        Object representing the checks done in relation to the evidence.

        The eKYC and Identity Assurance Working Group maintains a wiki page
      required:
        - check_method
      properties:
        check_method:
          type: string
          x-stoplight:
            id: 4126zn3cgys2x
          description: 'String representing the check done, this includes processes such as checking the authenticity of the document, or verifying the user''s biometric against an identity document.'
        organization:
          type: string
          x-stoplight:
            id: nyope33fgcfhw
          description: String denoting the legal entity that performed the check. This SHOULD be included if the OP did not perform the check itself.
        txn:
          type: string
          x-stoplight:
            id: 8f3iuc2p4n00x
          description: Identifier referring to the identity verification transaction.
        time:
          type: object
          x-stoplight:
            id: 3zxijsb5y1r1m
          properties:
            max_age:
              type: number
              x-stoplight:
                id: zgmtczhmyuevp
              description: when the check was completed.
    FilterCriteria:
      title: FilterCriteria
      x-stoplight:
        id: xvfexlq01bb2w
      type: object
      description: Value or values used to filter the verified claims. if provided in the values parameter its a logical OR condition.
      properties:
        value:
          type: string
          x-stoplight:
            id: jjhci731oeh17
        values:
          type: array
          x-stoplight:
            id: cutrh4azzqe5g
          items:
            x-stoplight:
              id: e62l9ek9qjcwb
            type: string
    EvidenceIssuer:
      title: EvidenceIssuer
      x-stoplight:
        id: hia062eivzuvp
      type: object
      description: ' JSON object containing information about the issuer of this document.'
      properties:
        name:
          type: string
          x-stoplight:
            id: 8vn2u1ygayf23
          description: Designation of the issuer of the document.
        country:
          type: string
          x-stoplight:
            id: v9uqjvs18sash
          description: String denoting the country or supranational organization that issued the document.
        country_code:
          type: string
          x-stoplight:
            id: bhbrve82cwf8t
          description: 'String denoting the country or supranational organization that issued the document as ISO 3166/ICAO 3-letter codes [ICAO-Doc9303], e.g., "USA" or "JPN". 2-letter ICAO codes MAY be used in some circumstances for compatibility reasons.'
        jurisdiction:
          type: string
          x-stoplight:
            id: 1vmpmmd5w2bqm
          description: 'String containing the name of the region(s)/state(s)/province(s)/municipality(ies) that issuer has jurisdiction over '
    ElectronicRecord:
      title: ElectronicRecord
      x-stoplight:
        id: 79aws43989s8i
      type: object
      description: 'JSON object representing the record used to perform the identity verification. It consists of the following properties:'
      properties:
        type:
          $ref: '#/components/schemas/FilterCriteria'
          x-stoplight:
            id: 5fxslmmpxsaps
          description: 'String denoting the type of electronic record. '
        personal_number:
          type: string
          x-stoplight:
            id: ka93nqnawpip4
          description: 'String representing an identifier that is assigned to the End-User and is not limited to being used in one record, for example a national identification number, personal identity number, citizen number, social security number, driver number, account number, customer number, licensee number, etc.'
        created_at:
          type: object
          x-stoplight:
            id: wscjw3gpoophf
          properties:
            max_age:
              type: number
              x-stoplight:
                id: z5nkrvp5n7kbj
        date_of_expiry:
          type: object
          x-stoplight:
            id: 34fz8pvnwebhc
          properties:
            max_age:
              type: number
              x-stoplight:
                id: oqz5k5ft6jwjl
        source:
          $ref: '#/components/schemas/EvidenceIssuer'
          x-stoplight:
            id: yq1ybrzyy1u9s
