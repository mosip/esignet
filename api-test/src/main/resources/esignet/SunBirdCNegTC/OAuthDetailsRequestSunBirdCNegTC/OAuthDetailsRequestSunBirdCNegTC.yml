OAuthDetailsRequestSunBirdCNegTC:
   ESignet_OAuthDetailsRequest_SunBirdC_all_Valid_with_other_acrs:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_01
      description: To request OAuthDetails for SunBirdC with all valid dataand with other acrs
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge mosip:idp:acr:generated-code mosip:idp:acr:linked-wallet mosip:idp:acr:biometrics",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'
   ESignet_OAuthDetailsRequest_SunBirdC_without_scope:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_02
      description: To request OAuthDetails for SunBirdC with all valid data and without scope
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$REMOVE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_scope"
    }
  ]
}'
   ESignet_OAuthDetailsRequest_SunBirdC_without_scope_data:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_03
      description: To request OAuthDetails for SunBirdC with all valid data and without scope data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_scope"
    }
  ]
       
}'
   ESignet_OAuthDetailsRequest_SunBirdC_with_invalid_scope_data:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_04
      description: To request OAuthDetails for SunBirdC with invalid scope value
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "anbcsh123",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_scope"
    }
  ]
}'
   ESignet_OAuthDetailsRequest_SunBirdC_with_opeind_scope_data:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_05
      description: To request OAuthDetails for SunBirdC with openid scope data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "openid profile",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'
   ESignet_OAuthDetailsRequest_SunBirdC_with_openid_profile_sunbird_data_Pos:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_06
      description: To request OAuthDetails for SunBirdC with openid profile sunbird value in scope
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "openid profile sunbird_rc_insurance_vc_ldp",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
}'
   ESignet_OAuthDetailsRequest_SunBirdC_with_random_codeChallenege_data:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_07
      description: To request OAuthDetails for SunBirdC with random codeChallenge data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "9sJ3SSa1AfcYwqi",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'
   ESignet_OAuthDetailsRequest_SunBirdC_with_invalid_challenege_method:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_08
      description: To request OAuthDetails for SunBirdC with invalid codeChallengeMethod 
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "@64gdbbjn"
}'
      output: '{
  "errors": [
    {
      "errorCode": "unsupported_pkce_challenge_method"
    }
  ]
}'
   ESignet_OAuthDetailsRequest_SunBirdC_with_empty_challenege_data:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_09
      description: To request OAuthDetails for SunBirdC with an empty codeChallenge data
      role: resident
      restMethod: post
      allowedErrorCodes: unsupported_pkce_challenge_method,invalid_pkce_challenge
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": " ",
        "codeChallengeMethod": " "
}'
      output: '{
  "errors": [
    {
      "erroCode": "unsupported_pkce_challenge_method"
    }
  ]
}'
   ESignet_OAuthDetailsRequest_SunBirdC_with_lengthy_codeChallenege_data:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_10
      description: To request OAuthDetails for SunBirdC with lenghty codeChallenge data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "9sJ3SSa1AfcYwqieyegdbdbdbdbhey373664gfgfbcbcbcncjccudhdyye7eyeggcbc374hfgdfdsbs98645g4gvgvv",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'
   ESignet_OAuthDetailsRequest_SunBirdC_without_codeChallenege_and_with_sunbirdc_scope:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_11
      description: To request OAuthDetails for SunBirdC with sunbirdc scope
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$REMOVE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_pkce_challenge"
    }
  ]
}'
   ESignet_OAuthDetailsRequest_SunBirdC_With_only_code_challenge_with_scope:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_12
      description: To request OAuthDetails for SunBirdC with only codeChallenge with scope
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "$REMOVE$"
}'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_pkce_challenge"
    }
  ]
}'
   ESignet_OAuthDetailsRequest_SunBirdC_With_only_challenge_method:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_13
      description: To request OAuthDetails for SunBirdC with only challenge method
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdC/OAuthDetailsRequestSunBirdC/OAuthDetailsRequestSunBirdC
      outputTemplate: esignet/error
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$REMOVE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_pkce_challenge"
    }
  ]
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_all_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_14
      description: To request OAuthDetails for SunBirdC with valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen1_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_15
      description: To request OAuthDetails for SunBirdC with valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen2_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_16
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen3_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_17
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen4_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_18
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen5_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_19
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen6_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_20
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen1_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_21
      description: To request OAuthDetails for SunBirdC with valid AuthCode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen2_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_22
      description: To request OAuthDetails for SunBirdC with different different valid AuthCode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen3_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_23
      description: To request OAuthDetails for SunBirdC with different valid AuthCode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen4_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_24
      description: To request OAuthDetails for SunBirdC with different  valid Authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen5_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_25
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen6_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_26
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen7_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_27
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'

   ESignet_OAuthDetailsRequest_SunBirdCNegTC_Scen8_AuthCode_Valid_sid:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/v2/oauth-details
      uniqueIdentifier: TC_ESignet_OAuthDetailsRequestSunBirdCNegTC_28
      description: To request OAuthDetails for SunBirdC with different valid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      inputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTC/OAuthDetailsRequestSunBirdCNegTCResult
      input: '{
      	"requestTime": "$TIMESTAMP$",
      	"clientId": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
      	"scope": "$SUNBIRD_SCOPE$",
      	"responseType": "code",
      	"redirectUri": "$IDPREDIRECTURI$",
      	"display": "popup",
	    "prompt": "login",
	    "acrValues": "mosip:idp:acr:knowledge",
	    "nonce": "$UNIQUENONCEVALUEFORESIGNET$",
	    "state": "eree2311",
	    "claimsLocales": "en",
	    "codeChallenge": "$CODECHALLENGE$",
        "codeChallengeMethod": "S256"
}'
      output: '{
       
}'