GetCredentialSunBirdCNegTC:
   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Missing_Credential_Def_Type1_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_01
      description: To Authenticate the user for SunBirdC with missing first credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "$REMOVE$"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Missing_Credential_Def_Type2_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_02
      description: To Authenticate the user for SunBirdC with missing second credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "$REMOVE$"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Missing_Credential_Def_Types_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_03
      description: To Authenticate the user for SunBirdC with missing both credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "$REMOVE$"}, {types: "$REMOVE$"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "invalid_request"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Invalid_Credential_Def_Type1_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_04
      description: To Authenticate the user for SunBirdC with invalid first credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "asfadf"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Invalid_Credential_Def_Type2_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_05
      description: To Authenticate the user for SunBirdC with invalid second credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "asfadf"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Invalid_Credential_Def_Types_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_06
      description: To Authenticate the user for SunBirdC with invalid credential def Types
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "asfadf"}, {types: "asgfdga"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Empty_Credential_Def_Type1_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_07
      description: To Authenticate the user for SunBirdC with an empty first credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: ""}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "invalid_request"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Empty_Credential_Def_Type2_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_08
      description: To Authenticate the user for SunBirdC with an empty second credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: ""}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "invalid_request"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Empty_Credential_Def_Types_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_09
      description: To Authenticate the user for SunBirdC with an empty both credential def Types
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: ""}, {types: ""}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "invalid_request"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_SpaceVal_Credential_Def_Type1_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_10
      description: To Authenticate the user for SunBirdC with space value in first credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: " "}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "invalid_request"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_SpaceVal_Credential_Def_Type2_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_11
      description: To Authenticate the user for SunBirdC with space value in second credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: " "}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "invalid_request"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_SpaceVal_Credential_Def_Types_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_12
      description: To Authenticate the user for SunBirdC with space value in both credential def Types
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: " "}, {types: " "}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "invalid_request"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Null_Credential_Def_Type1_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_13
      description: To Authenticate the user for SunBirdC with null value in first credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "null"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Null_Credential_Def_Type2_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_14
      description: To Authenticate the user for SunBirdC with null value in second credential def Type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "null"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_Null_Credential_Def_Types_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_15
      description: To Authenticate the user for SunBirdC with null value in both credential def Types
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/error2
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "null"}, {types: "null"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   ESignet_GetCredentialSunBirdCNegTC_IdpAccessToken_all_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/vci/credential
      uniqueIdentifier: TC_ESignet_GetCredentialSunBirdCNegTC_16
      description: To Authenticate the user for SunBirdC with invalid data
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/GetCredentialSunBirdCNegTC/GetCredentialSunBirdCNegTCResult
      input: '{
      	"client_id": "$ID:CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:GenerateTokenSunBirdCNegTC_Valid_Smoke_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
}'