AuthenticateUserSunBirdCNegTC:
   ESignet_AuthenticateUserSunBirdCNegTC_Invalid_TransactionID_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with invalid transactionId
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "sgsfdg",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_transaction"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Missing_TransactionID_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with missing transactionId
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$REMOVE$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_transaction"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Empty_TransactionID_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an empty transactionId
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "sgsfdg",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_transaction"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Expired_TransactionID_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an expired transactionId
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "LIqWka8p3F4ID2Z2X4Dnxqf57ixUZyHxGGrDe7R96p4",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_transaction"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Invalid_PolicyNum_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with invalid policy number
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "5adsf1",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "auth_failed"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Empty_PolicyNum_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an empty policy number
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_identifier"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_SpaceVal_PolicyNum_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with space value in policy number
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": " ",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_identifier"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Null_PolicyNum_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with null value in policy number
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "null",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "auth_failed"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Missing_PolicyNum_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with missing policy number
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$REMOVE$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_identifier"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Invalid_AuthFactorType_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with invalid authFactorType
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge_length
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBCdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "ads",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge_length"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Empty_AuthFactorType_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an empty authFactorType
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_auth_factor_type
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_SpaceVal_AuthFactorType_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with space value in authFactorType
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_auth_factor_type
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : " ",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Null_AuthFactorType_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with null value in authFactorType
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge_length
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "null",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge_length"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Other_AuthFactorType_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with other authFactorType
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge_length
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "OTP",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge_length"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Missing_AuthFactorType_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with missing authFactorType
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_auth_factor_type
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "$REMOVE$",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Missing_Challenge_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with missing challenge
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$REMOVE$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Empty_Challenge_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an empty challenge
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Invalid_Challenge_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an invalid challenge
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "eyJmdWxsTmFtZSI6IkthaWYgZGFmZHNmZCIsImRvYiI6IjIwMDAtMDctMjYifQ==",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "auth_failed"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Invalid_Encoded_Challenge_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with invalid encoded challenge
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "eyJmdWxsTmFtZSI6IkthaWYgZGFmZHNmZCIsImRvYiI6IjIwMDAtMDctMjYifQ==",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "auth_failed"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_SpaceVal_Challenge_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with space value in challenge
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : " ",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Null_Challenge_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with null value in challenge
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "null",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge_length"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Random_Challenge_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with random challenge
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "sfdgsfhsgjrtjysngfbfsnbsgfjhsgj",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "auth_failed"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Missing_Format_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an empty challenge
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge_format
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "$REMOVE$"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Empty_Format_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with an empty challenge
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge_format
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": ""
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_SpaceVal_Format_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with space value in format
      role: resident
      restMethod: post
      allowedErrorCodes: invalid_challenge_format
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": " "
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_challenge_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with invalid data
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Used_TransactionID_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with already used transactionId
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_all_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_transaction"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Null_Format_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with null value in format
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen1_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen1_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "null"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Invalid_Format_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with invalid format
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen2_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen2_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "sdfgffgs"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Diff_Format1_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid formats
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen3_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen3_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "alpha-numeric"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Diff_Format2_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid formats
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen4_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen4_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "encoded-json"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Diff_Format3_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid formats
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen5_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen5_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "number"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Diff_Format4_Neg:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid formats
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/error
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen6_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen6_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "jwt"
    }'
      output: '{
  "errors": [
    {
      "errorCode": "invalid_auth_factor_type_format"
    }
  ]
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen1_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen1_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen1_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen2_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen2_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen2_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen3_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen3_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen3_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen4_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen4_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen4_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen5_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen5_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen5_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen6_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen6_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen6_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen7_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen7_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen7_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'

   ESignet_AuthenticateUserSunBirdCNegTC_Scen8_AuthCode_Valid_Smoke:
      endPoint: $ESIGNETMOCKBASEURL$/v1/esignet/authorization/authenticate
      description: To Authenticate the user for SunBirdC with different invalid authcode
      role: resident
      restMethod: post
      checkErrorsOnlyInResponse: true
      validityCheckRequired: true
      inputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTC
      outputTemplate: esignet/SunBirdCNegTC/AuthenticateUserSunBirdCNegTC/AuthenticateUserSunBirdCNegTCResult
      input: '{
        "encodedHash": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen8_AuthCode_Valid_Smoke_sid_encodedResp$",
      	"requestTime": "$TIMESTAMP$",
      	"transactionId": "$ID:OAuthDetailsRequest_SunBirdCNegTC_Scen8_AuthCode_Valid_Smoke_sid_transactionId$",
      	"individualId": "$POLICYNUMBERFORSUNBIRDRC$",
      	"authFactorType" : "KBA",
      	"challenge" : "$CHALLENGEVALUEFORSUNBIRDC$",
      	"format": "base64url-encoded-json"
    }'
      output: '{
}'